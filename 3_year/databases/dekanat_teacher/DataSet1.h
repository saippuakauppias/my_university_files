#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
namespace teacher {
    using namespace System;
    ref class DataSet1;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"DataSet1"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class DataSet1 : public ::System::Data::DataSet {
        public : ref class GROUPSDataTable;
        public : ref class DISCIPLINESDataTable;
        public : ref class TEACHERSDataTable;
        public : ref class TEACHERS2DISCIPLINESDataTable;
        public : ref class MARKSDataTable;
        public : ref class GROUPSRow;
        public : ref class DISCIPLINESRow;
        public : ref class TEACHERSRow;
        public : ref class TEACHERS2DISCIPLINESRow;
        public : ref class MARKSRow;
        public : ref class GROUPSRowChangeEvent;
        public : ref class DISCIPLINESRowChangeEvent;
        public : ref class TEACHERSRowChangeEvent;
        public : ref class TEACHERS2DISCIPLINESRowChangeEvent;
        public : ref class MARKSRowChangeEvent;
        
        private: teacher::DataSet1::GROUPSDataTable^  tableGROUPS;
        
        private: teacher::DataSet1::DISCIPLINESDataTable^  tableDISCIPLINES;
        
        private: teacher::DataSet1::TEACHERSDataTable^  tableTEACHERS;
        
        private: teacher::DataSet1::TEACHERS2DISCIPLINESDataTable^  tableTEACHERS2DISCIPLINES;
        
        private: teacher::DataSet1::MARKSDataTable^  tableMARKS;
        
        private: ::System::Data::DataRelation^  relationTEACHERS2DISCIPLINES_DISCIPLINES;
        
        private: ::System::Data::DataRelation^  relationTEACHERS2DISCIPLINES_TEACHERS;
        
        private: ::System::Data::DataRelation^  relationMARKS_TEACHERS;
        
        private: ::System::Data::DataRelation^  relationDISCIPLINES_MARKS;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void GROUPSRowChangeEventHandler(::System::Object^  sender, teacher::DataSet1::GROUPSRowChangeEvent^  e);
        
        public : delegate System::Void DISCIPLINESRowChangeEventHandler(::System::Object^  sender, teacher::DataSet1::DISCIPLINESRowChangeEvent^  e);
        
        public : delegate System::Void TEACHERSRowChangeEventHandler(::System::Object^  sender, teacher::DataSet1::TEACHERSRowChangeEvent^  e);
        
        public : delegate System::Void TEACHERS2DISCIPLINESRowChangeEventHandler(::System::Object^  sender, teacher::DataSet1::TEACHERS2DISCIPLINESRowChangeEvent^  e);
        
        public : delegate System::Void MARKSRowChangeEventHandler(::System::Object^  sender, teacher::DataSet1::MARKSRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet1();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet1(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property teacher::DataSet1::GROUPSDataTable^  GROUPS {
            teacher::DataSet1::GROUPSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property teacher::DataSet1::DISCIPLINESDataTable^  DISCIPLINES {
            teacher::DataSet1::DISCIPLINESDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property teacher::DataSet1::TEACHERSDataTable^  TEACHERS {
            teacher::DataSet1::TEACHERSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property teacher::DataSet1::TEACHERS2DISCIPLINESDataTable^  TEACHERS2DISCIPLINES {
            teacher::DataSet1::TEACHERS2DISCIPLINESDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property teacher::DataSet1::MARKSDataTable^  MARKS {
            teacher::DataSet1::MARKSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeGROUPS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeDISCIPLINES();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeTEACHERS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeTEACHERS2DISCIPLINES();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeMARKS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class GROUPSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_GROUP;
            
            private: ::System::Data::DataColumn^  columnNAME_GROUP;
            
            private: ::System::Data::DataColumn^  columnCOURSE;
            
            private: ::System::Data::DataColumn^  columnID_PROFESSION;
            
            private: ::System::Data::DataColumn^  columnSUBGROUP;
            
            private: ::System::Data::DataColumn^  columnGROUPNAME;
            
            public: event teacher::DataSet1::GROUPSRowChangeEventHandler^  GROUPSRowChanging;
            
            public: event teacher::DataSet1::GROUPSRowChangeEventHandler^  GROUPSRowChanged;
            
            public: event teacher::DataSet1::GROUPSRowChangeEventHandler^  GROUPSRowDeleting;
            
            public: event teacher::DataSet1::GROUPSRowChangeEventHandler^  GROUPSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_GROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  NAME_GROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  COURSEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_PROFESSIONColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  SUBGROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  GROUPNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::GROUPSRow^  default [::System::Int32 ] {
                teacher::DataSet1::GROUPSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddGROUPSRow(teacher::DataSet1::GROUPSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::GROUPSRow^  AddGROUPSRow(
                        System::Decimal ID_GROUP, 
                        System::String^  NAME_GROUP, 
                        System::Decimal COURSE, 
                        System::Decimal ID_PROFESSION, 
                        System::Decimal SUBGROUP, 
                        System::String^  GROUPNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::GROUPSRow^  FindByID_GROUP(System::Decimal ID_GROUP);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::GROUPSRow^  NewGROUPSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveGROUPSRow(teacher::DataSet1::GROUPSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class DISCIPLINESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_DISCIPLINE;
            
            private: ::System::Data::DataColumn^  columnNAME_DISCIPLINE;
            
            private: ::System::Data::DataColumn^  columnNUMBER_HOURS;
            
            private: ::System::Data::DataColumn^  columnID_GROUP;
            
            private: ::System::Data::DataColumn^  columnID_TYPE;
            
            private: ::System::Data::DataColumn^  columnID_DISCNAME;
            
            private: ::System::Data::DataColumn^  columnDISCNAME;
            
            public: event teacher::DataSet1::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowChanging;
            
            public: event teacher::DataSet1::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowChanged;
            
            public: event teacher::DataSet1::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowDeleting;
            
            public: event teacher::DataSet1::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_DISCIPLINEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  NAME_DISCIPLINEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  NUMBER_HOURSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_GROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_TYPEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_DISCNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DISCNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::DISCIPLINESRow^  default [::System::Int32 ] {
                teacher::DataSet1::DISCIPLINESRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddDISCIPLINESRow(teacher::DataSet1::DISCIPLINESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::DISCIPLINESRow^  AddDISCIPLINESRow(
                        teacher::DataSet1::TEACHERS2DISCIPLINESRow^  parentTEACHERS2DISCIPLINESRowByTEACHERS2DISCIPLINES_DISCIPLINES, 
                        System::String^  NAME_DISCIPLINE, 
                        System::Decimal NUMBER_HOURS, 
                        System::Decimal ID_GROUP, 
                        System::Decimal ID_TYPE, 
                        System::Decimal ID_DISCNAME, 
                        System::String^  DISCNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::DISCIPLINESRow^  FindByID_DISCIPLINE(System::Decimal ID_DISCIPLINE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::DISCIPLINESRow^  NewDISCIPLINESRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveDISCIPLINESRow(teacher::DataSet1::DISCIPLINESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TEACHERSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_TEACHER;
            
            private: ::System::Data::DataColumn^  columnFULLNAME;
            
            public: event teacher::DataSet1::TEACHERSRowChangeEventHandler^  TEACHERSRowChanging;
            
            public: event teacher::DataSet1::TEACHERSRowChangeEventHandler^  TEACHERSRowChanged;
            
            public: event teacher::DataSet1::TEACHERSRowChangeEventHandler^  TEACHERSRowDeleting;
            
            public: event teacher::DataSet1::TEACHERSRowChangeEventHandler^  TEACHERSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_TEACHERColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FULLNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::TEACHERSRow^  default [::System::Int32 ] {
                teacher::DataSet1::TEACHERSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddTEACHERSRow(teacher::DataSet1::TEACHERSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::TEACHERSRow^  AddTEACHERSRow(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  parentTEACHERS2DISCIPLINESRowByTEACHERS2DISCIPLINES_TEACHERS, 
                        System::String^  FULLNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::TEACHERSRow^  FindByID_TEACHER(System::Decimal ID_TEACHER);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::TEACHERSRow^  NewTEACHERSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveTEACHERSRow(teacher::DataSet1::TEACHERSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TEACHERS2DISCIPLINESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnTEACHERS_ID_TEACHER;
            
            private: ::System::Data::DataColumn^  columnDISCIPLINES_ID_DISCIPLINE;
            
            public: event teacher::DataSet1::TEACHERS2DISCIPLINESRowChangeEventHandler^  TEACHERS2DISCIPLINESRowChanging;
            
            public: event teacher::DataSet1::TEACHERS2DISCIPLINESRowChangeEventHandler^  TEACHERS2DISCIPLINESRowChanged;
            
            public: event teacher::DataSet1::TEACHERS2DISCIPLINESRowChangeEventHandler^  TEACHERS2DISCIPLINESRowDeleting;
            
            public: event teacher::DataSet1::TEACHERS2DISCIPLINESRowChangeEventHandler^  TEACHERS2DISCIPLINESRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERS2DISCIPLINESDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERS2DISCIPLINESDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERS2DISCIPLINESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TEACHERS_ID_TEACHERColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DISCIPLINES_ID_DISCIPLINEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::TEACHERS2DISCIPLINESRow^  default [::System::Int32 ] {
                teacher::DataSet1::TEACHERS2DISCIPLINESRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddTEACHERS2DISCIPLINESRow(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::TEACHERS2DISCIPLINESRow^  AddTEACHERS2DISCIPLINESRow(System::Decimal TEACHERS_ID_TEACHER, 
                        System::Decimal DISCIPLINES_ID_DISCIPLINE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::TEACHERS2DISCIPLINESRow^  FindByTEACHERS_ID_TEACHERDISCIPLINES_ID_DISCIPLINE(System::Decimal TEACHERS_ID_TEACHER, 
                        System::Decimal DISCIPLINES_ID_DISCIPLINE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::TEACHERS2DISCIPLINESRow^  NewTEACHERS2DISCIPLINESRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveTEACHERS2DISCIPLINESRow(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class MARKSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_MARK;
            
            private: ::System::Data::DataColumn^  columnVALUE_MARK;
            
            private: ::System::Data::DataColumn^  columnFULLNAME;
            
            private: ::System::Data::DataColumn^  columnDATE_MARK;
            
            private: ::System::Data::DataColumn^  columnID_STUDENT;
            
            private: ::System::Data::DataColumn^  columnID_TEACHER;
            
            private: ::System::Data::DataColumn^  columnID_DISCIPLINE;
            
            public: event teacher::DataSet1::MARKSRowChangeEventHandler^  MARKSRowChanging;
            
            public: event teacher::DataSet1::MARKSRowChangeEventHandler^  MARKSRowChanged;
            
            public: event teacher::DataSet1::MARKSRowChangeEventHandler^  MARKSRowDeleting;
            
            public: event teacher::DataSet1::MARKSRowChangeEventHandler^  MARKSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VALUE_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FULLNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DATE_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_STUDENTColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_TEACHERColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_DISCIPLINEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::MARKSRow^  default [::System::Int32 ] {
                teacher::DataSet1::MARKSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddMARKSRow(teacher::DataSet1::MARKSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::MARKSRow^  AddMARKSRow(
                        System::Decimal ID_MARK, 
                        System::Decimal VALUE_MARK, 
                        System::String^  FULLNAME, 
                        System::DateTime DATE_MARK, 
                        System::Decimal ID_STUDENT, 
                        System::Decimal ID_TEACHER, 
                        System::Decimal ID_DISCIPLINE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::MARKSRow^  FindByID_MARK(System::Decimal ID_MARK);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            teacher::DataSet1::MARKSRow^  NewMARKSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveMARKSRow(teacher::DataSet1::MARKSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class GROUPSRow : public ::System::Data::DataRow {
            
            private: teacher::DataSet1::GROUPSDataTable^  tableGROUPS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_GROUP {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  NAME_GROUP {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal COURSE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_PROFESSION {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal SUBGROUP {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  GROUPNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsNAME_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetNAME_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCOURSENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCOURSENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_PROFESSIONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_PROFESSIONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSUBGROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSUBGROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsGROUPNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetGROUPNAMENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class DISCIPLINESRow : public ::System::Data::DataRow {
            
            private: teacher::DataSet1::DISCIPLINESDataTable^  tableDISCIPLINES;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_DISCIPLINE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  NAME_DISCIPLINE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal NUMBER_HOURS {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_GROUP {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_TYPE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_DISCNAME {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DISCNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::TEACHERS2DISCIPLINESRow^  TEACHERS2DISCIPLINESRow {
                teacher::DataSet1::TEACHERS2DISCIPLINESRow^  get();
                System::Void set(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::MARKSRow^  MARKSRow {
                teacher::DataSet1::MARKSRow^  get();
                System::Void set(teacher::DataSet1::MARKSRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsNAME_DISCIPLINENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetNAME_DISCIPLINENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsNUMBER_HOURSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetNUMBER_HOURSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_TYPENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_TYPENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_DISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_DISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDISCNAMENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERSRow : public ::System::Data::DataRow {
            
            private: teacher::DataSet1::TEACHERSDataTable^  tableTEACHERS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_TEACHER {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FULLNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::TEACHERS2DISCIPLINESRow^  TEACHERS2DISCIPLINESRow {
                teacher::DataSet1::TEACHERS2DISCIPLINESRow^  get();
                System::Void set(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::MARKSRow^  MARKSRow {
                teacher::DataSet1::MARKSRow^  get();
                System::Void set(teacher::DataSet1::MARKSRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFULLNAMENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERS2DISCIPLINESRow : public ::System::Data::DataRow {
            
            private: teacher::DataSet1::TEACHERS2DISCIPLINESDataTable^  tableTEACHERS2DISCIPLINES;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERS2DISCIPLINESRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal TEACHERS_ID_TEACHER {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal DISCIPLINES_ID_DISCIPLINE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< teacher::DataSet1::DISCIPLINESRow^  >^  GetDISCIPLINESRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< teacher::DataSet1::TEACHERSRow^  >^  GetTEACHERSRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class MARKSRow : public ::System::Data::DataRow {
            
            private: teacher::DataSet1::MARKSDataTable^  tableMARKS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_MARK {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal VALUE_MARK {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FULLNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime DATE_MARK {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_STUDENT {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_TEACHER {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_DISCIPLINE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVALUE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVALUE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDATE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDATE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_STUDENTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_STUDENTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_TEACHERNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_TEACHERNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_DISCIPLINENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_DISCIPLINENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< teacher::DataSet1::TEACHERSRow^  >^  GetTEACHERSRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< teacher::DataSet1::DISCIPLINESRow^  >^  GetDISCIPLINESRows();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class GROUPSRowChangeEvent : public ::System::EventArgs {
            
            private: teacher::DataSet1::GROUPSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSRowChangeEvent(teacher::DataSet1::GROUPSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::GROUPSRow^  Row {
                teacher::DataSet1::GROUPSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class DISCIPLINESRowChangeEvent : public ::System::EventArgs {
            
            private: teacher::DataSet1::DISCIPLINESRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESRowChangeEvent(teacher::DataSet1::DISCIPLINESRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::DISCIPLINESRow^  Row {
                teacher::DataSet1::DISCIPLINESRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERSRowChangeEvent : public ::System::EventArgs {
            
            private: teacher::DataSet1::TEACHERSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSRowChangeEvent(teacher::DataSet1::TEACHERSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::TEACHERSRow^  Row {
                teacher::DataSet1::TEACHERSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERS2DISCIPLINESRowChangeEvent : public ::System::EventArgs {
            
            private: teacher::DataSet1::TEACHERS2DISCIPLINESRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERS2DISCIPLINESRowChangeEvent(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::TEACHERS2DISCIPLINESRow^  Row {
                teacher::DataSet1::TEACHERS2DISCIPLINESRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class MARKSRowChangeEvent : public ::System::EventArgs {
            
            private: teacher::DataSet1::MARKSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSRowChangeEvent(teacher::DataSet1::MARKSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property teacher::DataSet1::MARKSRow^  Row {
                teacher::DataSet1::MARKSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace teacher {
    
    
    inline DataSet1::DataSet1() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &teacher::DataSet1::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline DataSet1::DataSet1(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &teacher::DataSet1::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"GROUPS"] != nullptr) {
                __super::Tables->Add((gcnew teacher::DataSet1::GROUPSDataTable(ds->Tables[L"GROUPS"])));
            }
            if (ds->Tables[L"DISCIPLINES"] != nullptr) {
                __super::Tables->Add((gcnew teacher::DataSet1::DISCIPLINESDataTable(ds->Tables[L"DISCIPLINES"])));
            }
            if (ds->Tables[L"TEACHERS"] != nullptr) {
                __super::Tables->Add((gcnew teacher::DataSet1::TEACHERSDataTable(ds->Tables[L"TEACHERS"])));
            }
            if (ds->Tables[L"TEACHERS2DISCIPLINES"] != nullptr) {
                __super::Tables->Add((gcnew teacher::DataSet1::TEACHERS2DISCIPLINESDataTable(ds->Tables[L"TEACHERS2DISCIPLINES"])));
            }
            if (ds->Tables[L"MARKS"] != nullptr) {
                __super::Tables->Add((gcnew teacher::DataSet1::MARKSDataTable(ds->Tables[L"MARKS"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &teacher::DataSet1::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline teacher::DataSet1::GROUPSDataTable^  DataSet1::GROUPS::get() {
        return this->tableGROUPS;
    }
    
    inline teacher::DataSet1::DISCIPLINESDataTable^  DataSet1::DISCIPLINES::get() {
        return this->tableDISCIPLINES;
    }
    
    inline teacher::DataSet1::TEACHERSDataTable^  DataSet1::TEACHERS::get() {
        return this->tableTEACHERS;
    }
    
    inline teacher::DataSet1::TEACHERS2DISCIPLINESDataTable^  DataSet1::TEACHERS2DISCIPLINES::get() {
        return this->tableTEACHERS2DISCIPLINES;
    }
    
    inline teacher::DataSet1::MARKSDataTable^  DataSet1::MARKS::get() {
        return this->tableMARKS;
    }
    
    inline ::System::Data::SchemaSerializationMode DataSet1::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void DataSet1::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  DataSet1::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  DataSet1::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void DataSet1::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  DataSet1::Clone() {
        teacher::DataSet1^  cln = (cli::safe_cast<teacher::DataSet1^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void DataSet1::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"GROUPS"] != nullptr) {
                __super::Tables->Add((gcnew teacher::DataSet1::GROUPSDataTable(ds->Tables[L"GROUPS"])));
            }
            if (ds->Tables[L"DISCIPLINES"] != nullptr) {
                __super::Tables->Add((gcnew teacher::DataSet1::DISCIPLINESDataTable(ds->Tables[L"DISCIPLINES"])));
            }
            if (ds->Tables[L"TEACHERS"] != nullptr) {
                __super::Tables->Add((gcnew teacher::DataSet1::TEACHERSDataTable(ds->Tables[L"TEACHERS"])));
            }
            if (ds->Tables[L"TEACHERS2DISCIPLINES"] != nullptr) {
                __super::Tables->Add((gcnew teacher::DataSet1::TEACHERS2DISCIPLINESDataTable(ds->Tables[L"TEACHERS2DISCIPLINES"])));
            }
            if (ds->Tables[L"MARKS"] != nullptr) {
                __super::Tables->Add((gcnew teacher::DataSet1::MARKSDataTable(ds->Tables[L"MARKS"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  DataSet1::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void DataSet1::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void DataSet1::InitVars(::System::Boolean initTable) {
        this->tableGROUPS = (cli::safe_cast<teacher::DataSet1::GROUPSDataTable^  >(__super::Tables[L"GROUPS"]));
        if (initTable == true) {
            if (this->tableGROUPS != nullptr) {
                this->tableGROUPS->InitVars();
            }
        }
        this->tableDISCIPLINES = (cli::safe_cast<teacher::DataSet1::DISCIPLINESDataTable^  >(__super::Tables[L"DISCIPLINES"]));
        if (initTable == true) {
            if (this->tableDISCIPLINES != nullptr) {
                this->tableDISCIPLINES->InitVars();
            }
        }
        this->tableTEACHERS = (cli::safe_cast<teacher::DataSet1::TEACHERSDataTable^  >(__super::Tables[L"TEACHERS"]));
        if (initTable == true) {
            if (this->tableTEACHERS != nullptr) {
                this->tableTEACHERS->InitVars();
            }
        }
        this->tableTEACHERS2DISCIPLINES = (cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESDataTable^  >(__super::Tables[L"TEACHERS2DISCIPLINES"]));
        if (initTable == true) {
            if (this->tableTEACHERS2DISCIPLINES != nullptr) {
                this->tableTEACHERS2DISCIPLINES->InitVars();
            }
        }
        this->tableMARKS = (cli::safe_cast<teacher::DataSet1::MARKSDataTable^  >(__super::Tables[L"MARKS"]));
        if (initTable == true) {
            if (this->tableMARKS != nullptr) {
                this->tableMARKS->InitVars();
            }
        }
        this->relationTEACHERS2DISCIPLINES_DISCIPLINES = this->Relations[L"TEACHERS2DISCIPLINES_DISCIPLINES"];
        this->relationTEACHERS2DISCIPLINES_TEACHERS = this->Relations[L"TEACHERS2DISCIPLINES_TEACHERS"];
        this->relationMARKS_TEACHERS = this->Relations[L"MARKS_TEACHERS"];
        this->relationDISCIPLINES_MARKS = this->Relations[L"DISCIPLINES_MARKS"];
    }
    
    inline ::System::Void DataSet1::InitClass() {
        this->DataSetName = L"DataSet1";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/DataSet1.xsd";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableGROUPS = (gcnew teacher::DataSet1::GROUPSDataTable());
        __super::Tables->Add(this->tableGROUPS);
        this->tableDISCIPLINES = (gcnew teacher::DataSet1::DISCIPLINESDataTable());
        __super::Tables->Add(this->tableDISCIPLINES);
        this->tableTEACHERS = (gcnew teacher::DataSet1::TEACHERSDataTable());
        __super::Tables->Add(this->tableTEACHERS);
        this->tableTEACHERS2DISCIPLINES = (gcnew teacher::DataSet1::TEACHERS2DISCIPLINESDataTable());
        __super::Tables->Add(this->tableTEACHERS2DISCIPLINES);
        this->tableMARKS = (gcnew teacher::DataSet1::MARKSDataTable());
        __super::Tables->Add(this->tableMARKS);
        this->relationTEACHERS2DISCIPLINES_DISCIPLINES = (gcnew ::System::Data::DataRelation(L"TEACHERS2DISCIPLINES_DISCIPLINES", 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTEACHERS2DISCIPLINES->DISCIPLINES_ID_DISCIPLINEColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDISCIPLINES->ID_DISCIPLINEColumn}, false));
        this->Relations->Add(this->relationTEACHERS2DISCIPLINES_DISCIPLINES);
        this->relationTEACHERS2DISCIPLINES_TEACHERS = (gcnew ::System::Data::DataRelation(L"TEACHERS2DISCIPLINES_TEACHERS", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTEACHERS2DISCIPLINES->TEACHERS_ID_TEACHERColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTEACHERS->ID_TEACHERColumn}, false));
        this->Relations->Add(this->relationTEACHERS2DISCIPLINES_TEACHERS);
        this->relationMARKS_TEACHERS = (gcnew ::System::Data::DataRelation(L"MARKS_TEACHERS", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableMARKS->ID_TEACHERColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTEACHERS->ID_TEACHERColumn}, false));
        this->Relations->Add(this->relationMARKS_TEACHERS);
        this->relationDISCIPLINES_MARKS = (gcnew ::System::Data::DataRelation(L"DISCIPLINES_MARKS", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableMARKS->ID_DISCIPLINEColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDISCIPLINES->ID_DISCIPLINEColumn}, false));
        this->Relations->Add(this->relationDISCIPLINES_MARKS);
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeGROUPS() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeDISCIPLINES() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeTEACHERS() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeTEACHERS2DISCIPLINES() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeMARKS() {
        return false;
    }
    
    inline ::System::Void DataSet1::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        teacher::DataSet1^  ds = (gcnew teacher::DataSet1());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::GROUPSDataTable::GROUPSDataTable() {
        this->TableName = L"GROUPS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::GROUPSDataTable::GROUPSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::GROUPSDataTable::GROUPSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::ID_GROUPColumn::get() {
        return this->columnID_GROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::NAME_GROUPColumn::get() {
        return this->columnNAME_GROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::COURSEColumn::get() {
        return this->columnCOURSE;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::ID_PROFESSIONColumn::get() {
        return this->columnID_PROFESSION;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::SUBGROUPColumn::get() {
        return this->columnSUBGROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::GROUPNAMEColumn::get() {
        return this->columnGROUPNAME;
    }
    
    inline ::System::Int32 DataSet1::GROUPSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline teacher::DataSet1::GROUPSRow^  DataSet1::GROUPSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<teacher::DataSet1::GROUPSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::AddGROUPSRow(teacher::DataSet1::GROUPSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline teacher::DataSet1::GROUPSRow^  DataSet1::GROUPSDataTable::AddGROUPSRow(
                System::Decimal ID_GROUP, 
                System::String^  NAME_GROUP, 
                System::Decimal COURSE, 
                System::Decimal ID_PROFESSION, 
                System::Decimal SUBGROUP, 
                System::String^  GROUPNAME) {
        teacher::DataSet1::GROUPSRow^  rowGROUPSRow = (cli::safe_cast<teacher::DataSet1::GROUPSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {ID_GROUP, NAME_GROUP, 
            COURSE, ID_PROFESSION, SUBGROUP, GROUPNAME};
        rowGROUPSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowGROUPSRow);
        return rowGROUPSRow;
    }
    
    inline teacher::DataSet1::GROUPSRow^  DataSet1::GROUPSDataTable::FindByID_GROUP(System::Decimal ID_GROUP) {
        return (cli::safe_cast<teacher::DataSet1::GROUPSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_GROUP})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::GROUPSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::GROUPSDataTable::Clone() {
        teacher::DataSet1::GROUPSDataTable^  cln = (cli::safe_cast<teacher::DataSet1::GROUPSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::GROUPSDataTable::CreateInstance() {
        return (gcnew teacher::DataSet1::GROUPSDataTable());
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::InitVars() {
        this->columnID_GROUP = __super::Columns[L"ID_GROUP"];
        this->columnNAME_GROUP = __super::Columns[L"NAME_GROUP"];
        this->columnCOURSE = __super::Columns[L"COURSE"];
        this->columnID_PROFESSION = __super::Columns[L"ID_PROFESSION"];
        this->columnSUBGROUP = __super::Columns[L"SUBGROUP"];
        this->columnGROUPNAME = __super::Columns[L"GROUPNAME"];
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::InitClass() {
        this->columnID_GROUP = (gcnew ::System::Data::DataColumn(L"ID_GROUP", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_GROUP);
        this->columnNAME_GROUP = (gcnew ::System::Data::DataColumn(L"NAME_GROUP", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnNAME_GROUP);
        this->columnCOURSE = (gcnew ::System::Data::DataColumn(L"COURSE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnCOURSE);
        this->columnID_PROFESSION = (gcnew ::System::Data::DataColumn(L"ID_PROFESSION", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_PROFESSION);
        this->columnSUBGROUP = (gcnew ::System::Data::DataColumn(L"SUBGROUP", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnSUBGROUP);
        this->columnGROUPNAME = (gcnew ::System::Data::DataColumn(L"GROUPNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnGROUPNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_GROUP}, 
                true)));
        this->columnID_GROUP->AllowDBNull = false;
        this->columnID_GROUP->Unique = true;
        this->columnNAME_GROUP->MaxLength = 150;
        this->columnGROUPNAME->MaxLength = 4000;
    }
    
    inline teacher::DataSet1::GROUPSRow^  DataSet1::GROUPSDataTable::NewGROUPSRow() {
        return (cli::safe_cast<teacher::DataSet1::GROUPSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::GROUPSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew teacher::DataSet1::GROUPSRow(builder));
    }
    
    inline ::System::Type^  DataSet1::GROUPSDataTable::GetRowType() {
        return teacher::DataSet1::GROUPSRow::typeid;
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->GROUPSRowChanged(this, (gcnew teacher::DataSet1::GROUPSRowChangeEvent((cli::safe_cast<teacher::DataSet1::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->GROUPSRowChanging(this, (gcnew teacher::DataSet1::GROUPSRowChangeEvent((cli::safe_cast<teacher::DataSet1::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->GROUPSRowDeleted(this, (gcnew teacher::DataSet1::GROUPSRowChangeEvent((cli::safe_cast<teacher::DataSet1::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->GROUPSRowDeleting(this, (gcnew teacher::DataSet1::GROUPSRowChangeEvent((cli::safe_cast<teacher::DataSet1::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::RemoveGROUPSRow(teacher::DataSet1::GROUPSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::GROUPSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        teacher::DataSet1^  ds = (gcnew teacher::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"GROUPSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::DISCIPLINESDataTable::DISCIPLINESDataTable() {
        this->TableName = L"DISCIPLINES";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::DISCIPLINESDataTable::DISCIPLINESDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::DISCIPLINESDataTable::DISCIPLINESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::ID_DISCIPLINEColumn::get() {
        return this->columnID_DISCIPLINE;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::NAME_DISCIPLINEColumn::get() {
        return this->columnNAME_DISCIPLINE;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::NUMBER_HOURSColumn::get() {
        return this->columnNUMBER_HOURS;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::ID_GROUPColumn::get() {
        return this->columnID_GROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::ID_TYPEColumn::get() {
        return this->columnID_TYPE;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::ID_DISCNAMEColumn::get() {
        return this->columnID_DISCNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::DISCNAMEColumn::get() {
        return this->columnDISCNAME;
    }
    
    inline ::System::Int32 DataSet1::DISCIPLINESDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline teacher::DataSet1::DISCIPLINESRow^  DataSet1::DISCIPLINESDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<teacher::DataSet1::DISCIPLINESRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::AddDISCIPLINESRow(teacher::DataSet1::DISCIPLINESRow^  row) {
        this->Rows->Add(row);
    }
    
    inline teacher::DataSet1::DISCIPLINESRow^  DataSet1::DISCIPLINESDataTable::AddDISCIPLINESRow(
                teacher::DataSet1::TEACHERS2DISCIPLINESRow^  parentTEACHERS2DISCIPLINESRowByTEACHERS2DISCIPLINES_DISCIPLINES, 
                System::String^  NAME_DISCIPLINE, 
                System::Decimal NUMBER_HOURS, 
                System::Decimal ID_GROUP, 
                System::Decimal ID_TYPE, 
                System::Decimal ID_DISCNAME, 
                System::String^  DISCNAME) {
        teacher::DataSet1::DISCIPLINESRow^  rowDISCIPLINESRow = (cli::safe_cast<teacher::DataSet1::DISCIPLINESRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {nullptr, NAME_DISCIPLINE, 
            NUMBER_HOURS, ID_GROUP, ID_TYPE, ID_DISCNAME, DISCNAME};
        if (parentTEACHERS2DISCIPLINESRowByTEACHERS2DISCIPLINES_DISCIPLINES != nullptr) {
            columnValuesArray[0] = parentTEACHERS2DISCIPLINESRowByTEACHERS2DISCIPLINES_DISCIPLINES[1];
        }
        rowDISCIPLINESRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowDISCIPLINESRow);
        return rowDISCIPLINESRow;
    }
    
    inline teacher::DataSet1::DISCIPLINESRow^  DataSet1::DISCIPLINESDataTable::FindByID_DISCIPLINE(System::Decimal ID_DISCIPLINE) {
        return (cli::safe_cast<teacher::DataSet1::DISCIPLINESRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_DISCIPLINE})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::DISCIPLINESDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::DISCIPLINESDataTable::Clone() {
        teacher::DataSet1::DISCIPLINESDataTable^  cln = (cli::safe_cast<teacher::DataSet1::DISCIPLINESDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::DISCIPLINESDataTable::CreateInstance() {
        return (gcnew teacher::DataSet1::DISCIPLINESDataTable());
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::InitVars() {
        this->columnID_DISCIPLINE = __super::Columns[L"ID_DISCIPLINE"];
        this->columnNAME_DISCIPLINE = __super::Columns[L"NAME_DISCIPLINE"];
        this->columnNUMBER_HOURS = __super::Columns[L"NUMBER_HOURS"];
        this->columnID_GROUP = __super::Columns[L"ID_GROUP"];
        this->columnID_TYPE = __super::Columns[L"ID_TYPE"];
        this->columnID_DISCNAME = __super::Columns[L"ID_DISCNAME"];
        this->columnDISCNAME = __super::Columns[L"DISCNAME"];
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::InitClass() {
        this->columnID_DISCIPLINE = (gcnew ::System::Data::DataColumn(L"ID_DISCIPLINE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_DISCIPLINE);
        this->columnNAME_DISCIPLINE = (gcnew ::System::Data::DataColumn(L"NAME_DISCIPLINE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnNAME_DISCIPLINE);
        this->columnNUMBER_HOURS = (gcnew ::System::Data::DataColumn(L"NUMBER_HOURS", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnNUMBER_HOURS);
        this->columnID_GROUP = (gcnew ::System::Data::DataColumn(L"ID_GROUP", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_GROUP);
        this->columnID_TYPE = (gcnew ::System::Data::DataColumn(L"ID_TYPE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_TYPE);
        this->columnID_DISCNAME = (gcnew ::System::Data::DataColumn(L"ID_DISCNAME", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_DISCNAME);
        this->columnDISCNAME = (gcnew ::System::Data::DataColumn(L"DISCNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDISCNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_DISCIPLINE}, 
                true)));
        this->columnID_DISCIPLINE->AllowDBNull = false;
        this->columnID_DISCIPLINE->Unique = true;
        this->columnNAME_DISCIPLINE->MaxLength = 150;
        this->columnDISCNAME->MaxLength = 4000;
    }
    
    inline teacher::DataSet1::DISCIPLINESRow^  DataSet1::DISCIPLINESDataTable::NewDISCIPLINESRow() {
        return (cli::safe_cast<teacher::DataSet1::DISCIPLINESRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::DISCIPLINESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew teacher::DataSet1::DISCIPLINESRow(builder));
    }
    
    inline ::System::Type^  DataSet1::DISCIPLINESDataTable::GetRowType() {
        return teacher::DataSet1::DISCIPLINESRow::typeid;
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->DISCIPLINESRowChanged(this, (gcnew teacher::DataSet1::DISCIPLINESRowChangeEvent((cli::safe_cast<teacher::DataSet1::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->DISCIPLINESRowChanging(this, (gcnew teacher::DataSet1::DISCIPLINESRowChangeEvent((cli::safe_cast<teacher::DataSet1::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->DISCIPLINESRowDeleted(this, (gcnew teacher::DataSet1::DISCIPLINESRowChangeEvent((cli::safe_cast<teacher::DataSet1::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->DISCIPLINESRowDeleting(this, (gcnew teacher::DataSet1::DISCIPLINESRowChangeEvent((cli::safe_cast<teacher::DataSet1::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::RemoveDISCIPLINESRow(teacher::DataSet1::DISCIPLINESRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::DISCIPLINESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        teacher::DataSet1^  ds = (gcnew teacher::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"DISCIPLINESDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::TEACHERSDataTable::TEACHERSDataTable() {
        this->TableName = L"TEACHERS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::TEACHERSDataTable::TEACHERSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::TEACHERSDataTable::TEACHERSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERSDataTable::ID_TEACHERColumn::get() {
        return this->columnID_TEACHER;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERSDataTable::FULLNAMEColumn::get() {
        return this->columnFULLNAME;
    }
    
    inline ::System::Int32 DataSet1::TEACHERSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline teacher::DataSet1::TEACHERSRow^  DataSet1::TEACHERSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<teacher::DataSet1::TEACHERSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::AddTEACHERSRow(teacher::DataSet1::TEACHERSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline teacher::DataSet1::TEACHERSRow^  DataSet1::TEACHERSDataTable::AddTEACHERSRow(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  parentTEACHERS2DISCIPLINESRowByTEACHERS2DISCIPLINES_TEACHERS, 
                System::String^  FULLNAME) {
        teacher::DataSet1::TEACHERSRow^  rowTEACHERSRow = (cli::safe_cast<teacher::DataSet1::TEACHERSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, FULLNAME};
        if (parentTEACHERS2DISCIPLINESRowByTEACHERS2DISCIPLINES_TEACHERS != nullptr) {
            columnValuesArray[0] = parentTEACHERS2DISCIPLINESRowByTEACHERS2DISCIPLINES_TEACHERS[0];
        }
        rowTEACHERSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTEACHERSRow);
        return rowTEACHERSRow;
    }
    
    inline teacher::DataSet1::TEACHERSRow^  DataSet1::TEACHERSDataTable::FindByID_TEACHER(System::Decimal ID_TEACHER) {
        return (cli::safe_cast<teacher::DataSet1::TEACHERSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_TEACHER})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::TEACHERSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::TEACHERSDataTable::Clone() {
        teacher::DataSet1::TEACHERSDataTable^  cln = (cli::safe_cast<teacher::DataSet1::TEACHERSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::TEACHERSDataTable::CreateInstance() {
        return (gcnew teacher::DataSet1::TEACHERSDataTable());
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::InitVars() {
        this->columnID_TEACHER = __super::Columns[L"ID_TEACHER"];
        this->columnFULLNAME = __super::Columns[L"FULLNAME"];
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::InitClass() {
        this->columnID_TEACHER = (gcnew ::System::Data::DataColumn(L"ID_TEACHER", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_TEACHER);
        this->columnFULLNAME = (gcnew ::System::Data::DataColumn(L"FULLNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFULLNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_TEACHER}, 
                true)));
        this->columnID_TEACHER->AllowDBNull = false;
        this->columnID_TEACHER->Unique = true;
        this->columnFULLNAME->MaxLength = 4000;
    }
    
    inline teacher::DataSet1::TEACHERSRow^  DataSet1::TEACHERSDataTable::NewTEACHERSRow() {
        return (cli::safe_cast<teacher::DataSet1::TEACHERSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::TEACHERSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew teacher::DataSet1::TEACHERSRow(builder));
    }
    
    inline ::System::Type^  DataSet1::TEACHERSDataTable::GetRowType() {
        return teacher::DataSet1::TEACHERSRow::typeid;
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TEACHERSRowChanged(this, (gcnew teacher::DataSet1::TEACHERSRowChangeEvent((cli::safe_cast<teacher::DataSet1::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TEACHERSRowChanging(this, (gcnew teacher::DataSet1::TEACHERSRowChangeEvent((cli::safe_cast<teacher::DataSet1::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TEACHERSRowDeleted(this, (gcnew teacher::DataSet1::TEACHERSRowChangeEvent((cli::safe_cast<teacher::DataSet1::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TEACHERSRowDeleting(this, (gcnew teacher::DataSet1::TEACHERSRowChangeEvent((cli::safe_cast<teacher::DataSet1::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::RemoveTEACHERSRow(teacher::DataSet1::TEACHERSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::TEACHERSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        teacher::DataSet1^  ds = (gcnew teacher::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TEACHERSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::TEACHERS2DISCIPLINESDataTable::TEACHERS2DISCIPLINESDataTable() {
        this->TableName = L"TEACHERS2DISCIPLINES";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::TEACHERS2DISCIPLINESDataTable::TEACHERS2DISCIPLINESDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::TEACHERS2DISCIPLINESDataTable::TEACHERS2DISCIPLINESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERS2DISCIPLINESDataTable::TEACHERS_ID_TEACHERColumn::get() {
        return this->columnTEACHERS_ID_TEACHER;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERS2DISCIPLINESDataTable::DISCIPLINES_ID_DISCIPLINEColumn::get() {
        return this->columnDISCIPLINES_ID_DISCIPLINE;
    }
    
    inline ::System::Int32 DataSet1::TEACHERS2DISCIPLINESDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline teacher::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERS2DISCIPLINESDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::AddTEACHERS2DISCIPLINESRow(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  row) {
        this->Rows->Add(row);
    }
    
    inline teacher::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERS2DISCIPLINESDataTable::AddTEACHERS2DISCIPLINESRow(
                System::Decimal TEACHERS_ID_TEACHER, System::Decimal DISCIPLINES_ID_DISCIPLINE) {
        teacher::DataSet1::TEACHERS2DISCIPLINESRow^  rowTEACHERS2DISCIPLINESRow = (cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {TEACHERS_ID_TEACHER, 
            DISCIPLINES_ID_DISCIPLINE};
        rowTEACHERS2DISCIPLINESRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTEACHERS2DISCIPLINESRow);
        return rowTEACHERS2DISCIPLINESRow;
    }
    
    inline teacher::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERS2DISCIPLINESDataTable::FindByTEACHERS_ID_TEACHERDISCIPLINES_ID_DISCIPLINE(
                System::Decimal TEACHERS_ID_TEACHER, System::Decimal DISCIPLINES_ID_DISCIPLINE) {
        return (cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(2) {TEACHERS_ID_TEACHER, 
                DISCIPLINES_ID_DISCIPLINE})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::TEACHERS2DISCIPLINESDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::TEACHERS2DISCIPLINESDataTable::Clone() {
        teacher::DataSet1::TEACHERS2DISCIPLINESDataTable^  cln = (cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::TEACHERS2DISCIPLINESDataTable::CreateInstance() {
        return (gcnew teacher::DataSet1::TEACHERS2DISCIPLINESDataTable());
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::InitVars() {
        this->columnTEACHERS_ID_TEACHER = __super::Columns[L"TEACHERS_ID_TEACHER"];
        this->columnDISCIPLINES_ID_DISCIPLINE = __super::Columns[L"DISCIPLINES_ID_DISCIPLINE"];
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::InitClass() {
        this->columnTEACHERS_ID_TEACHER = (gcnew ::System::Data::DataColumn(L"TEACHERS_ID_TEACHER", ::System::Decimal::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnTEACHERS_ID_TEACHER);
        this->columnDISCIPLINES_ID_DISCIPLINE = (gcnew ::System::Data::DataColumn(L"DISCIPLINES_ID_DISCIPLINE", ::System::Decimal::typeid, 
            nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDISCIPLINES_ID_DISCIPLINE);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(2) {this->columnTEACHERS_ID_TEACHER, 
                    this->columnDISCIPLINES_ID_DISCIPLINE}, true)));
        this->columnTEACHERS_ID_TEACHER->AllowDBNull = false;
        this->columnDISCIPLINES_ID_DISCIPLINE->AllowDBNull = false;
    }
    
    inline teacher::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERS2DISCIPLINESDataTable::NewTEACHERS2DISCIPLINESRow() {
        return (cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::TEACHERS2DISCIPLINESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew teacher::DataSet1::TEACHERS2DISCIPLINESRow(builder));
    }
    
    inline ::System::Type^  DataSet1::TEACHERS2DISCIPLINESDataTable::GetRowType() {
        return teacher::DataSet1::TEACHERS2DISCIPLINESRow::typeid;
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TEACHERS2DISCIPLINESRowChanged(this, (gcnew teacher::DataSet1::TEACHERS2DISCIPLINESRowChangeEvent((cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TEACHERS2DISCIPLINESRowChanging(this, (gcnew teacher::DataSet1::TEACHERS2DISCIPLINESRowChangeEvent((cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TEACHERS2DISCIPLINESRowDeleted(this, (gcnew teacher::DataSet1::TEACHERS2DISCIPLINESRowChangeEvent((cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TEACHERS2DISCIPLINESRowDeleting(this, (gcnew teacher::DataSet1::TEACHERS2DISCIPLINESRowChangeEvent((cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::RemoveTEACHERS2DISCIPLINESRow(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::TEACHERS2DISCIPLINESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        teacher::DataSet1^  ds = (gcnew teacher::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TEACHERS2DISCIPLINESDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::MARKSDataTable::MARKSDataTable() {
        this->TableName = L"MARKS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::MARKSDataTable::MARKSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::MARKSDataTable::MARKSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::ID_MARKColumn::get() {
        return this->columnID_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::VALUE_MARKColumn::get() {
        return this->columnVALUE_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::FULLNAMEColumn::get() {
        return this->columnFULLNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::DATE_MARKColumn::get() {
        return this->columnDATE_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::ID_STUDENTColumn::get() {
        return this->columnID_STUDENT;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::ID_TEACHERColumn::get() {
        return this->columnID_TEACHER;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::ID_DISCIPLINEColumn::get() {
        return this->columnID_DISCIPLINE;
    }
    
    inline ::System::Int32 DataSet1::MARKSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline teacher::DataSet1::MARKSRow^  DataSet1::MARKSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<teacher::DataSet1::MARKSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::AddMARKSRow(teacher::DataSet1::MARKSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline teacher::DataSet1::MARKSRow^  DataSet1::MARKSDataTable::AddMARKSRow(
                System::Decimal ID_MARK, 
                System::Decimal VALUE_MARK, 
                System::String^  FULLNAME, 
                System::DateTime DATE_MARK, 
                System::Decimal ID_STUDENT, 
                System::Decimal ID_TEACHER, 
                System::Decimal ID_DISCIPLINE) {
        teacher::DataSet1::MARKSRow^  rowMARKSRow = (cli::safe_cast<teacher::DataSet1::MARKSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {ID_MARK, VALUE_MARK, 
            FULLNAME, DATE_MARK, ID_STUDENT, ID_TEACHER, ID_DISCIPLINE};
        rowMARKSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowMARKSRow);
        return rowMARKSRow;
    }
    
    inline teacher::DataSet1::MARKSRow^  DataSet1::MARKSDataTable::FindByID_MARK(System::Decimal ID_MARK) {
        return (cli::safe_cast<teacher::DataSet1::MARKSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_MARK})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::MARKSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::MARKSDataTable::Clone() {
        teacher::DataSet1::MARKSDataTable^  cln = (cli::safe_cast<teacher::DataSet1::MARKSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::MARKSDataTable::CreateInstance() {
        return (gcnew teacher::DataSet1::MARKSDataTable());
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::InitVars() {
        this->columnID_MARK = __super::Columns[L"ID_MARK"];
        this->columnVALUE_MARK = __super::Columns[L"VALUE_MARK"];
        this->columnFULLNAME = __super::Columns[L"FULLNAME"];
        this->columnDATE_MARK = __super::Columns[L"DATE_MARK"];
        this->columnID_STUDENT = __super::Columns[L"ID_STUDENT"];
        this->columnID_TEACHER = __super::Columns[L"ID_TEACHER"];
        this->columnID_DISCIPLINE = __super::Columns[L"ID_DISCIPLINE"];
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::InitClass() {
        this->columnID_MARK = (gcnew ::System::Data::DataColumn(L"ID_MARK", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_MARK);
        this->columnVALUE_MARK = (gcnew ::System::Data::DataColumn(L"VALUE_MARK", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVALUE_MARK);
        this->columnFULLNAME = (gcnew ::System::Data::DataColumn(L"FULLNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFULLNAME);
        this->columnDATE_MARK = (gcnew ::System::Data::DataColumn(L"DATE_MARK", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDATE_MARK);
        this->columnID_STUDENT = (gcnew ::System::Data::DataColumn(L"ID_STUDENT", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_STUDENT);
        this->columnID_TEACHER = (gcnew ::System::Data::DataColumn(L"ID_TEACHER", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_TEACHER);
        this->columnID_DISCIPLINE = (gcnew ::System::Data::DataColumn(L"ID_DISCIPLINE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_DISCIPLINE);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_MARK}, 
                true)));
        this->columnID_MARK->AllowDBNull = false;
        this->columnID_MARK->Unique = true;
        this->columnFULLNAME->MaxLength = 4000;
    }
    
    inline teacher::DataSet1::MARKSRow^  DataSet1::MARKSDataTable::NewMARKSRow() {
        return (cli::safe_cast<teacher::DataSet1::MARKSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::MARKSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew teacher::DataSet1::MARKSRow(builder));
    }
    
    inline ::System::Type^  DataSet1::MARKSDataTable::GetRowType() {
        return teacher::DataSet1::MARKSRow::typeid;
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->MARKSRowChanged(this, (gcnew teacher::DataSet1::MARKSRowChangeEvent((cli::safe_cast<teacher::DataSet1::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->MARKSRowChanging(this, (gcnew teacher::DataSet1::MARKSRowChangeEvent((cli::safe_cast<teacher::DataSet1::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->MARKSRowDeleted(this, (gcnew teacher::DataSet1::MARKSRowChangeEvent((cli::safe_cast<teacher::DataSet1::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->MARKSRowDeleting(this, (gcnew teacher::DataSet1::MARKSRowChangeEvent((cli::safe_cast<teacher::DataSet1::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::RemoveMARKSRow(teacher::DataSet1::MARKSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::MARKSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        teacher::DataSet1^  ds = (gcnew teacher::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"MARKSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::GROUPSRow::GROUPSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableGROUPS = (cli::safe_cast<teacher::DataSet1::GROUPSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::GROUPSRow::ID_GROUP::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableGROUPS->ID_GROUPColumn]));
    }
    inline System::Void DataSet1::GROUPSRow::ID_GROUP::set(System::Decimal value) {
        this[this->tableGROUPS->ID_GROUPColumn] = value;
    }
    
    inline System::String^  DataSet1::GROUPSRow::NAME_GROUP::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGROUPS->NAME_GROUPColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'NAME_GROUP\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::GROUPSRow::NAME_GROUP::set(System::String^  value) {
        this[this->tableGROUPS->NAME_GROUPColumn] = value;
    }
    
    inline System::Decimal DataSet1::GROUPSRow::COURSE::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableGROUPS->COURSEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'COURSE\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::GROUPSRow::COURSE::set(System::Decimal value) {
        this[this->tableGROUPS->COURSEColumn] = value;
    }
    
    inline System::Decimal DataSet1::GROUPSRow::ID_PROFESSION::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableGROUPS->ID_PROFESSIONColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_PROFESSION\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::GROUPSRow::ID_PROFESSION::set(System::Decimal value) {
        this[this->tableGROUPS->ID_PROFESSIONColumn] = value;
    }
    
    inline System::Decimal DataSet1::GROUPSRow::SUBGROUP::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableGROUPS->SUBGROUPColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'SUBGROUP\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::GROUPSRow::SUBGROUP::set(System::Decimal value) {
        this[this->tableGROUPS->SUBGROUPColumn] = value;
    }
    
    inline System::String^  DataSet1::GROUPSRow::GROUPNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGROUPS->GROUPNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'GROUPNAME\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::GROUPSRow::GROUPNAME::set(System::String^  value) {
        this[this->tableGROUPS->GROUPNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::GROUPSRow::IsNAME_GROUPNull() {
        return this->IsNull(this->tableGROUPS->NAME_GROUPColumn);
    }
    
    inline ::System::Void DataSet1::GROUPSRow::SetNAME_GROUPNull() {
        this[this->tableGROUPS->NAME_GROUPColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::GROUPSRow::IsCOURSENull() {
        return this->IsNull(this->tableGROUPS->COURSEColumn);
    }
    
    inline ::System::Void DataSet1::GROUPSRow::SetCOURSENull() {
        this[this->tableGROUPS->COURSEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::GROUPSRow::IsID_PROFESSIONNull() {
        return this->IsNull(this->tableGROUPS->ID_PROFESSIONColumn);
    }
    
    inline ::System::Void DataSet1::GROUPSRow::SetID_PROFESSIONNull() {
        this[this->tableGROUPS->ID_PROFESSIONColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::GROUPSRow::IsSUBGROUPNull() {
        return this->IsNull(this->tableGROUPS->SUBGROUPColumn);
    }
    
    inline ::System::Void DataSet1::GROUPSRow::SetSUBGROUPNull() {
        this[this->tableGROUPS->SUBGROUPColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::GROUPSRow::IsGROUPNAMENull() {
        return this->IsNull(this->tableGROUPS->GROUPNAMEColumn);
    }
    
    inline ::System::Void DataSet1::GROUPSRow::SetGROUPNAMENull() {
        this[this->tableGROUPS->GROUPNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::DISCIPLINESRow::DISCIPLINESRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableDISCIPLINES = (cli::safe_cast<teacher::DataSet1::DISCIPLINESDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::DISCIPLINESRow::ID_DISCIPLINE::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->ID_DISCIPLINEColumn]));
    }
    inline System::Void DataSet1::DISCIPLINESRow::ID_DISCIPLINE::set(System::Decimal value) {
        this[this->tableDISCIPLINES->ID_DISCIPLINEColumn] = value;
    }
    
    inline System::String^  DataSet1::DISCIPLINESRow::NAME_DISCIPLINE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDISCIPLINES->NAME_DISCIPLINEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'NAME_DISCIPLINE\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::NAME_DISCIPLINE::set(System::String^  value) {
        this[this->tableDISCIPLINES->NAME_DISCIPLINEColumn] = value;
    }
    
    inline System::Decimal DataSet1::DISCIPLINESRow::NUMBER_HOURS::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->NUMBER_HOURSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'NUMBER_HOURS\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::NUMBER_HOURS::set(System::Decimal value) {
        this[this->tableDISCIPLINES->NUMBER_HOURSColumn] = value;
    }
    
    inline System::Decimal DataSet1::DISCIPLINESRow::ID_GROUP::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->ID_GROUPColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_GROUP\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::ID_GROUP::set(System::Decimal value) {
        this[this->tableDISCIPLINES->ID_GROUPColumn] = value;
    }
    
    inline System::Decimal DataSet1::DISCIPLINESRow::ID_TYPE::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->ID_TYPEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_TYPE\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::ID_TYPE::set(System::Decimal value) {
        this[this->tableDISCIPLINES->ID_TYPEColumn] = value;
    }
    
    inline System::Decimal DataSet1::DISCIPLINESRow::ID_DISCNAME::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->ID_DISCNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_DISCNAME\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::ID_DISCNAME::set(System::Decimal value) {
        this[this->tableDISCIPLINES->ID_DISCNAMEColumn] = value;
    }
    
    inline System::String^  DataSet1::DISCIPLINESRow::DISCNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDISCIPLINES->DISCNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DISCNAME\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::DISCNAME::set(System::String^  value) {
        this[this->tableDISCIPLINES->DISCNAMEColumn] = value;
    }
    
    inline teacher::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::DISCIPLINESRow::TEACHERS2DISCIPLINESRow::get() {
        return (cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TEACHERS2DISCIPLINES_DISCIPLINES"])));
    }
    inline System::Void DataSet1::DISCIPLINESRow::TEACHERS2DISCIPLINESRow::set(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TEACHERS2DISCIPLINES_DISCIPLINES"]);
    }
    
    inline teacher::DataSet1::MARKSRow^  DataSet1::DISCIPLINESRow::MARKSRow::get() {
        return (cli::safe_cast<teacher::DataSet1::MARKSRow^  >(this->GetParentRow(this->Table->ParentRelations[L"DISCIPLINES_MARKS"])));
    }
    inline System::Void DataSet1::DISCIPLINESRow::MARKSRow::set(teacher::DataSet1::MARKSRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"DISCIPLINES_MARKS"]);
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsNAME_DISCIPLINENull() {
        return this->IsNull(this->tableDISCIPLINES->NAME_DISCIPLINEColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetNAME_DISCIPLINENull() {
        this[this->tableDISCIPLINES->NAME_DISCIPLINEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsNUMBER_HOURSNull() {
        return this->IsNull(this->tableDISCIPLINES->NUMBER_HOURSColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetNUMBER_HOURSNull() {
        this[this->tableDISCIPLINES->NUMBER_HOURSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsID_GROUPNull() {
        return this->IsNull(this->tableDISCIPLINES->ID_GROUPColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetID_GROUPNull() {
        this[this->tableDISCIPLINES->ID_GROUPColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsID_TYPENull() {
        return this->IsNull(this->tableDISCIPLINES->ID_TYPEColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetID_TYPENull() {
        this[this->tableDISCIPLINES->ID_TYPEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsID_DISCNAMENull() {
        return this->IsNull(this->tableDISCIPLINES->ID_DISCNAMEColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetID_DISCNAMENull() {
        this[this->tableDISCIPLINES->ID_DISCNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsDISCNAMENull() {
        return this->IsNull(this->tableDISCIPLINES->DISCNAMEColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetDISCNAMENull() {
        this[this->tableDISCIPLINES->DISCNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::TEACHERSRow::TEACHERSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTEACHERS = (cli::safe_cast<teacher::DataSet1::TEACHERSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::TEACHERSRow::ID_TEACHER::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableTEACHERS->ID_TEACHERColumn]));
    }
    inline System::Void DataSet1::TEACHERSRow::ID_TEACHER::set(System::Decimal value) {
        this[this->tableTEACHERS->ID_TEACHERColumn] = value;
    }
    
    inline System::String^  DataSet1::TEACHERSRow::FULLNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTEACHERS->FULLNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FULLNAME\' в таблице \'TEACHERS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::TEACHERSRow::FULLNAME::set(System::String^  value) {
        this[this->tableTEACHERS->FULLNAMEColumn] = value;
    }
    
    inline teacher::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERSRow::TEACHERS2DISCIPLINESRow::get() {
        return (cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TEACHERS2DISCIPLINES_TEACHERS"])));
    }
    inline System::Void DataSet1::TEACHERSRow::TEACHERS2DISCIPLINESRow::set(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TEACHERS2DISCIPLINES_TEACHERS"]);
    }
    
    inline teacher::DataSet1::MARKSRow^  DataSet1::TEACHERSRow::MARKSRow::get() {
        return (cli::safe_cast<teacher::DataSet1::MARKSRow^  >(this->GetParentRow(this->Table->ParentRelations[L"MARKS_TEACHERS"])));
    }
    inline System::Void DataSet1::TEACHERSRow::MARKSRow::set(teacher::DataSet1::MARKSRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"MARKS_TEACHERS"]);
    }
    
    inline ::System::Boolean DataSet1::TEACHERSRow::IsFULLNAMENull() {
        return this->IsNull(this->tableTEACHERS->FULLNAMEColumn);
    }
    
    inline ::System::Void DataSet1::TEACHERSRow::SetFULLNAMENull() {
        this[this->tableTEACHERS->FULLNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::TEACHERS2DISCIPLINESRow::TEACHERS2DISCIPLINESRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTEACHERS2DISCIPLINES = (cli::safe_cast<teacher::DataSet1::TEACHERS2DISCIPLINESDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::TEACHERS2DISCIPLINESRow::TEACHERS_ID_TEACHER::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableTEACHERS2DISCIPLINES->TEACHERS_ID_TEACHERColumn]));
    }
    inline System::Void DataSet1::TEACHERS2DISCIPLINESRow::TEACHERS_ID_TEACHER::set(System::Decimal value) {
        this[this->tableTEACHERS2DISCIPLINES->TEACHERS_ID_TEACHERColumn] = value;
    }
    
    inline System::Decimal DataSet1::TEACHERS2DISCIPLINESRow::DISCIPLINES_ID_DISCIPLINE::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableTEACHERS2DISCIPLINES->DISCIPLINES_ID_DISCIPLINEColumn]));
    }
    inline System::Void DataSet1::TEACHERS2DISCIPLINESRow::DISCIPLINES_ID_DISCIPLINE::set(System::Decimal value) {
        this[this->tableTEACHERS2DISCIPLINES->DISCIPLINES_ID_DISCIPLINEColumn] = value;
    }
    
    inline cli::array< teacher::DataSet1::DISCIPLINESRow^  >^  DataSet1::TEACHERS2DISCIPLINESRow::GetDISCIPLINESRows() {
        if (this->Table->ChildRelations[L"TEACHERS2DISCIPLINES_DISCIPLINES"] == nullptr) {
            return gcnew cli::array< teacher::DataSet1::DISCIPLINESRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< teacher::DataSet1::DISCIPLINESRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TEACHERS2DISCIPLINES_DISCIPLINES"])));
        }
    }
    
    inline cli::array< teacher::DataSet1::TEACHERSRow^  >^  DataSet1::TEACHERS2DISCIPLINESRow::GetTEACHERSRows() {
        if (this->Table->ChildRelations[L"TEACHERS2DISCIPLINES_TEACHERS"] == nullptr) {
            return gcnew cli::array< teacher::DataSet1::TEACHERSRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< teacher::DataSet1::TEACHERSRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TEACHERS2DISCIPLINES_TEACHERS"])));
        }
    }
    
    
    inline DataSet1::MARKSRow::MARKSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableMARKS = (cli::safe_cast<teacher::DataSet1::MARKSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::MARKSRow::ID_MARK::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->ID_MARKColumn]));
    }
    inline System::Void DataSet1::MARKSRow::ID_MARK::set(System::Decimal value) {
        this[this->tableMARKS->ID_MARKColumn] = value;
    }
    
    inline System::Decimal DataSet1::MARKSRow::VALUE_MARK::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->VALUE_MARKColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'VALUE_MARK\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::VALUE_MARK::set(System::Decimal value) {
        this[this->tableMARKS->VALUE_MARKColumn] = value;
    }
    
    inline System::String^  DataSet1::MARKSRow::FULLNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMARKS->FULLNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FULLNAME\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::FULLNAME::set(System::String^  value) {
        this[this->tableMARKS->FULLNAMEColumn] = value;
    }
    
    inline System::DateTime DataSet1::MARKSRow::DATE_MARK::get() {
        try {
            return (cli::safe_cast<::System::DateTime >(this[this->tableMARKS->DATE_MARKColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DATE_MARK\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::DATE_MARK::set(System::DateTime value) {
        this[this->tableMARKS->DATE_MARKColumn] = value;
    }
    
    inline System::Decimal DataSet1::MARKSRow::ID_STUDENT::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->ID_STUDENTColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_STUDENT\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::ID_STUDENT::set(System::Decimal value) {
        this[this->tableMARKS->ID_STUDENTColumn] = value;
    }
    
    inline System::Decimal DataSet1::MARKSRow::ID_TEACHER::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->ID_TEACHERColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_TEACHER\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::ID_TEACHER::set(System::Decimal value) {
        this[this->tableMARKS->ID_TEACHERColumn] = value;
    }
    
    inline System::Decimal DataSet1::MARKSRow::ID_DISCIPLINE::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->ID_DISCIPLINEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_DISCIPLINE\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::ID_DISCIPLINE::set(System::Decimal value) {
        this[this->tableMARKS->ID_DISCIPLINEColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsVALUE_MARKNull() {
        return this->IsNull(this->tableMARKS->VALUE_MARKColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetVALUE_MARKNull() {
        this[this->tableMARKS->VALUE_MARKColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsFULLNAMENull() {
        return this->IsNull(this->tableMARKS->FULLNAMEColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetFULLNAMENull() {
        this[this->tableMARKS->FULLNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsDATE_MARKNull() {
        return this->IsNull(this->tableMARKS->DATE_MARKColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetDATE_MARKNull() {
        this[this->tableMARKS->DATE_MARKColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsID_STUDENTNull() {
        return this->IsNull(this->tableMARKS->ID_STUDENTColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetID_STUDENTNull() {
        this[this->tableMARKS->ID_STUDENTColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsID_TEACHERNull() {
        return this->IsNull(this->tableMARKS->ID_TEACHERColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetID_TEACHERNull() {
        this[this->tableMARKS->ID_TEACHERColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsID_DISCIPLINENull() {
        return this->IsNull(this->tableMARKS->ID_DISCIPLINEColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetID_DISCIPLINENull() {
        this[this->tableMARKS->ID_DISCIPLINEColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< teacher::DataSet1::TEACHERSRow^  >^  DataSet1::MARKSRow::GetTEACHERSRows() {
        if (this->Table->ChildRelations[L"MARKS_TEACHERS"] == nullptr) {
            return gcnew cli::array< teacher::DataSet1::TEACHERSRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< teacher::DataSet1::TEACHERSRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"MARKS_TEACHERS"])));
        }
    }
    
    inline cli::array< teacher::DataSet1::DISCIPLINESRow^  >^  DataSet1::MARKSRow::GetDISCIPLINESRows() {
        if (this->Table->ChildRelations[L"DISCIPLINES_MARKS"] == nullptr) {
            return gcnew cli::array< teacher::DataSet1::DISCIPLINESRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< teacher::DataSet1::DISCIPLINESRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"DISCIPLINES_MARKS"])));
        }
    }
    
    
    inline DataSet1::GROUPSRowChangeEvent::GROUPSRowChangeEvent(teacher::DataSet1::GROUPSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline teacher::DataSet1::GROUPSRow^  DataSet1::GROUPSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::GROUPSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::DISCIPLINESRowChangeEvent::DISCIPLINESRowChangeEvent(teacher::DataSet1::DISCIPLINESRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline teacher::DataSet1::DISCIPLINESRow^  DataSet1::DISCIPLINESRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::DISCIPLINESRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::TEACHERSRowChangeEvent::TEACHERSRowChangeEvent(teacher::DataSet1::TEACHERSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline teacher::DataSet1::TEACHERSRow^  DataSet1::TEACHERSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::TEACHERSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::TEACHERS2DISCIPLINESRowChangeEvent::TEACHERS2DISCIPLINESRowChangeEvent(teacher::DataSet1::TEACHERS2DISCIPLINESRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline teacher::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERS2DISCIPLINESRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::TEACHERS2DISCIPLINESRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::MARKSRowChangeEvent::MARKSRowChangeEvent(teacher::DataSet1::MARKSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline teacher::DataSet1::MARKSRow^  DataSet1::MARKSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::MARKSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
