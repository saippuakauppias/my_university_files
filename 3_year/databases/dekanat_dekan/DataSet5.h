#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
namespace dekan {
    using namespace System;
    ref class DataSet5;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"DataSet5"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class DataSet5 : public ::System::Data::DataSet {
        public : ref class GROUPSDataTable;
        public : ref class STUDENTSDataTable;
        public : ref class MARKSDataTable;
        public : ref class GROUPSRow;
        public : ref class STUDENTSRow;
        public : ref class MARKSRow;
        public : ref class GROUPSRowChangeEvent;
        public : ref class STUDENTSRowChangeEvent;
        public : ref class MARKSRowChangeEvent;
        
        private: dekan::DataSet5::GROUPSDataTable^  tableGROUPS;
        
        private: dekan::DataSet5::STUDENTSDataTable^  tableSTUDENTS;
        
        private: dekan::DataSet5::MARKSDataTable^  tableMARKS;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void GROUPSRowChangeEventHandler(::System::Object^  sender, dekan::DataSet5::GROUPSRowChangeEvent^  e);
        
        public : delegate System::Void STUDENTSRowChangeEventHandler(::System::Object^  sender, dekan::DataSet5::STUDENTSRowChangeEvent^  e);
        
        public : delegate System::Void MARKSRowChangeEventHandler(::System::Object^  sender, dekan::DataSet5::MARKSRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet5();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet5(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property dekan::DataSet5::GROUPSDataTable^  GROUPS {
            dekan::DataSet5::GROUPSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property dekan::DataSet5::STUDENTSDataTable^  STUDENTS {
            dekan::DataSet5::STUDENTSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property dekan::DataSet5::MARKSDataTable^  MARKS {
            dekan::DataSet5::MARKSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeGROUPS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeSTUDENTS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeMARKS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class GROUPSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_GROUP;
            
            private: ::System::Data::DataColumn^  columnGROUPNAME;
            
            public: event dekan::DataSet5::GROUPSRowChangeEventHandler^  GROUPSRowChanging;
            
            public: event dekan::DataSet5::GROUPSRowChangeEventHandler^  GROUPSRowChanged;
            
            public: event dekan::DataSet5::GROUPSRowChangeEventHandler^  GROUPSRowDeleting;
            
            public: event dekan::DataSet5::GROUPSRowChangeEventHandler^  GROUPSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_GROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  GROUPNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet5::GROUPSRow^  default [::System::Int32 ] {
                dekan::DataSet5::GROUPSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddGROUPSRow(dekan::DataSet5::GROUPSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet5::GROUPSRow^  AddGROUPSRow(System::Decimal ID_GROUP, System::String^  GROUPNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet5::GROUPSRow^  FindByID_GROUP(System::Decimal ID_GROUP);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet5::GROUPSRow^  NewGROUPSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveGROUPSRow(dekan::DataSet5::GROUPSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class STUDENTSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_STUDENT;
            
            private: ::System::Data::DataColumn^  columnFULLNAME;
            
            public: event dekan::DataSet5::STUDENTSRowChangeEventHandler^  STUDENTSRowChanging;
            
            public: event dekan::DataSet5::STUDENTSRowChangeEventHandler^  STUDENTSRowChanged;
            
            public: event dekan::DataSet5::STUDENTSRowChangeEventHandler^  STUDENTSRowDeleting;
            
            public: event dekan::DataSet5::STUDENTSRowChangeEventHandler^  STUDENTSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STUDENTSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STUDENTSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STUDENTSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_STUDENTColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FULLNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet5::STUDENTSRow^  default [::System::Int32 ] {
                dekan::DataSet5::STUDENTSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddSTUDENTSRow(dekan::DataSet5::STUDENTSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet5::STUDENTSRow^  AddSTUDENTSRow(System::Decimal ID_STUDENT, System::String^  FULLNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet5::STUDENTSRow^  FindByID_STUDENT(System::Decimal ID_STUDENT);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet5::STUDENTSRow^  NewSTUDENTSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveSTUDENTSRow(dekan::DataSet5::STUDENTSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class MARKSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnVALUE_MARK;
            
            private: ::System::Data::DataColumn^  columnDATE_MARK;
            
            private: ::System::Data::DataColumn^  columnFULLNAME;
            
            private: ::System::Data::DataColumn^  columnDISCNAME;
            
            public: event dekan::DataSet5::MARKSRowChangeEventHandler^  MARKSRowChanging;
            
            public: event dekan::DataSet5::MARKSRowChangeEventHandler^  MARKSRowChanged;
            
            public: event dekan::DataSet5::MARKSRowChangeEventHandler^  MARKSRowDeleting;
            
            public: event dekan::DataSet5::MARKSRowChangeEventHandler^  MARKSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VALUE_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DATE_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FULLNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DISCNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet5::MARKSRow^  default [::System::Int32 ] {
                dekan::DataSet5::MARKSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddMARKSRow(dekan::DataSet5::MARKSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet5::MARKSRow^  AddMARKSRow(System::Decimal VALUE_MARK, System::DateTime DATE_MARK, System::String^  FULLNAME, 
                        System::String^  DISCNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet5::MARKSRow^  NewMARKSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveMARKSRow(dekan::DataSet5::MARKSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class GROUPSRow : public ::System::Data::DataRow {
            
            private: dekan::DataSet5::GROUPSDataTable^  tableGROUPS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_GROUP {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  GROUPNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsGROUPNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetGROUPNAMENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class STUDENTSRow : public ::System::Data::DataRow {
            
            private: dekan::DataSet5::STUDENTSDataTable^  tableSTUDENTS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STUDENTSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_STUDENT {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FULLNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFULLNAMENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class MARKSRow : public ::System::Data::DataRow {
            
            private: dekan::DataSet5::MARKSDataTable^  tableMARKS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal VALUE_MARK {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime DATE_MARK {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FULLNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DISCNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVALUE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVALUE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDATE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDATE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDISCNAMENull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class GROUPSRowChangeEvent : public ::System::EventArgs {
            
            private: dekan::DataSet5::GROUPSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSRowChangeEvent(dekan::DataSet5::GROUPSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet5::GROUPSRow^  Row {
                dekan::DataSet5::GROUPSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class STUDENTSRowChangeEvent : public ::System::EventArgs {
            
            private: dekan::DataSet5::STUDENTSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STUDENTSRowChangeEvent(dekan::DataSet5::STUDENTSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet5::STUDENTSRow^  Row {
                dekan::DataSet5::STUDENTSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class MARKSRowChangeEvent : public ::System::EventArgs {
            
            private: dekan::DataSet5::MARKSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSRowChangeEvent(dekan::DataSet5::MARKSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet5::MARKSRow^  Row {
                dekan::DataSet5::MARKSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace dekan {
    
    
    inline DataSet5::DataSet5() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet5::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline DataSet5::DataSet5(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet5::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"GROUPS"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet5::GROUPSDataTable(ds->Tables[L"GROUPS"])));
            }
            if (ds->Tables[L"STUDENTS"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet5::STUDENTSDataTable(ds->Tables[L"STUDENTS"])));
            }
            if (ds->Tables[L"MARKS"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet5::MARKSDataTable(ds->Tables[L"MARKS"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet5::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline dekan::DataSet5::GROUPSDataTable^  DataSet5::GROUPS::get() {
        return this->tableGROUPS;
    }
    
    inline dekan::DataSet5::STUDENTSDataTable^  DataSet5::STUDENTS::get() {
        return this->tableSTUDENTS;
    }
    
    inline dekan::DataSet5::MARKSDataTable^  DataSet5::MARKS::get() {
        return this->tableMARKS;
    }
    
    inline ::System::Data::SchemaSerializationMode DataSet5::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void DataSet5::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  DataSet5::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  DataSet5::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void DataSet5::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  DataSet5::Clone() {
        dekan::DataSet5^  cln = (cli::safe_cast<dekan::DataSet5^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean DataSet5::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean DataSet5::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void DataSet5::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"GROUPS"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet5::GROUPSDataTable(ds->Tables[L"GROUPS"])));
            }
            if (ds->Tables[L"STUDENTS"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet5::STUDENTSDataTable(ds->Tables[L"STUDENTS"])));
            }
            if (ds->Tables[L"MARKS"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet5::MARKSDataTable(ds->Tables[L"MARKS"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  DataSet5::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void DataSet5::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void DataSet5::InitVars(::System::Boolean initTable) {
        this->tableGROUPS = (cli::safe_cast<dekan::DataSet5::GROUPSDataTable^  >(__super::Tables[L"GROUPS"]));
        if (initTable == true) {
            if (this->tableGROUPS != nullptr) {
                this->tableGROUPS->InitVars();
            }
        }
        this->tableSTUDENTS = (cli::safe_cast<dekan::DataSet5::STUDENTSDataTable^  >(__super::Tables[L"STUDENTS"]));
        if (initTable == true) {
            if (this->tableSTUDENTS != nullptr) {
                this->tableSTUDENTS->InitVars();
            }
        }
        this->tableMARKS = (cli::safe_cast<dekan::DataSet5::MARKSDataTable^  >(__super::Tables[L"MARKS"]));
        if (initTable == true) {
            if (this->tableMARKS != nullptr) {
                this->tableMARKS->InitVars();
            }
        }
    }
    
    inline ::System::Void DataSet5::InitClass() {
        this->DataSetName = L"DataSet5";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/DataSet5.xsd";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableGROUPS = (gcnew dekan::DataSet5::GROUPSDataTable());
        __super::Tables->Add(this->tableGROUPS);
        this->tableSTUDENTS = (gcnew dekan::DataSet5::STUDENTSDataTable());
        __super::Tables->Add(this->tableSTUDENTS);
        this->tableMARKS = (gcnew dekan::DataSet5::MARKSDataTable());
        __super::Tables->Add(this->tableMARKS);
    }
    
    inline ::System::Boolean DataSet5::ShouldSerializeGROUPS() {
        return false;
    }
    
    inline ::System::Boolean DataSet5::ShouldSerializeSTUDENTS() {
        return false;
    }
    
    inline ::System::Boolean DataSet5::ShouldSerializeMARKS() {
        return false;
    }
    
    inline ::System::Void DataSet5::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet5::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        dekan::DataSet5^  ds = (gcnew dekan::DataSet5());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet5::GROUPSDataTable::GROUPSDataTable() {
        this->TableName = L"GROUPS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet5::GROUPSDataTable::GROUPSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet5::GROUPSDataTable::GROUPSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet5::GROUPSDataTable::ID_GROUPColumn::get() {
        return this->columnID_GROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet5::GROUPSDataTable::GROUPNAMEColumn::get() {
        return this->columnGROUPNAME;
    }
    
    inline ::System::Int32 DataSet5::GROUPSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline dekan::DataSet5::GROUPSRow^  DataSet5::GROUPSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<dekan::DataSet5::GROUPSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet5::GROUPSDataTable::AddGROUPSRow(dekan::DataSet5::GROUPSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline dekan::DataSet5::GROUPSRow^  DataSet5::GROUPSDataTable::AddGROUPSRow(System::Decimal ID_GROUP, System::String^  GROUPNAME) {
        dekan::DataSet5::GROUPSRow^  rowGROUPSRow = (cli::safe_cast<dekan::DataSet5::GROUPSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {ID_GROUP, GROUPNAME};
        rowGROUPSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowGROUPSRow);
        return rowGROUPSRow;
    }
    
    inline dekan::DataSet5::GROUPSRow^  DataSet5::GROUPSDataTable::FindByID_GROUP(System::Decimal ID_GROUP) {
        return (cli::safe_cast<dekan::DataSet5::GROUPSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_GROUP})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet5::GROUPSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet5::GROUPSDataTable::Clone() {
        dekan::DataSet5::GROUPSDataTable^  cln = (cli::safe_cast<dekan::DataSet5::GROUPSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet5::GROUPSDataTable::CreateInstance() {
        return (gcnew dekan::DataSet5::GROUPSDataTable());
    }
    
    inline ::System::Void DataSet5::GROUPSDataTable::InitVars() {
        this->columnID_GROUP = __super::Columns[L"ID_GROUP"];
        this->columnGROUPNAME = __super::Columns[L"GROUPNAME"];
    }
    
    inline ::System::Void DataSet5::GROUPSDataTable::InitClass() {
        this->columnID_GROUP = (gcnew ::System::Data::DataColumn(L"ID_GROUP", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_GROUP);
        this->columnGROUPNAME = (gcnew ::System::Data::DataColumn(L"GROUPNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnGROUPNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_GROUP}, 
                true)));
        this->columnID_GROUP->AllowDBNull = false;
        this->columnID_GROUP->Unique = true;
        this->columnGROUPNAME->MaxLength = 4000;
    }
    
    inline dekan::DataSet5::GROUPSRow^  DataSet5::GROUPSDataTable::NewGROUPSRow() {
        return (cli::safe_cast<dekan::DataSet5::GROUPSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet5::GROUPSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew dekan::DataSet5::GROUPSRow(builder));
    }
    
    inline ::System::Type^  DataSet5::GROUPSDataTable::GetRowType() {
        return dekan::DataSet5::GROUPSRow::typeid;
    }
    
    inline ::System::Void DataSet5::GROUPSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->GROUPSRowChanged(this, (gcnew dekan::DataSet5::GROUPSRowChangeEvent((cli::safe_cast<dekan::DataSet5::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::GROUPSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->GROUPSRowChanging(this, (gcnew dekan::DataSet5::GROUPSRowChangeEvent((cli::safe_cast<dekan::DataSet5::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::GROUPSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->GROUPSRowDeleted(this, (gcnew dekan::DataSet5::GROUPSRowChangeEvent((cli::safe_cast<dekan::DataSet5::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::GROUPSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->GROUPSRowDeleting(this, (gcnew dekan::DataSet5::GROUPSRowChangeEvent((cli::safe_cast<dekan::DataSet5::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::GROUPSDataTable::RemoveGROUPSRow(dekan::DataSet5::GROUPSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet5::GROUPSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        dekan::DataSet5^  ds = (gcnew dekan::DataSet5());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"GROUPSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet5::STUDENTSDataTable::STUDENTSDataTable() {
        this->TableName = L"STUDENTS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet5::STUDENTSDataTable::STUDENTSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet5::STUDENTSDataTable::STUDENTSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet5::STUDENTSDataTable::ID_STUDENTColumn::get() {
        return this->columnID_STUDENT;
    }
    
    inline ::System::Data::DataColumn^  DataSet5::STUDENTSDataTable::FULLNAMEColumn::get() {
        return this->columnFULLNAME;
    }
    
    inline ::System::Int32 DataSet5::STUDENTSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline dekan::DataSet5::STUDENTSRow^  DataSet5::STUDENTSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<dekan::DataSet5::STUDENTSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet5::STUDENTSDataTable::AddSTUDENTSRow(dekan::DataSet5::STUDENTSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline dekan::DataSet5::STUDENTSRow^  DataSet5::STUDENTSDataTable::AddSTUDENTSRow(System::Decimal ID_STUDENT, System::String^  FULLNAME) {
        dekan::DataSet5::STUDENTSRow^  rowSTUDENTSRow = (cli::safe_cast<dekan::DataSet5::STUDENTSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {ID_STUDENT, FULLNAME};
        rowSTUDENTSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowSTUDENTSRow);
        return rowSTUDENTSRow;
    }
    
    inline dekan::DataSet5::STUDENTSRow^  DataSet5::STUDENTSDataTable::FindByID_STUDENT(System::Decimal ID_STUDENT) {
        return (cli::safe_cast<dekan::DataSet5::STUDENTSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_STUDENT})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet5::STUDENTSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet5::STUDENTSDataTable::Clone() {
        dekan::DataSet5::STUDENTSDataTable^  cln = (cli::safe_cast<dekan::DataSet5::STUDENTSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet5::STUDENTSDataTable::CreateInstance() {
        return (gcnew dekan::DataSet5::STUDENTSDataTable());
    }
    
    inline ::System::Void DataSet5::STUDENTSDataTable::InitVars() {
        this->columnID_STUDENT = __super::Columns[L"ID_STUDENT"];
        this->columnFULLNAME = __super::Columns[L"FULLNAME"];
    }
    
    inline ::System::Void DataSet5::STUDENTSDataTable::InitClass() {
        this->columnID_STUDENT = (gcnew ::System::Data::DataColumn(L"ID_STUDENT", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_STUDENT);
        this->columnFULLNAME = (gcnew ::System::Data::DataColumn(L"FULLNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFULLNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_STUDENT}, 
                true)));
        this->columnID_STUDENT->AllowDBNull = false;
        this->columnID_STUDENT->Unique = true;
        this->columnFULLNAME->MaxLength = 4000;
    }
    
    inline dekan::DataSet5::STUDENTSRow^  DataSet5::STUDENTSDataTable::NewSTUDENTSRow() {
        return (cli::safe_cast<dekan::DataSet5::STUDENTSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet5::STUDENTSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew dekan::DataSet5::STUDENTSRow(builder));
    }
    
    inline ::System::Type^  DataSet5::STUDENTSDataTable::GetRowType() {
        return dekan::DataSet5::STUDENTSRow::typeid;
    }
    
    inline ::System::Void DataSet5::STUDENTSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->STUDENTSRowChanged(this, (gcnew dekan::DataSet5::STUDENTSRowChangeEvent((cli::safe_cast<dekan::DataSet5::STUDENTSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::STUDENTSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->STUDENTSRowChanging(this, (gcnew dekan::DataSet5::STUDENTSRowChangeEvent((cli::safe_cast<dekan::DataSet5::STUDENTSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::STUDENTSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->STUDENTSRowDeleted(this, (gcnew dekan::DataSet5::STUDENTSRowChangeEvent((cli::safe_cast<dekan::DataSet5::STUDENTSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::STUDENTSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->STUDENTSRowDeleting(this, (gcnew dekan::DataSet5::STUDENTSRowChangeEvent((cli::safe_cast<dekan::DataSet5::STUDENTSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::STUDENTSDataTable::RemoveSTUDENTSRow(dekan::DataSet5::STUDENTSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet5::STUDENTSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        dekan::DataSet5^  ds = (gcnew dekan::DataSet5());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"STUDENTSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet5::MARKSDataTable::MARKSDataTable() {
        this->TableName = L"MARKS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet5::MARKSDataTable::MARKSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet5::MARKSDataTable::MARKSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet5::MARKSDataTable::VALUE_MARKColumn::get() {
        return this->columnVALUE_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet5::MARKSDataTable::DATE_MARKColumn::get() {
        return this->columnDATE_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet5::MARKSDataTable::FULLNAMEColumn::get() {
        return this->columnFULLNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet5::MARKSDataTable::DISCNAMEColumn::get() {
        return this->columnDISCNAME;
    }
    
    inline ::System::Int32 DataSet5::MARKSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline dekan::DataSet5::MARKSRow^  DataSet5::MARKSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<dekan::DataSet5::MARKSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet5::MARKSDataTable::AddMARKSRow(dekan::DataSet5::MARKSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline dekan::DataSet5::MARKSRow^  DataSet5::MARKSDataTable::AddMARKSRow(System::Decimal VALUE_MARK, System::DateTime DATE_MARK, 
                System::String^  FULLNAME, System::String^  DISCNAME) {
        dekan::DataSet5::MARKSRow^  rowMARKSRow = (cli::safe_cast<dekan::DataSet5::MARKSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {VALUE_MARK, DATE_MARK, 
            FULLNAME, DISCNAME};
        rowMARKSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowMARKSRow);
        return rowMARKSRow;
    }
    
    inline ::System::Collections::IEnumerator^  DataSet5::MARKSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet5::MARKSDataTable::Clone() {
        dekan::DataSet5::MARKSDataTable^  cln = (cli::safe_cast<dekan::DataSet5::MARKSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet5::MARKSDataTable::CreateInstance() {
        return (gcnew dekan::DataSet5::MARKSDataTable());
    }
    
    inline ::System::Void DataSet5::MARKSDataTable::InitVars() {
        this->columnVALUE_MARK = __super::Columns[L"VALUE_MARK"];
        this->columnDATE_MARK = __super::Columns[L"DATE_MARK"];
        this->columnFULLNAME = __super::Columns[L"FULLNAME"];
        this->columnDISCNAME = __super::Columns[L"DISCNAME"];
    }
    
    inline ::System::Void DataSet5::MARKSDataTable::InitClass() {
        this->columnVALUE_MARK = (gcnew ::System::Data::DataColumn(L"VALUE_MARK", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVALUE_MARK);
        this->columnDATE_MARK = (gcnew ::System::Data::DataColumn(L"DATE_MARK", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDATE_MARK);
        this->columnFULLNAME = (gcnew ::System::Data::DataColumn(L"FULLNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFULLNAME);
        this->columnDISCNAME = (gcnew ::System::Data::DataColumn(L"DISCNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDISCNAME);
        this->columnFULLNAME->MaxLength = 4000;
        this->columnDISCNAME->MaxLength = 4000;
    }
    
    inline dekan::DataSet5::MARKSRow^  DataSet5::MARKSDataTable::NewMARKSRow() {
        return (cli::safe_cast<dekan::DataSet5::MARKSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet5::MARKSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew dekan::DataSet5::MARKSRow(builder));
    }
    
    inline ::System::Type^  DataSet5::MARKSDataTable::GetRowType() {
        return dekan::DataSet5::MARKSRow::typeid;
    }
    
    inline ::System::Void DataSet5::MARKSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->MARKSRowChanged(this, (gcnew dekan::DataSet5::MARKSRowChangeEvent((cli::safe_cast<dekan::DataSet5::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::MARKSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->MARKSRowChanging(this, (gcnew dekan::DataSet5::MARKSRowChangeEvent((cli::safe_cast<dekan::DataSet5::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::MARKSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->MARKSRowDeleted(this, (gcnew dekan::DataSet5::MARKSRowChangeEvent((cli::safe_cast<dekan::DataSet5::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::MARKSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->MARKSRowDeleting(this, (gcnew dekan::DataSet5::MARKSRowChangeEvent((cli::safe_cast<dekan::DataSet5::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet5::MARKSDataTable::RemoveMARKSRow(dekan::DataSet5::MARKSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet5::MARKSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        dekan::DataSet5^  ds = (gcnew dekan::DataSet5());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"MARKSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet5::GROUPSRow::GROUPSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableGROUPS = (cli::safe_cast<dekan::DataSet5::GROUPSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet5::GROUPSRow::ID_GROUP::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableGROUPS->ID_GROUPColumn]));
    }
    inline System::Void DataSet5::GROUPSRow::ID_GROUP::set(System::Decimal value) {
        this[this->tableGROUPS->ID_GROUPColumn] = value;
    }
    
    inline System::String^  DataSet5::GROUPSRow::GROUPNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGROUPS->GROUPNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'GROUPNAME\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet5::GROUPSRow::GROUPNAME::set(System::String^  value) {
        this[this->tableGROUPS->GROUPNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet5::GROUPSRow::IsGROUPNAMENull() {
        return this->IsNull(this->tableGROUPS->GROUPNAMEColumn);
    }
    
    inline ::System::Void DataSet5::GROUPSRow::SetGROUPNAMENull() {
        this[this->tableGROUPS->GROUPNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet5::STUDENTSRow::STUDENTSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableSTUDENTS = (cli::safe_cast<dekan::DataSet5::STUDENTSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet5::STUDENTSRow::ID_STUDENT::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableSTUDENTS->ID_STUDENTColumn]));
    }
    inline System::Void DataSet5::STUDENTSRow::ID_STUDENT::set(System::Decimal value) {
        this[this->tableSTUDENTS->ID_STUDENTColumn] = value;
    }
    
    inline System::String^  DataSet5::STUDENTSRow::FULLNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTUDENTS->FULLNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FULLNAME\' в таблице \'STUDENTS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet5::STUDENTSRow::FULLNAME::set(System::String^  value) {
        this[this->tableSTUDENTS->FULLNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet5::STUDENTSRow::IsFULLNAMENull() {
        return this->IsNull(this->tableSTUDENTS->FULLNAMEColumn);
    }
    
    inline ::System::Void DataSet5::STUDENTSRow::SetFULLNAMENull() {
        this[this->tableSTUDENTS->FULLNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet5::MARKSRow::MARKSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableMARKS = (cli::safe_cast<dekan::DataSet5::MARKSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet5::MARKSRow::VALUE_MARK::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->VALUE_MARKColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'VALUE_MARK\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet5::MARKSRow::VALUE_MARK::set(System::Decimal value) {
        this[this->tableMARKS->VALUE_MARKColumn] = value;
    }
    
    inline System::DateTime DataSet5::MARKSRow::DATE_MARK::get() {
        try {
            return (cli::safe_cast<::System::DateTime >(this[this->tableMARKS->DATE_MARKColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DATE_MARK\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet5::MARKSRow::DATE_MARK::set(System::DateTime value) {
        this[this->tableMARKS->DATE_MARKColumn] = value;
    }
    
    inline System::String^  DataSet5::MARKSRow::FULLNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMARKS->FULLNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FULLNAME\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet5::MARKSRow::FULLNAME::set(System::String^  value) {
        this[this->tableMARKS->FULLNAMEColumn] = value;
    }
    
    inline System::String^  DataSet5::MARKSRow::DISCNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableMARKS->DISCNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DISCNAME\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet5::MARKSRow::DISCNAME::set(System::String^  value) {
        this[this->tableMARKS->DISCNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet5::MARKSRow::IsVALUE_MARKNull() {
        return this->IsNull(this->tableMARKS->VALUE_MARKColumn);
    }
    
    inline ::System::Void DataSet5::MARKSRow::SetVALUE_MARKNull() {
        this[this->tableMARKS->VALUE_MARKColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet5::MARKSRow::IsDATE_MARKNull() {
        return this->IsNull(this->tableMARKS->DATE_MARKColumn);
    }
    
    inline ::System::Void DataSet5::MARKSRow::SetDATE_MARKNull() {
        this[this->tableMARKS->DATE_MARKColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet5::MARKSRow::IsFULLNAMENull() {
        return this->IsNull(this->tableMARKS->FULLNAMEColumn);
    }
    
    inline ::System::Void DataSet5::MARKSRow::SetFULLNAMENull() {
        this[this->tableMARKS->FULLNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet5::MARKSRow::IsDISCNAMENull() {
        return this->IsNull(this->tableMARKS->DISCNAMEColumn);
    }
    
    inline ::System::Void DataSet5::MARKSRow::SetDISCNAMENull() {
        this[this->tableMARKS->DISCNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet5::GROUPSRowChangeEvent::GROUPSRowChangeEvent(dekan::DataSet5::GROUPSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dekan::DataSet5::GROUPSRow^  DataSet5::GROUPSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet5::GROUPSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet5::STUDENTSRowChangeEvent::STUDENTSRowChangeEvent(dekan::DataSet5::STUDENTSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dekan::DataSet5::STUDENTSRow^  DataSet5::STUDENTSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet5::STUDENTSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet5::MARKSRowChangeEvent::MARKSRowChangeEvent(dekan::DataSet5::MARKSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dekan::DataSet5::MARKSRow^  DataSet5::MARKSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet5::MARKSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
