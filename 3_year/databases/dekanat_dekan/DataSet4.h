#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
namespace dekan {
    using namespace System;
    ref class DataSet4;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"DataSet4"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class DataSet4 : public ::System::Data::DataSet {
        public : ref class TEACHERSDataTable;
        public : ref class DISCIPLINESDataTable;
        public : ref class TableDataTable;
        public : ref class TEACHERSRow;
        public : ref class DISCIPLINESRow;
        public : ref class TableRow;
        public : ref class TEACHERSRowChangeEvent;
        public : ref class DISCIPLINESRowChangeEvent;
        public : ref class TableRowChangeEvent;
        
        private: dekan::DataSet4::TEACHERSDataTable^  tableTEACHERS;
        
        private: dekan::DataSet4::DISCIPLINESDataTable^  tableDISCIPLINES;
        
        private: dekan::DataSet4::TableDataTable^  tableTable;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void TEACHERSRowChangeEventHandler(::System::Object^  sender, dekan::DataSet4::TEACHERSRowChangeEvent^  e);
        
        public : delegate System::Void DISCIPLINESRowChangeEventHandler(::System::Object^  sender, dekan::DataSet4::DISCIPLINESRowChangeEvent^  e);
        
        public : delegate System::Void TableRowChangeEventHandler(::System::Object^  sender, dekan::DataSet4::TableRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet4();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet4(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property dekan::DataSet4::TEACHERSDataTable^  TEACHERS {
            dekan::DataSet4::TEACHERSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property dekan::DataSet4::DISCIPLINESDataTable^  DISCIPLINES {
            dekan::DataSet4::DISCIPLINESDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property dekan::DataSet4::TableDataTable^  Table {
            dekan::DataSet4::TableDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeTEACHERS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeDISCIPLINES();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeTable();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TEACHERSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_TEACHER;
            
            private: ::System::Data::DataColumn^  columnFULLNAME;
            
            public: event dekan::DataSet4::TEACHERSRowChangeEventHandler^  TEACHERSRowChanging;
            
            public: event dekan::DataSet4::TEACHERSRowChangeEventHandler^  TEACHERSRowChanged;
            
            public: event dekan::DataSet4::TEACHERSRowChangeEventHandler^  TEACHERSRowDeleting;
            
            public: event dekan::DataSet4::TEACHERSRowChangeEventHandler^  TEACHERSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_TEACHERColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FULLNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet4::TEACHERSRow^  default [::System::Int32 ] {
                dekan::DataSet4::TEACHERSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddTEACHERSRow(dekan::DataSet4::TEACHERSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet4::TEACHERSRow^  AddTEACHERSRow(System::Decimal ID_TEACHER, System::String^  FULLNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet4::TEACHERSRow^  FindByID_TEACHER(System::Decimal ID_TEACHER);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet4::TEACHERSRow^  NewTEACHERSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveTEACHERSRow(dekan::DataSet4::TEACHERSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class DISCIPLINESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_DISCIPLINE;
            
            private: ::System::Data::DataColumn^  columnDISCNAME;
            
            private: ::System::Data::DataColumn^  columnID_GROUP;
            
            public: event dekan::DataSet4::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowChanging;
            
            public: event dekan::DataSet4::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowChanged;
            
            public: event dekan::DataSet4::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowDeleting;
            
            public: event dekan::DataSet4::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_DISCIPLINEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DISCNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_GROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet4::DISCIPLINESRow^  default [::System::Int32 ] {
                dekan::DataSet4::DISCIPLINESRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddDISCIPLINESRow(dekan::DataSet4::DISCIPLINESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet4::DISCIPLINESRow^  AddDISCIPLINESRow(System::Decimal ID_DISCIPLINE, System::String^  DISCNAME, 
                        System::Decimal ID_GROUP);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet4::DISCIPLINESRow^  FindByID_DISCIPLINE(System::Decimal ID_DISCIPLINE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet4::DISCIPLINESRow^  NewDISCIPLINESRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveDISCIPLINESRow(dekan::DataSet4::DISCIPLINESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TableDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_MARK;
            
            private: ::System::Data::DataColumn^  columnVALUE_MARK;
            
            private: ::System::Data::DataColumn^  columnSTUDNAME;
            
            private: ::System::Data::DataColumn^  columnTEACHNAME;
            
            private: ::System::Data::DataColumn^  columnDISCNAME;
            
            public: event dekan::DataSet4::TableRowChangeEventHandler^  TableRowChanging;
            
            public: event dekan::DataSet4::TableRowChangeEventHandler^  TableRowChanged;
            
            public: event dekan::DataSet4::TableRowChangeEventHandler^  TableRowDeleting;
            
            public: event dekan::DataSet4::TableRowChangeEventHandler^  TableRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TableDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TableDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TableDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VALUE_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STUDNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TEACHNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DISCNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet4::TableRow^  default [::System::Int32 ] {
                dekan::DataSet4::TableRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddTableRow(dekan::DataSet4::TableRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet4::TableRow^  AddTableRow(System::Decimal ID_MARK, System::Decimal VALUE_MARK, System::String^  STUDNAME, 
                        System::String^  TEACHNAME, System::String^  DISCNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet4::TableRow^  FindByID_MARK(System::Decimal ID_MARK);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet4::TableRow^  NewTableRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveTableRow(dekan::DataSet4::TableRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERSRow : public ::System::Data::DataRow {
            
            private: dekan::DataSet4::TEACHERSDataTable^  tableTEACHERS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_TEACHER {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FULLNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFULLNAMENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class DISCIPLINESRow : public ::System::Data::DataRow {
            
            private: dekan::DataSet4::DISCIPLINESDataTable^  tableDISCIPLINES;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_DISCIPLINE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DISCNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_GROUP {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_GROUPNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TableRow : public ::System::Data::DataRow {
            
            private: dekan::DataSet4::TableDataTable^  tableTable;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TableRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_MARK {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal VALUE_MARK {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STUDNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  TEACHNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DISCNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVALUE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVALUE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTUDNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTUDNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTEACHNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTEACHNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDISCNAMENull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERSRowChangeEvent : public ::System::EventArgs {
            
            private: dekan::DataSet4::TEACHERSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSRowChangeEvent(dekan::DataSet4::TEACHERSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet4::TEACHERSRow^  Row {
                dekan::DataSet4::TEACHERSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class DISCIPLINESRowChangeEvent : public ::System::EventArgs {
            
            private: dekan::DataSet4::DISCIPLINESRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESRowChangeEvent(dekan::DataSet4::DISCIPLINESRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet4::DISCIPLINESRow^  Row {
                dekan::DataSet4::DISCIPLINESRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TableRowChangeEvent : public ::System::EventArgs {
            
            private: dekan::DataSet4::TableRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TableRowChangeEvent(dekan::DataSet4::TableRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet4::TableRow^  Row {
                dekan::DataSet4::TableRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace dekan {
    
    
    inline DataSet4::DataSet4() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet4::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline DataSet4::DataSet4(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet4::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"TEACHERS"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet4::TEACHERSDataTable(ds->Tables[L"TEACHERS"])));
            }
            if (ds->Tables[L"DISCIPLINES"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet4::DISCIPLINESDataTable(ds->Tables[L"DISCIPLINES"])));
            }
            if (ds->Tables[L"Table"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet4::TableDataTable(ds->Tables[L"Table"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet4::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline dekan::DataSet4::TEACHERSDataTable^  DataSet4::TEACHERS::get() {
        return this->tableTEACHERS;
    }
    
    inline dekan::DataSet4::DISCIPLINESDataTable^  DataSet4::DISCIPLINES::get() {
        return this->tableDISCIPLINES;
    }
    
    inline dekan::DataSet4::TableDataTable^  DataSet4::Table::get() {
        return this->tableTable;
    }
    
    inline ::System::Data::SchemaSerializationMode DataSet4::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void DataSet4::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  DataSet4::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  DataSet4::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void DataSet4::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  DataSet4::Clone() {
        dekan::DataSet4^  cln = (cli::safe_cast<dekan::DataSet4^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean DataSet4::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean DataSet4::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void DataSet4::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"TEACHERS"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet4::TEACHERSDataTable(ds->Tables[L"TEACHERS"])));
            }
            if (ds->Tables[L"DISCIPLINES"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet4::DISCIPLINESDataTable(ds->Tables[L"DISCIPLINES"])));
            }
            if (ds->Tables[L"Table"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet4::TableDataTable(ds->Tables[L"Table"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  DataSet4::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void DataSet4::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void DataSet4::InitVars(::System::Boolean initTable) {
        this->tableTEACHERS = (cli::safe_cast<dekan::DataSet4::TEACHERSDataTable^  >(__super::Tables[L"TEACHERS"]));
        if (initTable == true) {
            if (this->tableTEACHERS != nullptr) {
                this->tableTEACHERS->InitVars();
            }
        }
        this->tableDISCIPLINES = (cli::safe_cast<dekan::DataSet4::DISCIPLINESDataTable^  >(__super::Tables[L"DISCIPLINES"]));
        if (initTable == true) {
            if (this->tableDISCIPLINES != nullptr) {
                this->tableDISCIPLINES->InitVars();
            }
        }
        this->tableTable = (cli::safe_cast<dekan::DataSet4::TableDataTable^  >(__super::Tables[L"Table"]));
        if (initTable == true) {
            if (this->tableTable != nullptr) {
                this->tableTable->InitVars();
            }
        }
    }
    
    inline ::System::Void DataSet4::InitClass() {
        this->DataSetName = L"DataSet4";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/DataSet4.xsd";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableTEACHERS = (gcnew dekan::DataSet4::TEACHERSDataTable());
        __super::Tables->Add(this->tableTEACHERS);
        this->tableDISCIPLINES = (gcnew dekan::DataSet4::DISCIPLINESDataTable());
        __super::Tables->Add(this->tableDISCIPLINES);
        this->tableTable = (gcnew dekan::DataSet4::TableDataTable());
        __super::Tables->Add(this->tableTable);
    }
    
    inline ::System::Boolean DataSet4::ShouldSerializeTEACHERS() {
        return false;
    }
    
    inline ::System::Boolean DataSet4::ShouldSerializeDISCIPLINES() {
        return false;
    }
    
    inline ::System::Boolean DataSet4::ShouldSerializeTable() {
        return false;
    }
    
    inline ::System::Void DataSet4::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet4::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        dekan::DataSet4^  ds = (gcnew dekan::DataSet4());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet4::TEACHERSDataTable::TEACHERSDataTable() {
        this->TableName = L"TEACHERS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet4::TEACHERSDataTable::TEACHERSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet4::TEACHERSDataTable::TEACHERSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet4::TEACHERSDataTable::ID_TEACHERColumn::get() {
        return this->columnID_TEACHER;
    }
    
    inline ::System::Data::DataColumn^  DataSet4::TEACHERSDataTable::FULLNAMEColumn::get() {
        return this->columnFULLNAME;
    }
    
    inline ::System::Int32 DataSet4::TEACHERSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline dekan::DataSet4::TEACHERSRow^  DataSet4::TEACHERSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<dekan::DataSet4::TEACHERSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet4::TEACHERSDataTable::AddTEACHERSRow(dekan::DataSet4::TEACHERSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline dekan::DataSet4::TEACHERSRow^  DataSet4::TEACHERSDataTable::AddTEACHERSRow(System::Decimal ID_TEACHER, System::String^  FULLNAME) {
        dekan::DataSet4::TEACHERSRow^  rowTEACHERSRow = (cli::safe_cast<dekan::DataSet4::TEACHERSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {ID_TEACHER, FULLNAME};
        rowTEACHERSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTEACHERSRow);
        return rowTEACHERSRow;
    }
    
    inline dekan::DataSet4::TEACHERSRow^  DataSet4::TEACHERSDataTable::FindByID_TEACHER(System::Decimal ID_TEACHER) {
        return (cli::safe_cast<dekan::DataSet4::TEACHERSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_TEACHER})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet4::TEACHERSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet4::TEACHERSDataTable::Clone() {
        dekan::DataSet4::TEACHERSDataTable^  cln = (cli::safe_cast<dekan::DataSet4::TEACHERSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet4::TEACHERSDataTable::CreateInstance() {
        return (gcnew dekan::DataSet4::TEACHERSDataTable());
    }
    
    inline ::System::Void DataSet4::TEACHERSDataTable::InitVars() {
        this->columnID_TEACHER = __super::Columns[L"ID_TEACHER"];
        this->columnFULLNAME = __super::Columns[L"FULLNAME"];
    }
    
    inline ::System::Void DataSet4::TEACHERSDataTable::InitClass() {
        this->columnID_TEACHER = (gcnew ::System::Data::DataColumn(L"ID_TEACHER", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_TEACHER);
        this->columnFULLNAME = (gcnew ::System::Data::DataColumn(L"FULLNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFULLNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_TEACHER}, 
                true)));
        this->columnID_TEACHER->AllowDBNull = false;
        this->columnID_TEACHER->Unique = true;
        this->columnFULLNAME->MaxLength = 4000;
    }
    
    inline dekan::DataSet4::TEACHERSRow^  DataSet4::TEACHERSDataTable::NewTEACHERSRow() {
        return (cli::safe_cast<dekan::DataSet4::TEACHERSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet4::TEACHERSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew dekan::DataSet4::TEACHERSRow(builder));
    }
    
    inline ::System::Type^  DataSet4::TEACHERSDataTable::GetRowType() {
        return dekan::DataSet4::TEACHERSRow::typeid;
    }
    
    inline ::System::Void DataSet4::TEACHERSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TEACHERSRowChanged(this, (gcnew dekan::DataSet4::TEACHERSRowChangeEvent((cli::safe_cast<dekan::DataSet4::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::TEACHERSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TEACHERSRowChanging(this, (gcnew dekan::DataSet4::TEACHERSRowChangeEvent((cli::safe_cast<dekan::DataSet4::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::TEACHERSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TEACHERSRowDeleted(this, (gcnew dekan::DataSet4::TEACHERSRowChangeEvent((cli::safe_cast<dekan::DataSet4::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::TEACHERSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TEACHERSRowDeleting(this, (gcnew dekan::DataSet4::TEACHERSRowChangeEvent((cli::safe_cast<dekan::DataSet4::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::TEACHERSDataTable::RemoveTEACHERSRow(dekan::DataSet4::TEACHERSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet4::TEACHERSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        dekan::DataSet4^  ds = (gcnew dekan::DataSet4());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TEACHERSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet4::DISCIPLINESDataTable::DISCIPLINESDataTable() {
        this->TableName = L"DISCIPLINES";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet4::DISCIPLINESDataTable::DISCIPLINESDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet4::DISCIPLINESDataTable::DISCIPLINESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet4::DISCIPLINESDataTable::ID_DISCIPLINEColumn::get() {
        return this->columnID_DISCIPLINE;
    }
    
    inline ::System::Data::DataColumn^  DataSet4::DISCIPLINESDataTable::DISCNAMEColumn::get() {
        return this->columnDISCNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet4::DISCIPLINESDataTable::ID_GROUPColumn::get() {
        return this->columnID_GROUP;
    }
    
    inline ::System::Int32 DataSet4::DISCIPLINESDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline dekan::DataSet4::DISCIPLINESRow^  DataSet4::DISCIPLINESDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<dekan::DataSet4::DISCIPLINESRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet4::DISCIPLINESDataTable::AddDISCIPLINESRow(dekan::DataSet4::DISCIPLINESRow^  row) {
        this->Rows->Add(row);
    }
    
    inline dekan::DataSet4::DISCIPLINESRow^  DataSet4::DISCIPLINESDataTable::AddDISCIPLINESRow(System::Decimal ID_DISCIPLINE, 
                System::String^  DISCNAME, System::Decimal ID_GROUP) {
        dekan::DataSet4::DISCIPLINESRow^  rowDISCIPLINESRow = (cli::safe_cast<dekan::DataSet4::DISCIPLINESRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {ID_DISCIPLINE, DISCNAME, 
            ID_GROUP};
        rowDISCIPLINESRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowDISCIPLINESRow);
        return rowDISCIPLINESRow;
    }
    
    inline dekan::DataSet4::DISCIPLINESRow^  DataSet4::DISCIPLINESDataTable::FindByID_DISCIPLINE(System::Decimal ID_DISCIPLINE) {
        return (cli::safe_cast<dekan::DataSet4::DISCIPLINESRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_DISCIPLINE})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet4::DISCIPLINESDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet4::DISCIPLINESDataTable::Clone() {
        dekan::DataSet4::DISCIPLINESDataTable^  cln = (cli::safe_cast<dekan::DataSet4::DISCIPLINESDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet4::DISCIPLINESDataTable::CreateInstance() {
        return (gcnew dekan::DataSet4::DISCIPLINESDataTable());
    }
    
    inline ::System::Void DataSet4::DISCIPLINESDataTable::InitVars() {
        this->columnID_DISCIPLINE = __super::Columns[L"ID_DISCIPLINE"];
        this->columnDISCNAME = __super::Columns[L"DISCNAME"];
        this->columnID_GROUP = __super::Columns[L"ID_GROUP"];
    }
    
    inline ::System::Void DataSet4::DISCIPLINESDataTable::InitClass() {
        this->columnID_DISCIPLINE = (gcnew ::System::Data::DataColumn(L"ID_DISCIPLINE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_DISCIPLINE);
        this->columnDISCNAME = (gcnew ::System::Data::DataColumn(L"DISCNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDISCNAME);
        this->columnID_GROUP = (gcnew ::System::Data::DataColumn(L"ID_GROUP", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_GROUP);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_DISCIPLINE}, 
                true)));
        this->columnID_DISCIPLINE->AllowDBNull = false;
        this->columnID_DISCIPLINE->Unique = true;
        this->columnDISCNAME->MaxLength = 4000;
    }
    
    inline dekan::DataSet4::DISCIPLINESRow^  DataSet4::DISCIPLINESDataTable::NewDISCIPLINESRow() {
        return (cli::safe_cast<dekan::DataSet4::DISCIPLINESRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet4::DISCIPLINESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew dekan::DataSet4::DISCIPLINESRow(builder));
    }
    
    inline ::System::Type^  DataSet4::DISCIPLINESDataTable::GetRowType() {
        return dekan::DataSet4::DISCIPLINESRow::typeid;
    }
    
    inline ::System::Void DataSet4::DISCIPLINESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->DISCIPLINESRowChanged(this, (gcnew dekan::DataSet4::DISCIPLINESRowChangeEvent((cli::safe_cast<dekan::DataSet4::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::DISCIPLINESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->DISCIPLINESRowChanging(this, (gcnew dekan::DataSet4::DISCIPLINESRowChangeEvent((cli::safe_cast<dekan::DataSet4::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::DISCIPLINESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->DISCIPLINESRowDeleted(this, (gcnew dekan::DataSet4::DISCIPLINESRowChangeEvent((cli::safe_cast<dekan::DataSet4::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::DISCIPLINESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->DISCIPLINESRowDeleting(this, (gcnew dekan::DataSet4::DISCIPLINESRowChangeEvent((cli::safe_cast<dekan::DataSet4::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::DISCIPLINESDataTable::RemoveDISCIPLINESRow(dekan::DataSet4::DISCIPLINESRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet4::DISCIPLINESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        dekan::DataSet4^  ds = (gcnew dekan::DataSet4());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"DISCIPLINESDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet4::TableDataTable::TableDataTable() {
        this->TableName = L"Table";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet4::TableDataTable::TableDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet4::TableDataTable::TableDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet4::TableDataTable::ID_MARKColumn::get() {
        return this->columnID_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet4::TableDataTable::VALUE_MARKColumn::get() {
        return this->columnVALUE_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet4::TableDataTable::STUDNAMEColumn::get() {
        return this->columnSTUDNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet4::TableDataTable::TEACHNAMEColumn::get() {
        return this->columnTEACHNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet4::TableDataTable::DISCNAMEColumn::get() {
        return this->columnDISCNAME;
    }
    
    inline ::System::Int32 DataSet4::TableDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline dekan::DataSet4::TableRow^  DataSet4::TableDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<dekan::DataSet4::TableRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet4::TableDataTable::AddTableRow(dekan::DataSet4::TableRow^  row) {
        this->Rows->Add(row);
    }
    
    inline dekan::DataSet4::TableRow^  DataSet4::TableDataTable::AddTableRow(System::Decimal ID_MARK, System::Decimal VALUE_MARK, 
                System::String^  STUDNAME, System::String^  TEACHNAME, System::String^  DISCNAME) {
        dekan::DataSet4::TableRow^  rowTableRow = (cli::safe_cast<dekan::DataSet4::TableRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {ID_MARK, VALUE_MARK, 
            STUDNAME, TEACHNAME, DISCNAME};
        rowTableRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTableRow);
        return rowTableRow;
    }
    
    inline dekan::DataSet4::TableRow^  DataSet4::TableDataTable::FindByID_MARK(System::Decimal ID_MARK) {
        return (cli::safe_cast<dekan::DataSet4::TableRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_MARK})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet4::TableDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet4::TableDataTable::Clone() {
        dekan::DataSet4::TableDataTable^  cln = (cli::safe_cast<dekan::DataSet4::TableDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet4::TableDataTable::CreateInstance() {
        return (gcnew dekan::DataSet4::TableDataTable());
    }
    
    inline ::System::Void DataSet4::TableDataTable::InitVars() {
        this->columnID_MARK = __super::Columns[L"ID_MARK"];
        this->columnVALUE_MARK = __super::Columns[L"VALUE_MARK"];
        this->columnSTUDNAME = __super::Columns[L"STUDNAME"];
        this->columnTEACHNAME = __super::Columns[L"TEACHNAME"];
        this->columnDISCNAME = __super::Columns[L"DISCNAME"];
    }
    
    inline ::System::Void DataSet4::TableDataTable::InitClass() {
        this->columnID_MARK = (gcnew ::System::Data::DataColumn(L"ID_MARK", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_MARK);
        this->columnVALUE_MARK = (gcnew ::System::Data::DataColumn(L"VALUE_MARK", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVALUE_MARK);
        this->columnSTUDNAME = (gcnew ::System::Data::DataColumn(L"STUDNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnSTUDNAME);
        this->columnTEACHNAME = (gcnew ::System::Data::DataColumn(L"TEACHNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnTEACHNAME);
        this->columnDISCNAME = (gcnew ::System::Data::DataColumn(L"DISCNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDISCNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_MARK}, 
                true)));
        this->columnID_MARK->AllowDBNull = false;
        this->columnID_MARK->Unique = true;
        this->columnSTUDNAME->MaxLength = 4000;
        this->columnTEACHNAME->MaxLength = 4000;
        this->columnDISCNAME->MaxLength = 4000;
        this->ExtendedProperties->Add(L"Generator_RowClassName", L"TableRow");
        this->ExtendedProperties->Add(L"Generator_RowEvArgName", L"TableRowChangeEvent");
        this->ExtendedProperties->Add(L"Generator_RowEvHandlerName", L"TableRowChangeEventHandler");
        this->ExtendedProperties->Add(L"Generator_TableClassName", L"TableDataTable");
        this->ExtendedProperties->Add(L"Generator_TablePropName", L"Table");
        this->ExtendedProperties->Add(L"Generator_TableVarName", L"tableTable");
        this->ExtendedProperties->Add(L"Generator_UserTableName", L"Table");
    }
    
    inline dekan::DataSet4::TableRow^  DataSet4::TableDataTable::NewTableRow() {
        return (cli::safe_cast<dekan::DataSet4::TableRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet4::TableDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew dekan::DataSet4::TableRow(builder));
    }
    
    inline ::System::Type^  DataSet4::TableDataTable::GetRowType() {
        return dekan::DataSet4::TableRow::typeid;
    }
    
    inline ::System::Void DataSet4::TableDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TableRowChanged(this, (gcnew dekan::DataSet4::TableRowChangeEvent((cli::safe_cast<dekan::DataSet4::TableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::TableDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TableRowChanging(this, (gcnew dekan::DataSet4::TableRowChangeEvent((cli::safe_cast<dekan::DataSet4::TableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::TableDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TableRowDeleted(this, (gcnew dekan::DataSet4::TableRowChangeEvent((cli::safe_cast<dekan::DataSet4::TableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::TableDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TableRowDeleting(this, (gcnew dekan::DataSet4::TableRowChangeEvent((cli::safe_cast<dekan::DataSet4::TableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet4::TableDataTable::RemoveTableRow(dekan::DataSet4::TableRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet4::TableDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        dekan::DataSet4^  ds = (gcnew dekan::DataSet4());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TableDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet4::TEACHERSRow::TEACHERSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTEACHERS = (cli::safe_cast<dekan::DataSet4::TEACHERSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet4::TEACHERSRow::ID_TEACHER::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableTEACHERS->ID_TEACHERColumn]));
    }
    inline System::Void DataSet4::TEACHERSRow::ID_TEACHER::set(System::Decimal value) {
        this[this->tableTEACHERS->ID_TEACHERColumn] = value;
    }
    
    inline System::String^  DataSet4::TEACHERSRow::FULLNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTEACHERS->FULLNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FULLNAME\' в таблице \'TEACHERS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet4::TEACHERSRow::FULLNAME::set(System::String^  value) {
        this[this->tableTEACHERS->FULLNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet4::TEACHERSRow::IsFULLNAMENull() {
        return this->IsNull(this->tableTEACHERS->FULLNAMEColumn);
    }
    
    inline ::System::Void DataSet4::TEACHERSRow::SetFULLNAMENull() {
        this[this->tableTEACHERS->FULLNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet4::DISCIPLINESRow::DISCIPLINESRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableDISCIPLINES = (cli::safe_cast<dekan::DataSet4::DISCIPLINESDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet4::DISCIPLINESRow::ID_DISCIPLINE::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->ID_DISCIPLINEColumn]));
    }
    inline System::Void DataSet4::DISCIPLINESRow::ID_DISCIPLINE::set(System::Decimal value) {
        this[this->tableDISCIPLINES->ID_DISCIPLINEColumn] = value;
    }
    
    inline System::String^  DataSet4::DISCIPLINESRow::DISCNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDISCIPLINES->DISCNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DISCNAME\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet4::DISCIPLINESRow::DISCNAME::set(System::String^  value) {
        this[this->tableDISCIPLINES->DISCNAMEColumn] = value;
    }
    
    inline System::Decimal DataSet4::DISCIPLINESRow::ID_GROUP::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->ID_GROUPColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_GROUP\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet4::DISCIPLINESRow::ID_GROUP::set(System::Decimal value) {
        this[this->tableDISCIPLINES->ID_GROUPColumn] = value;
    }
    
    inline ::System::Boolean DataSet4::DISCIPLINESRow::IsDISCNAMENull() {
        return this->IsNull(this->tableDISCIPLINES->DISCNAMEColumn);
    }
    
    inline ::System::Void DataSet4::DISCIPLINESRow::SetDISCNAMENull() {
        this[this->tableDISCIPLINES->DISCNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet4::DISCIPLINESRow::IsID_GROUPNull() {
        return this->IsNull(this->tableDISCIPLINES->ID_GROUPColumn);
    }
    
    inline ::System::Void DataSet4::DISCIPLINESRow::SetID_GROUPNull() {
        this[this->tableDISCIPLINES->ID_GROUPColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet4::TableRow::TableRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTable = (cli::safe_cast<dekan::DataSet4::TableDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet4::TableRow::ID_MARK::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableTable->ID_MARKColumn]));
    }
    inline System::Void DataSet4::TableRow::ID_MARK::set(System::Decimal value) {
        this[this->tableTable->ID_MARKColumn] = value;
    }
    
    inline System::Decimal DataSet4::TableRow::VALUE_MARK::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableTable->VALUE_MARKColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'VALUE_MARK\' в таблице \'Table\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet4::TableRow::VALUE_MARK::set(System::Decimal value) {
        this[this->tableTable->VALUE_MARKColumn] = value;
    }
    
    inline System::String^  DataSet4::TableRow::STUDNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTable->STUDNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'STUDNAME\' в таблице \'Table\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet4::TableRow::STUDNAME::set(System::String^  value) {
        this[this->tableTable->STUDNAMEColumn] = value;
    }
    
    inline System::String^  DataSet4::TableRow::TEACHNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTable->TEACHNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'TEACHNAME\' в таблице \'Table\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet4::TableRow::TEACHNAME::set(System::String^  value) {
        this[this->tableTable->TEACHNAMEColumn] = value;
    }
    
    inline System::String^  DataSet4::TableRow::DISCNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTable->DISCNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DISCNAME\' в таблице \'Table\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet4::TableRow::DISCNAME::set(System::String^  value) {
        this[this->tableTable->DISCNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet4::TableRow::IsVALUE_MARKNull() {
        return this->IsNull(this->tableTable->VALUE_MARKColumn);
    }
    
    inline ::System::Void DataSet4::TableRow::SetVALUE_MARKNull() {
        this[this->tableTable->VALUE_MARKColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet4::TableRow::IsSTUDNAMENull() {
        return this->IsNull(this->tableTable->STUDNAMEColumn);
    }
    
    inline ::System::Void DataSet4::TableRow::SetSTUDNAMENull() {
        this[this->tableTable->STUDNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet4::TableRow::IsTEACHNAMENull() {
        return this->IsNull(this->tableTable->TEACHNAMEColumn);
    }
    
    inline ::System::Void DataSet4::TableRow::SetTEACHNAMENull() {
        this[this->tableTable->TEACHNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet4::TableRow::IsDISCNAMENull() {
        return this->IsNull(this->tableTable->DISCNAMEColumn);
    }
    
    inline ::System::Void DataSet4::TableRow::SetDISCNAMENull() {
        this[this->tableTable->DISCNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet4::TEACHERSRowChangeEvent::TEACHERSRowChangeEvent(dekan::DataSet4::TEACHERSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dekan::DataSet4::TEACHERSRow^  DataSet4::TEACHERSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet4::TEACHERSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet4::DISCIPLINESRowChangeEvent::DISCIPLINESRowChangeEvent(dekan::DataSet4::DISCIPLINESRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dekan::DataSet4::DISCIPLINESRow^  DataSet4::DISCIPLINESRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet4::DISCIPLINESRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet4::TableRowChangeEvent::TableRowChangeEvent(dekan::DataSet4::TableRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dekan::DataSet4::TableRow^  DataSet4::TableRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet4::TableRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
