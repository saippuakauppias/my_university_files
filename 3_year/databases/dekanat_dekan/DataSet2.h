#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
namespace dekan {
    using namespace System;
    ref class DataSet2;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"DataSet2"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class DataSet2 : public ::System::Data::DataSet {
        public : ref class VIEW_MARKS_COURSEDataTable;
        public : ref class VIEW_MARKS_COURSERow;
        public : ref class VIEW_MARKS_COURSERowChangeEvent;
        
        private: dekan::DataSet2::VIEW_MARKS_COURSEDataTable^  tableVIEW_MARKS_COURSE;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void VIEW_MARKS_COURSERowChangeEventHandler(::System::Object^  sender, dekan::DataSet2::VIEW_MARKS_COURSERowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet2();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet2(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property dekan::DataSet2::VIEW_MARKS_COURSEDataTable^  VIEW_MARKS_COURSE {
            dekan::DataSet2::VIEW_MARKS_COURSEDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeVIEW_MARKS_COURSE();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class VIEW_MARKS_COURSEDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnCOURSE;
            
            private: ::System::Data::DataColumn^  columnID_GROUP;
            
            private: ::System::Data::DataColumn^  columnGROUPNAME;
            
            private: ::System::Data::DataColumn^  columnFULLNAME;
            
            private: ::System::Data::DataColumn^  columnVALUE_MARK;
            
            private: ::System::Data::DataColumn^  columnDATE_MARK;
            
            private: ::System::Data::DataColumn^  columnDISCNAME;
            
            public: event dekan::DataSet2::VIEW_MARKS_COURSERowChangeEventHandler^  VIEW_MARKS_COURSERowChanging;
            
            public: event dekan::DataSet2::VIEW_MARKS_COURSERowChangeEventHandler^  VIEW_MARKS_COURSERowChanged;
            
            public: event dekan::DataSet2::VIEW_MARKS_COURSERowChangeEventHandler^  VIEW_MARKS_COURSERowDeleting;
            
            public: event dekan::DataSet2::VIEW_MARKS_COURSERowChangeEventHandler^  VIEW_MARKS_COURSERowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            VIEW_MARKS_COURSEDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            VIEW_MARKS_COURSEDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            VIEW_MARKS_COURSEDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  COURSEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_GROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  GROUPNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FULLNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VALUE_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DATE_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DISCNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet2::VIEW_MARKS_COURSERow^  default [::System::Int32 ] {
                dekan::DataSet2::VIEW_MARKS_COURSERow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddVIEW_MARKS_COURSERow(dekan::DataSet2::VIEW_MARKS_COURSERow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet2::VIEW_MARKS_COURSERow^  AddVIEW_MARKS_COURSERow(
                        System::Decimal COURSE, 
                        System::Decimal ID_GROUP, 
                        System::String^  GROUPNAME, 
                        System::String^  FULLNAME, 
                        System::Decimal VALUE_MARK, 
                        System::DateTime DATE_MARK, 
                        System::String^  DISCNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet2::VIEW_MARKS_COURSERow^  NewVIEW_MARKS_COURSERow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveVIEW_MARKS_COURSERow(dekan::DataSet2::VIEW_MARKS_COURSERow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class VIEW_MARKS_COURSERow : public ::System::Data::DataRow {
            
            private: dekan::DataSet2::VIEW_MARKS_COURSEDataTable^  tableVIEW_MARKS_COURSE;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            VIEW_MARKS_COURSERow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal COURSE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_GROUP {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  GROUPNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FULLNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal VALUE_MARK {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime DATE_MARK {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DISCNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCOURSENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCOURSENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsGROUPNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetGROUPNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVALUE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVALUE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDATE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDATE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDISCNAMENull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class VIEW_MARKS_COURSERowChangeEvent : public ::System::EventArgs {
            
            private: dekan::DataSet2::VIEW_MARKS_COURSERow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            VIEW_MARKS_COURSERowChangeEvent(dekan::DataSet2::VIEW_MARKS_COURSERow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet2::VIEW_MARKS_COURSERow^  Row {
                dekan::DataSet2::VIEW_MARKS_COURSERow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace dekan {
    
    
    inline DataSet2::DataSet2() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet2::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline DataSet2::DataSet2(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet2::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"VIEW_MARKS_COURSE"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet2::VIEW_MARKS_COURSEDataTable(ds->Tables[L"VIEW_MARKS_COURSE"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet2::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline dekan::DataSet2::VIEW_MARKS_COURSEDataTable^  DataSet2::VIEW_MARKS_COURSE::get() {
        return this->tableVIEW_MARKS_COURSE;
    }
    
    inline ::System::Data::SchemaSerializationMode DataSet2::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void DataSet2::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  DataSet2::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  DataSet2::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void DataSet2::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  DataSet2::Clone() {
        dekan::DataSet2^  cln = (cli::safe_cast<dekan::DataSet2^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean DataSet2::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean DataSet2::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void DataSet2::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"VIEW_MARKS_COURSE"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet2::VIEW_MARKS_COURSEDataTable(ds->Tables[L"VIEW_MARKS_COURSE"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  DataSet2::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void DataSet2::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void DataSet2::InitVars(::System::Boolean initTable) {
        this->tableVIEW_MARKS_COURSE = (cli::safe_cast<dekan::DataSet2::VIEW_MARKS_COURSEDataTable^  >(__super::Tables[L"VIEW_MARKS_COURSE"]));
        if (initTable == true) {
            if (this->tableVIEW_MARKS_COURSE != nullptr) {
                this->tableVIEW_MARKS_COURSE->InitVars();
            }
        }
    }
    
    inline ::System::Void DataSet2::InitClass() {
        this->DataSetName = L"DataSet2";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/DataSet2.xsd";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableVIEW_MARKS_COURSE = (gcnew dekan::DataSet2::VIEW_MARKS_COURSEDataTable());
        __super::Tables->Add(this->tableVIEW_MARKS_COURSE);
    }
    
    inline ::System::Boolean DataSet2::ShouldSerializeVIEW_MARKS_COURSE() {
        return false;
    }
    
    inline ::System::Void DataSet2::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet2::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        dekan::DataSet2^  ds = (gcnew dekan::DataSet2());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet2::VIEW_MARKS_COURSEDataTable::VIEW_MARKS_COURSEDataTable() {
        this->TableName = L"VIEW_MARKS_COURSE";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet2::VIEW_MARKS_COURSEDataTable::VIEW_MARKS_COURSEDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet2::VIEW_MARKS_COURSEDataTable::VIEW_MARKS_COURSEDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet2::VIEW_MARKS_COURSEDataTable::COURSEColumn::get() {
        return this->columnCOURSE;
    }
    
    inline ::System::Data::DataColumn^  DataSet2::VIEW_MARKS_COURSEDataTable::ID_GROUPColumn::get() {
        return this->columnID_GROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet2::VIEW_MARKS_COURSEDataTable::GROUPNAMEColumn::get() {
        return this->columnGROUPNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet2::VIEW_MARKS_COURSEDataTable::FULLNAMEColumn::get() {
        return this->columnFULLNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet2::VIEW_MARKS_COURSEDataTable::VALUE_MARKColumn::get() {
        return this->columnVALUE_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet2::VIEW_MARKS_COURSEDataTable::DATE_MARKColumn::get() {
        return this->columnDATE_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet2::VIEW_MARKS_COURSEDataTable::DISCNAMEColumn::get() {
        return this->columnDISCNAME;
    }
    
    inline ::System::Int32 DataSet2::VIEW_MARKS_COURSEDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline dekan::DataSet2::VIEW_MARKS_COURSERow^  DataSet2::VIEW_MARKS_COURSEDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<dekan::DataSet2::VIEW_MARKS_COURSERow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSEDataTable::AddVIEW_MARKS_COURSERow(dekan::DataSet2::VIEW_MARKS_COURSERow^  row) {
        this->Rows->Add(row);
    }
    
    inline dekan::DataSet2::VIEW_MARKS_COURSERow^  DataSet2::VIEW_MARKS_COURSEDataTable::AddVIEW_MARKS_COURSERow(
                System::Decimal COURSE, 
                System::Decimal ID_GROUP, 
                System::String^  GROUPNAME, 
                System::String^  FULLNAME, 
                System::Decimal VALUE_MARK, 
                System::DateTime DATE_MARK, 
                System::String^  DISCNAME) {
        dekan::DataSet2::VIEW_MARKS_COURSERow^  rowVIEW_MARKS_COURSERow = (cli::safe_cast<dekan::DataSet2::VIEW_MARKS_COURSERow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {COURSE, ID_GROUP, GROUPNAME, 
            FULLNAME, VALUE_MARK, DATE_MARK, DISCNAME};
        rowVIEW_MARKS_COURSERow->ItemArray = columnValuesArray;
        this->Rows->Add(rowVIEW_MARKS_COURSERow);
        return rowVIEW_MARKS_COURSERow;
    }
    
    inline ::System::Collections::IEnumerator^  DataSet2::VIEW_MARKS_COURSEDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet2::VIEW_MARKS_COURSEDataTable::Clone() {
        dekan::DataSet2::VIEW_MARKS_COURSEDataTable^  cln = (cli::safe_cast<dekan::DataSet2::VIEW_MARKS_COURSEDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet2::VIEW_MARKS_COURSEDataTable::CreateInstance() {
        return (gcnew dekan::DataSet2::VIEW_MARKS_COURSEDataTable());
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSEDataTable::InitVars() {
        this->columnCOURSE = __super::Columns[L"COURSE"];
        this->columnID_GROUP = __super::Columns[L"ID_GROUP"];
        this->columnGROUPNAME = __super::Columns[L"GROUPNAME"];
        this->columnFULLNAME = __super::Columns[L"FULLNAME"];
        this->columnVALUE_MARK = __super::Columns[L"VALUE_MARK"];
        this->columnDATE_MARK = __super::Columns[L"DATE_MARK"];
        this->columnDISCNAME = __super::Columns[L"DISCNAME"];
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSEDataTable::InitClass() {
        this->columnCOURSE = (gcnew ::System::Data::DataColumn(L"COURSE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnCOURSE);
        this->columnID_GROUP = (gcnew ::System::Data::DataColumn(L"ID_GROUP", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_GROUP);
        this->columnGROUPNAME = (gcnew ::System::Data::DataColumn(L"GROUPNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnGROUPNAME);
        this->columnFULLNAME = (gcnew ::System::Data::DataColumn(L"FULLNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFULLNAME);
        this->columnVALUE_MARK = (gcnew ::System::Data::DataColumn(L"VALUE_MARK", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVALUE_MARK);
        this->columnDATE_MARK = (gcnew ::System::Data::DataColumn(L"DATE_MARK", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDATE_MARK);
        this->columnDISCNAME = (gcnew ::System::Data::DataColumn(L"DISCNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDISCNAME);
        this->columnID_GROUP->AllowDBNull = false;
        this->columnGROUPNAME->MaxLength = 4000;
        this->columnFULLNAME->MaxLength = 4000;
        this->columnDISCNAME->MaxLength = 4000;
    }
    
    inline dekan::DataSet2::VIEW_MARKS_COURSERow^  DataSet2::VIEW_MARKS_COURSEDataTable::NewVIEW_MARKS_COURSERow() {
        return (cli::safe_cast<dekan::DataSet2::VIEW_MARKS_COURSERow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet2::VIEW_MARKS_COURSEDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew dekan::DataSet2::VIEW_MARKS_COURSERow(builder));
    }
    
    inline ::System::Type^  DataSet2::VIEW_MARKS_COURSEDataTable::GetRowType() {
        return dekan::DataSet2::VIEW_MARKS_COURSERow::typeid;
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSEDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->VIEW_MARKS_COURSERowChanged(this, (gcnew dekan::DataSet2::VIEW_MARKS_COURSERowChangeEvent((cli::safe_cast<dekan::DataSet2::VIEW_MARKS_COURSERow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSEDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->VIEW_MARKS_COURSERowChanging(this, (gcnew dekan::DataSet2::VIEW_MARKS_COURSERowChangeEvent((cli::safe_cast<dekan::DataSet2::VIEW_MARKS_COURSERow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSEDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->VIEW_MARKS_COURSERowDeleted(this, (gcnew dekan::DataSet2::VIEW_MARKS_COURSERowChangeEvent((cli::safe_cast<dekan::DataSet2::VIEW_MARKS_COURSERow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSEDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->VIEW_MARKS_COURSERowDeleting(this, (gcnew dekan::DataSet2::VIEW_MARKS_COURSERowChangeEvent((cli::safe_cast<dekan::DataSet2::VIEW_MARKS_COURSERow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSEDataTable::RemoveVIEW_MARKS_COURSERow(dekan::DataSet2::VIEW_MARKS_COURSERow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet2::VIEW_MARKS_COURSEDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        dekan::DataSet2^  ds = (gcnew dekan::DataSet2());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"VIEW_MARKS_COURSEDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet2::VIEW_MARKS_COURSERow::VIEW_MARKS_COURSERow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableVIEW_MARKS_COURSE = (cli::safe_cast<dekan::DataSet2::VIEW_MARKS_COURSEDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet2::VIEW_MARKS_COURSERow::COURSE::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableVIEW_MARKS_COURSE->COURSEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'COURSE\' в таблице \'VIEW_MARKS_COURSE\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet2::VIEW_MARKS_COURSERow::COURSE::set(System::Decimal value) {
        this[this->tableVIEW_MARKS_COURSE->COURSEColumn] = value;
    }
    
    inline System::Decimal DataSet2::VIEW_MARKS_COURSERow::ID_GROUP::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableVIEW_MARKS_COURSE->ID_GROUPColumn]));
    }
    inline System::Void DataSet2::VIEW_MARKS_COURSERow::ID_GROUP::set(System::Decimal value) {
        this[this->tableVIEW_MARKS_COURSE->ID_GROUPColumn] = value;
    }
    
    inline System::String^  DataSet2::VIEW_MARKS_COURSERow::GROUPNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVIEW_MARKS_COURSE->GROUPNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'GROUPNAME\' в таблице \'VIEW_MARKS_COURSE\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet2::VIEW_MARKS_COURSERow::GROUPNAME::set(System::String^  value) {
        this[this->tableVIEW_MARKS_COURSE->GROUPNAMEColumn] = value;
    }
    
    inline System::String^  DataSet2::VIEW_MARKS_COURSERow::FULLNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVIEW_MARKS_COURSE->FULLNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FULLNAME\' в таблице \'VIEW_MARKS_COURSE\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet2::VIEW_MARKS_COURSERow::FULLNAME::set(System::String^  value) {
        this[this->tableVIEW_MARKS_COURSE->FULLNAMEColumn] = value;
    }
    
    inline System::Decimal DataSet2::VIEW_MARKS_COURSERow::VALUE_MARK::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableVIEW_MARKS_COURSE->VALUE_MARKColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'VALUE_MARK\' в таблице \'VIEW_MARKS_COURSE\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet2::VIEW_MARKS_COURSERow::VALUE_MARK::set(System::Decimal value) {
        this[this->tableVIEW_MARKS_COURSE->VALUE_MARKColumn] = value;
    }
    
    inline System::DateTime DataSet2::VIEW_MARKS_COURSERow::DATE_MARK::get() {
        try {
            return (cli::safe_cast<::System::DateTime >(this[this->tableVIEW_MARKS_COURSE->DATE_MARKColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DATE_MARK\' в таблице \'VIEW_MARKS_COURSE\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet2::VIEW_MARKS_COURSERow::DATE_MARK::set(System::DateTime value) {
        this[this->tableVIEW_MARKS_COURSE->DATE_MARKColumn] = value;
    }
    
    inline System::String^  DataSet2::VIEW_MARKS_COURSERow::DISCNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVIEW_MARKS_COURSE->DISCNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DISCNAME\' в таблице \'VIEW_MARKS_COURSE\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet2::VIEW_MARKS_COURSERow::DISCNAME::set(System::String^  value) {
        this[this->tableVIEW_MARKS_COURSE->DISCNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet2::VIEW_MARKS_COURSERow::IsCOURSENull() {
        return this->IsNull(this->tableVIEW_MARKS_COURSE->COURSEColumn);
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSERow::SetCOURSENull() {
        this[this->tableVIEW_MARKS_COURSE->COURSEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet2::VIEW_MARKS_COURSERow::IsGROUPNAMENull() {
        return this->IsNull(this->tableVIEW_MARKS_COURSE->GROUPNAMEColumn);
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSERow::SetGROUPNAMENull() {
        this[this->tableVIEW_MARKS_COURSE->GROUPNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet2::VIEW_MARKS_COURSERow::IsFULLNAMENull() {
        return this->IsNull(this->tableVIEW_MARKS_COURSE->FULLNAMEColumn);
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSERow::SetFULLNAMENull() {
        this[this->tableVIEW_MARKS_COURSE->FULLNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet2::VIEW_MARKS_COURSERow::IsVALUE_MARKNull() {
        return this->IsNull(this->tableVIEW_MARKS_COURSE->VALUE_MARKColumn);
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSERow::SetVALUE_MARKNull() {
        this[this->tableVIEW_MARKS_COURSE->VALUE_MARKColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet2::VIEW_MARKS_COURSERow::IsDATE_MARKNull() {
        return this->IsNull(this->tableVIEW_MARKS_COURSE->DATE_MARKColumn);
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSERow::SetDATE_MARKNull() {
        this[this->tableVIEW_MARKS_COURSE->DATE_MARKColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet2::VIEW_MARKS_COURSERow::IsDISCNAMENull() {
        return this->IsNull(this->tableVIEW_MARKS_COURSE->DISCNAMEColumn);
    }
    
    inline ::System::Void DataSet2::VIEW_MARKS_COURSERow::SetDISCNAMENull() {
        this[this->tableVIEW_MARKS_COURSE->DISCNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet2::VIEW_MARKS_COURSERowChangeEvent::VIEW_MARKS_COURSERowChangeEvent(dekan::DataSet2::VIEW_MARKS_COURSERow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dekan::DataSet2::VIEW_MARKS_COURSERow^  DataSet2::VIEW_MARKS_COURSERowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet2::VIEW_MARKS_COURSERowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
