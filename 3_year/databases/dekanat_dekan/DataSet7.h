#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
namespace dekan {
    using namespace System;
    ref class DataSet7;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"DataSet7"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class DataSet7 : public ::System::Data::DataSet {
        public : ref class TEACHERSDataTable;
        public : ref class TEACHERSRow;
        public : ref class TEACHERSRowChangeEvent;
        
        private: dekan::DataSet7::TEACHERSDataTable^  tableTEACHERS;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void TEACHERSRowChangeEventHandler(::System::Object^  sender, dekan::DataSet7::TEACHERSRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet7();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet7(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property dekan::DataSet7::TEACHERSDataTable^  TEACHERS {
            dekan::DataSet7::TEACHERSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeTEACHERS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TEACHERSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_TEACHER;
            
            private: ::System::Data::DataColumn^  columnLAST_NAME;
            
            private: ::System::Data::DataColumn^  columnFIRST_NAME;
            
            private: ::System::Data::DataColumn^  columnTHIRD_NAME;
            
            private: ::System::Data::DataColumn^  columnPASSWOD;
            
            public: event dekan::DataSet7::TEACHERSRowChangeEventHandler^  TEACHERSRowChanging;
            
            public: event dekan::DataSet7::TEACHERSRowChangeEventHandler^  TEACHERSRowChanged;
            
            public: event dekan::DataSet7::TEACHERSRowChangeEventHandler^  TEACHERSRowDeleting;
            
            public: event dekan::DataSet7::TEACHERSRowChangeEventHandler^  TEACHERSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_TEACHERColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  LAST_NAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FIRST_NAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  THIRD_NAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PASSWODColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet7::TEACHERSRow^  default [::System::Int32 ] {
                dekan::DataSet7::TEACHERSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddTEACHERSRow(dekan::DataSet7::TEACHERSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet7::TEACHERSRow^  AddTEACHERSRow(System::String^  LAST_NAME, System::String^  FIRST_NAME, System::String^  THIRD_NAME, 
                        System::String^  PASSWOD);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet7::TEACHERSRow^  FindByID_TEACHER(System::Decimal ID_TEACHER);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            dekan::DataSet7::TEACHERSRow^  NewTEACHERSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveTEACHERSRow(dekan::DataSet7::TEACHERSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERSRow : public ::System::Data::DataRow {
            
            private: dekan::DataSet7::TEACHERSDataTable^  tableTEACHERS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_TEACHER {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  LAST_NAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FIRST_NAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  THIRD_NAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PASSWOD {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsLAST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetLAST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFIRST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFIRST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTHIRD_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTHIRD_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPASSWODNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPASSWODNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERSRowChangeEvent : public ::System::EventArgs {
            
            private: dekan::DataSet7::TEACHERSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSRowChangeEvent(dekan::DataSet7::TEACHERSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property dekan::DataSet7::TEACHERSRow^  Row {
                dekan::DataSet7::TEACHERSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace dekan {
    
    
    inline DataSet7::DataSet7() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet7::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline DataSet7::DataSet7(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet7::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"TEACHERS"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet7::TEACHERSDataTable(ds->Tables[L"TEACHERS"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &dekan::DataSet7::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline dekan::DataSet7::TEACHERSDataTable^  DataSet7::TEACHERS::get() {
        return this->tableTEACHERS;
    }
    
    inline ::System::Data::SchemaSerializationMode DataSet7::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void DataSet7::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  DataSet7::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  DataSet7::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void DataSet7::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  DataSet7::Clone() {
        dekan::DataSet7^  cln = (cli::safe_cast<dekan::DataSet7^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean DataSet7::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean DataSet7::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void DataSet7::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"TEACHERS"] != nullptr) {
                __super::Tables->Add((gcnew dekan::DataSet7::TEACHERSDataTable(ds->Tables[L"TEACHERS"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  DataSet7::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void DataSet7::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void DataSet7::InitVars(::System::Boolean initTable) {
        this->tableTEACHERS = (cli::safe_cast<dekan::DataSet7::TEACHERSDataTable^  >(__super::Tables[L"TEACHERS"]));
        if (initTable == true) {
            if (this->tableTEACHERS != nullptr) {
                this->tableTEACHERS->InitVars();
            }
        }
    }
    
    inline ::System::Void DataSet7::InitClass() {
        this->DataSetName = L"DataSet7";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/DataSet7.xsd";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableTEACHERS = (gcnew dekan::DataSet7::TEACHERSDataTable());
        __super::Tables->Add(this->tableTEACHERS);
    }
    
    inline ::System::Boolean DataSet7::ShouldSerializeTEACHERS() {
        return false;
    }
    
    inline ::System::Void DataSet7::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet7::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        dekan::DataSet7^  ds = (gcnew dekan::DataSet7());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet7::TEACHERSDataTable::TEACHERSDataTable() {
        this->TableName = L"TEACHERS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet7::TEACHERSDataTable::TEACHERSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet7::TEACHERSDataTable::TEACHERSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet7::TEACHERSDataTable::ID_TEACHERColumn::get() {
        return this->columnID_TEACHER;
    }
    
    inline ::System::Data::DataColumn^  DataSet7::TEACHERSDataTable::LAST_NAMEColumn::get() {
        return this->columnLAST_NAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet7::TEACHERSDataTable::FIRST_NAMEColumn::get() {
        return this->columnFIRST_NAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet7::TEACHERSDataTable::THIRD_NAMEColumn::get() {
        return this->columnTHIRD_NAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet7::TEACHERSDataTable::PASSWODColumn::get() {
        return this->columnPASSWOD;
    }
    
    inline ::System::Int32 DataSet7::TEACHERSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline dekan::DataSet7::TEACHERSRow^  DataSet7::TEACHERSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<dekan::DataSet7::TEACHERSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet7::TEACHERSDataTable::AddTEACHERSRow(dekan::DataSet7::TEACHERSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline dekan::DataSet7::TEACHERSRow^  DataSet7::TEACHERSDataTable::AddTEACHERSRow(System::String^  LAST_NAME, System::String^  FIRST_NAME, 
                System::String^  THIRD_NAME, System::String^  PASSWOD) {
        dekan::DataSet7::TEACHERSRow^  rowTEACHERSRow = (cli::safe_cast<dekan::DataSet7::TEACHERSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {nullptr, LAST_NAME, 
            FIRST_NAME, THIRD_NAME, PASSWOD};
        rowTEACHERSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTEACHERSRow);
        return rowTEACHERSRow;
    }
    
    inline dekan::DataSet7::TEACHERSRow^  DataSet7::TEACHERSDataTable::FindByID_TEACHER(System::Decimal ID_TEACHER) {
        return (cli::safe_cast<dekan::DataSet7::TEACHERSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_TEACHER})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet7::TEACHERSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet7::TEACHERSDataTable::Clone() {
        dekan::DataSet7::TEACHERSDataTable^  cln = (cli::safe_cast<dekan::DataSet7::TEACHERSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet7::TEACHERSDataTable::CreateInstance() {
        return (gcnew dekan::DataSet7::TEACHERSDataTable());
    }
    
    inline ::System::Void DataSet7::TEACHERSDataTable::InitVars() {
        this->columnID_TEACHER = __super::Columns[L"ID_TEACHER"];
        this->columnLAST_NAME = __super::Columns[L"LAST_NAME"];
        this->columnFIRST_NAME = __super::Columns[L"FIRST_NAME"];
        this->columnTHIRD_NAME = __super::Columns[L"THIRD_NAME"];
        this->columnPASSWOD = __super::Columns[L"PASSWOD"];
    }
    
    inline ::System::Void DataSet7::TEACHERSDataTable::InitClass() {
        this->columnID_TEACHER = (gcnew ::System::Data::DataColumn(L"ID_TEACHER", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_TEACHER);
        this->columnLAST_NAME = (gcnew ::System::Data::DataColumn(L"LAST_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnLAST_NAME);
        this->columnFIRST_NAME = (gcnew ::System::Data::DataColumn(L"FIRST_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFIRST_NAME);
        this->columnTHIRD_NAME = (gcnew ::System::Data::DataColumn(L"THIRD_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnTHIRD_NAME);
        this->columnPASSWOD = (gcnew ::System::Data::DataColumn(L"PASSWOD", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPASSWOD);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_TEACHER}, 
                true)));
        this->columnID_TEACHER->AutoIncrement = true;
        this->columnID_TEACHER->AutoIncrementSeed = 1;
        this->columnID_TEACHER->AllowDBNull = false;
        this->columnID_TEACHER->Unique = true;
        this->columnLAST_NAME->MaxLength = 50;
        this->columnFIRST_NAME->MaxLength = 50;
        this->columnTHIRD_NAME->MaxLength = 50;
        this->columnPASSWOD->MaxLength = 32;
    }
    
    inline dekan::DataSet7::TEACHERSRow^  DataSet7::TEACHERSDataTable::NewTEACHERSRow() {
        return (cli::safe_cast<dekan::DataSet7::TEACHERSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet7::TEACHERSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew dekan::DataSet7::TEACHERSRow(builder));
    }
    
    inline ::System::Type^  DataSet7::TEACHERSDataTable::GetRowType() {
        return dekan::DataSet7::TEACHERSRow::typeid;
    }
    
    inline ::System::Void DataSet7::TEACHERSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TEACHERSRowChanged(this, (gcnew dekan::DataSet7::TEACHERSRowChangeEvent((cli::safe_cast<dekan::DataSet7::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet7::TEACHERSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TEACHERSRowChanging(this, (gcnew dekan::DataSet7::TEACHERSRowChangeEvent((cli::safe_cast<dekan::DataSet7::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet7::TEACHERSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TEACHERSRowDeleted(this, (gcnew dekan::DataSet7::TEACHERSRowChangeEvent((cli::safe_cast<dekan::DataSet7::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet7::TEACHERSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TEACHERSRowDeleting(this, (gcnew dekan::DataSet7::TEACHERSRowChangeEvent((cli::safe_cast<dekan::DataSet7::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet7::TEACHERSDataTable::RemoveTEACHERSRow(dekan::DataSet7::TEACHERSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet7::TEACHERSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        dekan::DataSet7^  ds = (gcnew dekan::DataSet7());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TEACHERSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet7::TEACHERSRow::TEACHERSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTEACHERS = (cli::safe_cast<dekan::DataSet7::TEACHERSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet7::TEACHERSRow::ID_TEACHER::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableTEACHERS->ID_TEACHERColumn]));
    }
    inline System::Void DataSet7::TEACHERSRow::ID_TEACHER::set(System::Decimal value) {
        this[this->tableTEACHERS->ID_TEACHERColumn] = value;
    }
    
    inline System::String^  DataSet7::TEACHERSRow::LAST_NAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTEACHERS->LAST_NAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'LAST_NAME\' в таблице \'TEACHERS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet7::TEACHERSRow::LAST_NAME::set(System::String^  value) {
        this[this->tableTEACHERS->LAST_NAMEColumn] = value;
    }
    
    inline System::String^  DataSet7::TEACHERSRow::FIRST_NAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTEACHERS->FIRST_NAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FIRST_NAME\' в таблице \'TEACHERS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet7::TEACHERSRow::FIRST_NAME::set(System::String^  value) {
        this[this->tableTEACHERS->FIRST_NAMEColumn] = value;
    }
    
    inline System::String^  DataSet7::TEACHERSRow::THIRD_NAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTEACHERS->THIRD_NAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'THIRD_NAME\' в таблице \'TEACHERS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet7::TEACHERSRow::THIRD_NAME::set(System::String^  value) {
        this[this->tableTEACHERS->THIRD_NAMEColumn] = value;
    }
    
    inline System::String^  DataSet7::TEACHERSRow::PASSWOD::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTEACHERS->PASSWODColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'PASSWOD\' в таблице \'TEACHERS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet7::TEACHERSRow::PASSWOD::set(System::String^  value) {
        this[this->tableTEACHERS->PASSWODColumn] = value;
    }
    
    inline ::System::Boolean DataSet7::TEACHERSRow::IsLAST_NAMENull() {
        return this->IsNull(this->tableTEACHERS->LAST_NAMEColumn);
    }
    
    inline ::System::Void DataSet7::TEACHERSRow::SetLAST_NAMENull() {
        this[this->tableTEACHERS->LAST_NAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet7::TEACHERSRow::IsFIRST_NAMENull() {
        return this->IsNull(this->tableTEACHERS->FIRST_NAMEColumn);
    }
    
    inline ::System::Void DataSet7::TEACHERSRow::SetFIRST_NAMENull() {
        this[this->tableTEACHERS->FIRST_NAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet7::TEACHERSRow::IsTHIRD_NAMENull() {
        return this->IsNull(this->tableTEACHERS->THIRD_NAMEColumn);
    }
    
    inline ::System::Void DataSet7::TEACHERSRow::SetTHIRD_NAMENull() {
        this[this->tableTEACHERS->THIRD_NAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet7::TEACHERSRow::IsPASSWODNull() {
        return this->IsNull(this->tableTEACHERS->PASSWODColumn);
    }
    
    inline ::System::Void DataSet7::TEACHERSRow::SetPASSWODNull() {
        this[this->tableTEACHERS->PASSWODColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet7::TEACHERSRowChangeEvent::TEACHERSRowChangeEvent(dekan::DataSet7::TEACHERSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dekan::DataSet7::TEACHERSRow^  DataSet7::TEACHERSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet7::TEACHERSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
