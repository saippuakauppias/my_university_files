#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
namespace worker {
    using namespace System;
    ref class DataSet1;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"DataSet1"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class DataSet1 : public ::System::Data::DataSet {
        public : ref class PROFESSIONSDataTable;
        public : ref class GROUPSDataTable;
        public : ref class STATUSESDataTable;
        public : ref class STUDENTSDataTable;
        public : ref class TEACHERSDataTable;
        public : ref class TEACHERS2DISCIPLINESDataTable;
        public : ref class TYPESDataTable;
        public : ref class DISCIPLINESDataTable;
        public : ref class MARKSDataTable;
        public : ref class DISCNAMESDataTable;
        public : ref class PROFESSIONSRow;
        public : ref class GROUPSRow;
        public : ref class STATUSESRow;
        public : ref class STUDENTSRow;
        public : ref class TEACHERSRow;
        public : ref class TEACHERS2DISCIPLINESRow;
        public : ref class TYPESRow;
        public : ref class DISCIPLINESRow;
        public : ref class MARKSRow;
        public : ref class DISCNAMESRow;
        public : ref class PROFESSIONSRowChangeEvent;
        public : ref class GROUPSRowChangeEvent;
        public : ref class STATUSESRowChangeEvent;
        public : ref class STUDENTSRowChangeEvent;
        public : ref class TEACHERSRowChangeEvent;
        public : ref class TEACHERS2DISCIPLINESRowChangeEvent;
        public : ref class TYPESRowChangeEvent;
        public : ref class DISCIPLINESRowChangeEvent;
        public : ref class MARKSRowChangeEvent;
        public : ref class DISCNAMESRowChangeEvent;
        
        private: worker::DataSet1::PROFESSIONSDataTable^  tablePROFESSIONS;
        
        private: worker::DataSet1::GROUPSDataTable^  tableGROUPS;
        
        private: worker::DataSet1::STATUSESDataTable^  tableSTATUSES;
        
        private: worker::DataSet1::STUDENTSDataTable^  tableSTUDENTS;
        
        private: worker::DataSet1::TEACHERSDataTable^  tableTEACHERS;
        
        private: worker::DataSet1::TEACHERS2DISCIPLINESDataTable^  tableTEACHERS2DISCIPLINES;
        
        private: worker::DataSet1::TYPESDataTable^  tableTYPES;
        
        private: worker::DataSet1::DISCIPLINESDataTable^  tableDISCIPLINES;
        
        private: worker::DataSet1::MARKSDataTable^  tableMARKS;
        
        private: worker::DataSet1::DISCNAMESDataTable^  tableDISCNAMES;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void PROFESSIONSRowChangeEventHandler(::System::Object^  sender, worker::DataSet1::PROFESSIONSRowChangeEvent^  e);
        
        public : delegate System::Void GROUPSRowChangeEventHandler(::System::Object^  sender, worker::DataSet1::GROUPSRowChangeEvent^  e);
        
        public : delegate System::Void STATUSESRowChangeEventHandler(::System::Object^  sender, worker::DataSet1::STATUSESRowChangeEvent^  e);
        
        public : delegate System::Void STUDENTSRowChangeEventHandler(::System::Object^  sender, worker::DataSet1::STUDENTSRowChangeEvent^  e);
        
        public : delegate System::Void TEACHERSRowChangeEventHandler(::System::Object^  sender, worker::DataSet1::TEACHERSRowChangeEvent^  e);
        
        public : delegate System::Void TEACHERS2DISCIPLINESRowChangeEventHandler(::System::Object^  sender, worker::DataSet1::TEACHERS2DISCIPLINESRowChangeEvent^  e);
        
        public : delegate System::Void TYPESRowChangeEventHandler(::System::Object^  sender, worker::DataSet1::TYPESRowChangeEvent^  e);
        
        public : delegate System::Void DISCIPLINESRowChangeEventHandler(::System::Object^  sender, worker::DataSet1::DISCIPLINESRowChangeEvent^  e);
        
        public : delegate System::Void MARKSRowChangeEventHandler(::System::Object^  sender, worker::DataSet1::MARKSRowChangeEvent^  e);
        
        public : delegate System::Void DISCNAMESRowChangeEventHandler(::System::Object^  sender, worker::DataSet1::DISCNAMESRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet1();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DataSet1(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property worker::DataSet1::PROFESSIONSDataTable^  PROFESSIONS {
            worker::DataSet1::PROFESSIONSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property worker::DataSet1::GROUPSDataTable^  GROUPS {
            worker::DataSet1::GROUPSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property worker::DataSet1::STATUSESDataTable^  STATUSES {
            worker::DataSet1::STATUSESDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property worker::DataSet1::STUDENTSDataTable^  STUDENTS {
            worker::DataSet1::STUDENTSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property worker::DataSet1::TEACHERSDataTable^  TEACHERS {
            worker::DataSet1::TEACHERSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property worker::DataSet1::TEACHERS2DISCIPLINESDataTable^  TEACHERS2DISCIPLINES {
            worker::DataSet1::TEACHERS2DISCIPLINESDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property worker::DataSet1::TYPESDataTable^  TYPES {
            worker::DataSet1::TYPESDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property worker::DataSet1::DISCIPLINESDataTable^  DISCIPLINES {
            worker::DataSet1::DISCIPLINESDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property worker::DataSet1::MARKSDataTable^  MARKS {
            worker::DataSet1::MARKSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property worker::DataSet1::DISCNAMESDataTable^  DISCNAMES {
            worker::DataSet1::DISCNAMESDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializePROFESSIONS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeGROUPS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeSTATUSES();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeSTUDENTS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeTEACHERS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeTEACHERS2DISCIPLINES();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeTYPES();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeDISCIPLINES();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeMARKS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeDISCNAMES();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class PROFESSIONSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_PROFESSION;
            
            private: ::System::Data::DataColumn^  columnNAME_PROFESSION;
            
            public: event worker::DataSet1::PROFESSIONSRowChangeEventHandler^  PROFESSIONSRowChanging;
            
            public: event worker::DataSet1::PROFESSIONSRowChangeEventHandler^  PROFESSIONSRowChanged;
            
            public: event worker::DataSet1::PROFESSIONSRowChangeEventHandler^  PROFESSIONSRowDeleting;
            
            public: event worker::DataSet1::PROFESSIONSRowChangeEventHandler^  PROFESSIONSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PROFESSIONSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PROFESSIONSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PROFESSIONSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_PROFESSIONColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  NAME_PROFESSIONColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::PROFESSIONSRow^  default [::System::Int32 ] {
                worker::DataSet1::PROFESSIONSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddPROFESSIONSRow(worker::DataSet1::PROFESSIONSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::PROFESSIONSRow^  AddPROFESSIONSRow(System::String^  NAME_PROFESSION);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::PROFESSIONSRow^  FindByID_PROFESSION(System::Decimal ID_PROFESSION);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::PROFESSIONSRow^  NewPROFESSIONSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovePROFESSIONSRow(worker::DataSet1::PROFESSIONSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class GROUPSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_GROUP;
            
            private: ::System::Data::DataColumn^  columnNAME_GROUP;
            
            private: ::System::Data::DataColumn^  columnCOURSE;
            
            private: ::System::Data::DataColumn^  columnID_PROFESSION;
            
            private: ::System::Data::DataColumn^  columnSUBGROUP;
            
            private: ::System::Data::DataColumn^  columnGROUPNAME;
            
            public: event worker::DataSet1::GROUPSRowChangeEventHandler^  GROUPSRowChanging;
            
            public: event worker::DataSet1::GROUPSRowChangeEventHandler^  GROUPSRowChanged;
            
            public: event worker::DataSet1::GROUPSRowChangeEventHandler^  GROUPSRowDeleting;
            
            public: event worker::DataSet1::GROUPSRowChangeEventHandler^  GROUPSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_GROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  NAME_GROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  COURSEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_PROFESSIONColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  SUBGROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  GROUPNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::GROUPSRow^  default [::System::Int32 ] {
                worker::DataSet1::GROUPSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddGROUPSRow(worker::DataSet1::GROUPSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::GROUPSRow^  AddGROUPSRow(System::String^  NAME_GROUP, System::Decimal COURSE, System::Decimal ID_PROFESSION, 
                        System::Decimal SUBGROUP, System::String^  GROUPNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::GROUPSRow^  FindByID_GROUP(System::Decimal ID_GROUP);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::GROUPSRow^  NewGROUPSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveGROUPSRow(worker::DataSet1::GROUPSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class STATUSESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_STATUS;
            
            private: ::System::Data::DataColumn^  columnVALUE_STATUS;
            
            public: event worker::DataSet1::STATUSESRowChangeEventHandler^  STATUSESRowChanging;
            
            public: event worker::DataSet1::STATUSESRowChangeEventHandler^  STATUSESRowChanged;
            
            public: event worker::DataSet1::STATUSESRowChangeEventHandler^  STATUSESRowDeleting;
            
            public: event worker::DataSet1::STATUSESRowChangeEventHandler^  STATUSESRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STATUSESDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STATUSESDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STATUSESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_STATUSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VALUE_STATUSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::STATUSESRow^  default [::System::Int32 ] {
                worker::DataSet1::STATUSESRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddSTATUSESRow(worker::DataSet1::STATUSESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::STATUSESRow^  AddSTATUSESRow(System::Decimal ID_STATUS, System::String^  VALUE_STATUS);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::STATUSESRow^  FindByID_STATUS(System::Decimal ID_STATUS);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::STATUSESRow^  NewSTATUSESRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveSTATUSESRow(worker::DataSet1::STATUSESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class STUDENTSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_STUDENT;
            
            private: ::System::Data::DataColumn^  columnLAST_NAME;
            
            private: ::System::Data::DataColumn^  columnFIRST_NAME;
            
            private: ::System::Data::DataColumn^  columnTHIRD_NAME;
            
            private: ::System::Data::DataColumn^  columnBIRTHDAY;
            
            private: ::System::Data::DataColumn^  columnEXPIRY_STATUS;
            
            private: ::System::Data::DataColumn^  columnENTER_DATE;
            
            private: ::System::Data::DataColumn^  columnID_STATUS;
            
            private: ::System::Data::DataColumn^  columnID_GROUP;
            
            private: ::System::Data::DataColumn^  columnFULLNAME;
            
            public: event worker::DataSet1::STUDENTSRowChangeEventHandler^  STUDENTSRowChanging;
            
            public: event worker::DataSet1::STUDENTSRowChangeEventHandler^  STUDENTSRowChanged;
            
            public: event worker::DataSet1::STUDENTSRowChangeEventHandler^  STUDENTSRowDeleting;
            
            public: event worker::DataSet1::STUDENTSRowChangeEventHandler^  STUDENTSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STUDENTSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STUDENTSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STUDENTSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_STUDENTColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  LAST_NAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FIRST_NAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  THIRD_NAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  BIRTHDAYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  EXPIRY_STATUSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ENTER_DATEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_STATUSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_GROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FULLNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::STUDENTSRow^  default [::System::Int32 ] {
                worker::DataSet1::STUDENTSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddSTUDENTSRow(worker::DataSet1::STUDENTSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::STUDENTSRow^  AddSTUDENTSRow(
                        System::String^  LAST_NAME, 
                        System::String^  FIRST_NAME, 
                        System::String^  THIRD_NAME, 
                        System::DateTime BIRTHDAY, 
                        System::DateTime EXPIRY_STATUS, 
                        System::DateTime ENTER_DATE, 
                        System::Decimal ID_STATUS, 
                        System::Decimal ID_GROUP, 
                        System::String^  FULLNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::STUDENTSRow^  FindByID_STUDENT(System::Decimal ID_STUDENT);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::STUDENTSRow^  NewSTUDENTSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveSTUDENTSRow(worker::DataSet1::STUDENTSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TEACHERSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_TEACHER;
            
            private: ::System::Data::DataColumn^  columnLAST_NAME;
            
            private: ::System::Data::DataColumn^  columnFIRST_NAME;
            
            private: ::System::Data::DataColumn^  columnTHIRD_NAME;
            
            private: ::System::Data::DataColumn^  columnFULLNAME;
            
            public: event worker::DataSet1::TEACHERSRowChangeEventHandler^  TEACHERSRowChanging;
            
            public: event worker::DataSet1::TEACHERSRowChangeEventHandler^  TEACHERSRowChanged;
            
            public: event worker::DataSet1::TEACHERSRowChangeEventHandler^  TEACHERSRowDeleting;
            
            public: event worker::DataSet1::TEACHERSRowChangeEventHandler^  TEACHERSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_TEACHERColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  LAST_NAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FIRST_NAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  THIRD_NAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FULLNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::TEACHERSRow^  default [::System::Int32 ] {
                worker::DataSet1::TEACHERSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddTEACHERSRow(worker::DataSet1::TEACHERSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::TEACHERSRow^  AddTEACHERSRow(System::String^  LAST_NAME, System::String^  FIRST_NAME, System::String^  THIRD_NAME, 
                        System::String^  FULLNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::TEACHERSRow^  FindByID_TEACHER(System::Decimal ID_TEACHER);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::TEACHERSRow^  NewTEACHERSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveTEACHERSRow(worker::DataSet1::TEACHERSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TEACHERS2DISCIPLINESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnTEACHERS_ID_TEACHER;
            
            private: ::System::Data::DataColumn^  columnDISCIPLINES_ID_DISCIPLINE;
            
            public: event worker::DataSet1::TEACHERS2DISCIPLINESRowChangeEventHandler^  TEACHERS2DISCIPLINESRowChanging;
            
            public: event worker::DataSet1::TEACHERS2DISCIPLINESRowChangeEventHandler^  TEACHERS2DISCIPLINESRowChanged;
            
            public: event worker::DataSet1::TEACHERS2DISCIPLINESRowChangeEventHandler^  TEACHERS2DISCIPLINESRowDeleting;
            
            public: event worker::DataSet1::TEACHERS2DISCIPLINESRowChangeEventHandler^  TEACHERS2DISCIPLINESRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERS2DISCIPLINESDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERS2DISCIPLINESDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERS2DISCIPLINESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TEACHERS_ID_TEACHERColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DISCIPLINES_ID_DISCIPLINEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::TEACHERS2DISCIPLINESRow^  default [::System::Int32 ] {
                worker::DataSet1::TEACHERS2DISCIPLINESRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddTEACHERS2DISCIPLINESRow(worker::DataSet1::TEACHERS2DISCIPLINESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::TEACHERS2DISCIPLINESRow^  AddTEACHERS2DISCIPLINESRow(System::Decimal TEACHERS_ID_TEACHER, System::Decimal DISCIPLINES_ID_DISCIPLINE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::TEACHERS2DISCIPLINESRow^  FindByTEACHERS_ID_TEACHERDISCIPLINES_ID_DISCIPLINE(System::Decimal TEACHERS_ID_TEACHER, 
                        System::Decimal DISCIPLINES_ID_DISCIPLINE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::TEACHERS2DISCIPLINESRow^  NewTEACHERS2DISCIPLINESRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveTEACHERS2DISCIPLINESRow(worker::DataSet1::TEACHERS2DISCIPLINESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TYPESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_TYPE;
            
            private: ::System::Data::DataColumn^  columnVALUE_TYPE;
            
            public: event worker::DataSet1::TYPESRowChangeEventHandler^  TYPESRowChanging;
            
            public: event worker::DataSet1::TYPESRowChangeEventHandler^  TYPESRowChanged;
            
            public: event worker::DataSet1::TYPESRowChangeEventHandler^  TYPESRowDeleting;
            
            public: event worker::DataSet1::TYPESRowChangeEventHandler^  TYPESRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TYPESDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TYPESDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TYPESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_TYPEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VALUE_TYPEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::TYPESRow^  default [::System::Int32 ] {
                worker::DataSet1::TYPESRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddTYPESRow(worker::DataSet1::TYPESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::TYPESRow^  AddTYPESRow(System::Decimal ID_TYPE, System::String^  VALUE_TYPE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::TYPESRow^  FindByID_TYPE(System::Decimal ID_TYPE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::TYPESRow^  NewTYPESRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveTYPESRow(worker::DataSet1::TYPESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class DISCIPLINESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_DISCIPLINE;
            
            private: ::System::Data::DataColumn^  columnNUMBER_HOURS;
            
            private: ::System::Data::DataColumn^  columnID_GROUP;
            
            private: ::System::Data::DataColumn^  columnID_TYPE;
            
            private: ::System::Data::DataColumn^  columnID_DISCNAME;
            
            private: ::System::Data::DataColumn^  columnDISCNAME;
            
            private: ::System::Data::DataColumn^  columnDISCNAMEWITHGROUPNAME;
            
            public: event worker::DataSet1::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowChanging;
            
            public: event worker::DataSet1::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowChanged;
            
            public: event worker::DataSet1::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowDeleting;
            
            public: event worker::DataSet1::DISCIPLINESRowChangeEventHandler^  DISCIPLINESRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_DISCIPLINEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  NUMBER_HOURSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_GROUPColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_TYPEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_DISCNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DISCNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DISCNAMEWITHGROUPNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::DISCIPLINESRow^  default [::System::Int32 ] {
                worker::DataSet1::DISCIPLINESRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddDISCIPLINESRow(worker::DataSet1::DISCIPLINESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::DISCIPLINESRow^  AddDISCIPLINESRow(
                        System::Decimal NUMBER_HOURS, 
                        System::Decimal ID_GROUP, 
                        System::Decimal ID_TYPE, 
                        System::Decimal ID_DISCNAME, 
                        System::String^  DISCNAME, 
                        System::String^  DISCNAMEWITHGROUPNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::DISCIPLINESRow^  FindByID_DISCIPLINE(System::Decimal ID_DISCIPLINE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::DISCIPLINESRow^  NewDISCIPLINESRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveDISCIPLINESRow(worker::DataSet1::DISCIPLINESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class MARKSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_MARK;
            
            private: ::System::Data::DataColumn^  columnVALUE_MARK;
            
            private: ::System::Data::DataColumn^  columnDATE_MARK;
            
            private: ::System::Data::DataColumn^  columnID_STUDENT;
            
            private: ::System::Data::DataColumn^  columnID_TEACHER;
            
            private: ::System::Data::DataColumn^  columnID_DISCIPLINE;
            
            public: event worker::DataSet1::MARKSRowChangeEventHandler^  MARKSRowChanging;
            
            public: event worker::DataSet1::MARKSRowChangeEventHandler^  MARKSRowChanged;
            
            public: event worker::DataSet1::MARKSRowChangeEventHandler^  MARKSRowDeleting;
            
            public: event worker::DataSet1::MARKSRowChangeEventHandler^  MARKSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VALUE_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DATE_MARKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_STUDENTColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_TEACHERColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_DISCIPLINEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::MARKSRow^  default [::System::Int32 ] {
                worker::DataSet1::MARKSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddMARKSRow(worker::DataSet1::MARKSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::MARKSRow^  AddMARKSRow(System::Decimal VALUE_MARK, System::DateTime DATE_MARK, System::Decimal ID_STUDENT, 
                        System::Decimal ID_TEACHER, System::Decimal ID_DISCIPLINE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::MARKSRow^  FindByID_MARK(System::Decimal ID_MARK);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::MARKSRow^  NewMARKSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveMARKSRow(worker::DataSet1::MARKSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class DISCNAMESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnID_DISCNAME;
            
            private: ::System::Data::DataColumn^  columnDISC_NAME;
            
            public: event worker::DataSet1::DISCNAMESRowChangeEventHandler^  DISCNAMESRowChanging;
            
            public: event worker::DataSet1::DISCNAMESRowChangeEventHandler^  DISCNAMESRowChanged;
            
            public: event worker::DataSet1::DISCNAMESRowChangeEventHandler^  DISCNAMESRowDeleting;
            
            public: event worker::DataSet1::DISCNAMESRowChangeEventHandler^  DISCNAMESRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCNAMESDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCNAMESDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCNAMESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ID_DISCNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DISC_NAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::DISCNAMESRow^  default [::System::Int32 ] {
                worker::DataSet1::DISCNAMESRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddDISCNAMESRow(worker::DataSet1::DISCNAMESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::DISCNAMESRow^  AddDISCNAMESRow(System::String^  DISC_NAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::DISCNAMESRow^  FindByID_DISCNAME(System::Decimal ID_DISCNAME);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            worker::DataSet1::DISCNAMESRow^  NewDISCNAMESRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveDISCNAMESRow(worker::DataSet1::DISCNAMESRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class PROFESSIONSRow : public ::System::Data::DataRow {
            
            private: worker::DataSet1::PROFESSIONSDataTable^  tablePROFESSIONS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PROFESSIONSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_PROFESSION {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  NAME_PROFESSION {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsNAME_PROFESSIONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetNAME_PROFESSIONNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class GROUPSRow : public ::System::Data::DataRow {
            
            private: worker::DataSet1::GROUPSDataTable^  tableGROUPS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_GROUP {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  NAME_GROUP {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal COURSE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_PROFESSION {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal SUBGROUP {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  GROUPNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsNAME_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetNAME_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCOURSENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCOURSENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_PROFESSIONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_PROFESSIONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSUBGROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSUBGROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsGROUPNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetGROUPNAMENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class STATUSESRow : public ::System::Data::DataRow {
            
            private: worker::DataSet1::STATUSESDataTable^  tableSTATUSES;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STATUSESRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_STATUS {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VALUE_STATUS {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVALUE_STATUSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVALUE_STATUSNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class STUDENTSRow : public ::System::Data::DataRow {
            
            private: worker::DataSet1::STUDENTSDataTable^  tableSTUDENTS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STUDENTSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_STUDENT {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  LAST_NAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FIRST_NAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  THIRD_NAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime BIRTHDAY {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime EXPIRY_STATUS {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime ENTER_DATE {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_STATUS {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_GROUP {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FULLNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsLAST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetLAST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFIRST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFIRST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTHIRD_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTHIRD_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsBIRTHDAYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetBIRTHDAYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsEXPIRY_STATUSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetEXPIRY_STATUSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsENTER_DATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetENTER_DATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_STATUSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_STATUSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFULLNAMENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERSRow : public ::System::Data::DataRow {
            
            private: worker::DataSet1::TEACHERSDataTable^  tableTEACHERS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_TEACHER {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  LAST_NAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FIRST_NAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  THIRD_NAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FULLNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsLAST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetLAST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFIRST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFIRST_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTHIRD_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTHIRD_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFULLNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFULLNAMENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERS2DISCIPLINESRow : public ::System::Data::DataRow {
            
            private: worker::DataSet1::TEACHERS2DISCIPLINESDataTable^  tableTEACHERS2DISCIPLINES;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERS2DISCIPLINESRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal TEACHERS_ID_TEACHER {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal DISCIPLINES_ID_DISCIPLINE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TYPESRow : public ::System::Data::DataRow {
            
            private: worker::DataSet1::TYPESDataTable^  tableTYPES;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TYPESRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_TYPE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VALUE_TYPE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVALUE_TYPENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVALUE_TYPENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class DISCIPLINESRow : public ::System::Data::DataRow {
            
            private: worker::DataSet1::DISCIPLINESDataTable^  tableDISCIPLINES;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_DISCIPLINE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal NUMBER_HOURS {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_GROUP {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_TYPE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_DISCNAME {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DISCNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DISCNAMEWITHGROUPNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsNUMBER_HOURSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetNUMBER_HOURSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_GROUPNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_TYPENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_TYPENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_DISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_DISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDISCNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDISCNAMEWITHGROUPNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDISCNAMEWITHGROUPNAMENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class MARKSRow : public ::System::Data::DataRow {
            
            private: worker::DataSet1::MARKSDataTable^  tableMARKS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_MARK {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal VALUE_MARK {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::DateTime DATE_MARK {
                System::DateTime get();
                System::Void set(System::DateTime value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_STUDENT {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_TEACHER {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_DISCIPLINE {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVALUE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVALUE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDATE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDATE_MARKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_STUDENTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_STUDENTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_TEACHERNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_TEACHERNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsID_DISCIPLINENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetID_DISCIPLINENull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class DISCNAMESRow : public ::System::Data::DataRow {
            
            private: worker::DataSet1::DISCNAMESDataTable^  tableDISCNAMES;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCNAMESRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Decimal ID_DISCNAME {
                System::Decimal get();
                System::Void set(System::Decimal value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DISC_NAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDISC_NAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDISC_NAMENull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class PROFESSIONSRowChangeEvent : public ::System::EventArgs {
            
            private: worker::DataSet1::PROFESSIONSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PROFESSIONSRowChangeEvent(worker::DataSet1::PROFESSIONSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::PROFESSIONSRow^  Row {
                worker::DataSet1::PROFESSIONSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class GROUPSRowChangeEvent : public ::System::EventArgs {
            
            private: worker::DataSet1::GROUPSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            GROUPSRowChangeEvent(worker::DataSet1::GROUPSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::GROUPSRow^  Row {
                worker::DataSet1::GROUPSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class STATUSESRowChangeEvent : public ::System::EventArgs {
            
            private: worker::DataSet1::STATUSESRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STATUSESRowChangeEvent(worker::DataSet1::STATUSESRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::STATUSESRow^  Row {
                worker::DataSet1::STATUSESRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class STUDENTSRowChangeEvent : public ::System::EventArgs {
            
            private: worker::DataSet1::STUDENTSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STUDENTSRowChangeEvent(worker::DataSet1::STUDENTSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::STUDENTSRow^  Row {
                worker::DataSet1::STUDENTSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERSRowChangeEvent : public ::System::EventArgs {
            
            private: worker::DataSet1::TEACHERSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERSRowChangeEvent(worker::DataSet1::TEACHERSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::TEACHERSRow^  Row {
                worker::DataSet1::TEACHERSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TEACHERS2DISCIPLINESRowChangeEvent : public ::System::EventArgs {
            
            private: worker::DataSet1::TEACHERS2DISCIPLINESRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TEACHERS2DISCIPLINESRowChangeEvent(worker::DataSet1::TEACHERS2DISCIPLINESRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::TEACHERS2DISCIPLINESRow^  Row {
                worker::DataSet1::TEACHERS2DISCIPLINESRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TYPESRowChangeEvent : public ::System::EventArgs {
            
            private: worker::DataSet1::TYPESRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TYPESRowChangeEvent(worker::DataSet1::TYPESRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::TYPESRow^  Row {
                worker::DataSet1::TYPESRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class DISCIPLINESRowChangeEvent : public ::System::EventArgs {
            
            private: worker::DataSet1::DISCIPLINESRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCIPLINESRowChangeEvent(worker::DataSet1::DISCIPLINESRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::DISCIPLINESRow^  Row {
                worker::DataSet1::DISCIPLINESRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class MARKSRowChangeEvent : public ::System::EventArgs {
            
            private: worker::DataSet1::MARKSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            MARKSRowChangeEvent(worker::DataSet1::MARKSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::MARKSRow^  Row {
                worker::DataSet1::MARKSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class DISCNAMESRowChangeEvent : public ::System::EventArgs {
            
            private: worker::DataSet1::DISCNAMESRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            DISCNAMESRowChangeEvent(worker::DataSet1::DISCNAMESRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property worker::DataSet1::DISCNAMESRow^  Row {
                worker::DataSet1::DISCNAMESRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace worker {
    
    
    inline DataSet1::DataSet1() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &worker::DataSet1::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline DataSet1::DataSet1(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &worker::DataSet1::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"PROFESSIONS"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::PROFESSIONSDataTable(ds->Tables[L"PROFESSIONS"])));
            }
            if (ds->Tables[L"GROUPS"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::GROUPSDataTable(ds->Tables[L"GROUPS"])));
            }
            if (ds->Tables[L"STATUSES"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::STATUSESDataTable(ds->Tables[L"STATUSES"])));
            }
            if (ds->Tables[L"STUDENTS"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::STUDENTSDataTable(ds->Tables[L"STUDENTS"])));
            }
            if (ds->Tables[L"TEACHERS"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::TEACHERSDataTable(ds->Tables[L"TEACHERS"])));
            }
            if (ds->Tables[L"TEACHERS2DISCIPLINES"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::TEACHERS2DISCIPLINESDataTable(ds->Tables[L"TEACHERS2DISCIPLINES"])));
            }
            if (ds->Tables[L"TYPES"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::TYPESDataTable(ds->Tables[L"TYPES"])));
            }
            if (ds->Tables[L"DISCIPLINES"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::DISCIPLINESDataTable(ds->Tables[L"DISCIPLINES"])));
            }
            if (ds->Tables[L"MARKS"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::MARKSDataTable(ds->Tables[L"MARKS"])));
            }
            if (ds->Tables[L"DISCNAMES"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::DISCNAMESDataTable(ds->Tables[L"DISCNAMES"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &worker::DataSet1::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline worker::DataSet1::PROFESSIONSDataTable^  DataSet1::PROFESSIONS::get() {
        return this->tablePROFESSIONS;
    }
    
    inline worker::DataSet1::GROUPSDataTable^  DataSet1::GROUPS::get() {
        return this->tableGROUPS;
    }
    
    inline worker::DataSet1::STATUSESDataTable^  DataSet1::STATUSES::get() {
        return this->tableSTATUSES;
    }
    
    inline worker::DataSet1::STUDENTSDataTable^  DataSet1::STUDENTS::get() {
        return this->tableSTUDENTS;
    }
    
    inline worker::DataSet1::TEACHERSDataTable^  DataSet1::TEACHERS::get() {
        return this->tableTEACHERS;
    }
    
    inline worker::DataSet1::TEACHERS2DISCIPLINESDataTable^  DataSet1::TEACHERS2DISCIPLINES::get() {
        return this->tableTEACHERS2DISCIPLINES;
    }
    
    inline worker::DataSet1::TYPESDataTable^  DataSet1::TYPES::get() {
        return this->tableTYPES;
    }
    
    inline worker::DataSet1::DISCIPLINESDataTable^  DataSet1::DISCIPLINES::get() {
        return this->tableDISCIPLINES;
    }
    
    inline worker::DataSet1::MARKSDataTable^  DataSet1::MARKS::get() {
        return this->tableMARKS;
    }
    
    inline worker::DataSet1::DISCNAMESDataTable^  DataSet1::DISCNAMES::get() {
        return this->tableDISCNAMES;
    }
    
    inline ::System::Data::SchemaSerializationMode DataSet1::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void DataSet1::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  DataSet1::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  DataSet1::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void DataSet1::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  DataSet1::Clone() {
        worker::DataSet1^  cln = (cli::safe_cast<worker::DataSet1^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void DataSet1::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"PROFESSIONS"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::PROFESSIONSDataTable(ds->Tables[L"PROFESSIONS"])));
            }
            if (ds->Tables[L"GROUPS"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::GROUPSDataTable(ds->Tables[L"GROUPS"])));
            }
            if (ds->Tables[L"STATUSES"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::STATUSESDataTable(ds->Tables[L"STATUSES"])));
            }
            if (ds->Tables[L"STUDENTS"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::STUDENTSDataTable(ds->Tables[L"STUDENTS"])));
            }
            if (ds->Tables[L"TEACHERS"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::TEACHERSDataTable(ds->Tables[L"TEACHERS"])));
            }
            if (ds->Tables[L"TEACHERS2DISCIPLINES"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::TEACHERS2DISCIPLINESDataTable(ds->Tables[L"TEACHERS2DISCIPLINES"])));
            }
            if (ds->Tables[L"TYPES"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::TYPESDataTable(ds->Tables[L"TYPES"])));
            }
            if (ds->Tables[L"DISCIPLINES"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::DISCIPLINESDataTable(ds->Tables[L"DISCIPLINES"])));
            }
            if (ds->Tables[L"MARKS"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::MARKSDataTable(ds->Tables[L"MARKS"])));
            }
            if (ds->Tables[L"DISCNAMES"] != nullptr) {
                __super::Tables->Add((gcnew worker::DataSet1::DISCNAMESDataTable(ds->Tables[L"DISCNAMES"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  DataSet1::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void DataSet1::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void DataSet1::InitVars(::System::Boolean initTable) {
        this->tablePROFESSIONS = (cli::safe_cast<worker::DataSet1::PROFESSIONSDataTable^  >(__super::Tables[L"PROFESSIONS"]));
        if (initTable == true) {
            if (this->tablePROFESSIONS != nullptr) {
                this->tablePROFESSIONS->InitVars();
            }
        }
        this->tableGROUPS = (cli::safe_cast<worker::DataSet1::GROUPSDataTable^  >(__super::Tables[L"GROUPS"]));
        if (initTable == true) {
            if (this->tableGROUPS != nullptr) {
                this->tableGROUPS->InitVars();
            }
        }
        this->tableSTATUSES = (cli::safe_cast<worker::DataSet1::STATUSESDataTable^  >(__super::Tables[L"STATUSES"]));
        if (initTable == true) {
            if (this->tableSTATUSES != nullptr) {
                this->tableSTATUSES->InitVars();
            }
        }
        this->tableSTUDENTS = (cli::safe_cast<worker::DataSet1::STUDENTSDataTable^  >(__super::Tables[L"STUDENTS"]));
        if (initTable == true) {
            if (this->tableSTUDENTS != nullptr) {
                this->tableSTUDENTS->InitVars();
            }
        }
        this->tableTEACHERS = (cli::safe_cast<worker::DataSet1::TEACHERSDataTable^  >(__super::Tables[L"TEACHERS"]));
        if (initTable == true) {
            if (this->tableTEACHERS != nullptr) {
                this->tableTEACHERS->InitVars();
            }
        }
        this->tableTEACHERS2DISCIPLINES = (cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESDataTable^  >(__super::Tables[L"TEACHERS2DISCIPLINES"]));
        if (initTable == true) {
            if (this->tableTEACHERS2DISCIPLINES != nullptr) {
                this->tableTEACHERS2DISCIPLINES->InitVars();
            }
        }
        this->tableTYPES = (cli::safe_cast<worker::DataSet1::TYPESDataTable^  >(__super::Tables[L"TYPES"]));
        if (initTable == true) {
            if (this->tableTYPES != nullptr) {
                this->tableTYPES->InitVars();
            }
        }
        this->tableDISCIPLINES = (cli::safe_cast<worker::DataSet1::DISCIPLINESDataTable^  >(__super::Tables[L"DISCIPLINES"]));
        if (initTable == true) {
            if (this->tableDISCIPLINES != nullptr) {
                this->tableDISCIPLINES->InitVars();
            }
        }
        this->tableMARKS = (cli::safe_cast<worker::DataSet1::MARKSDataTable^  >(__super::Tables[L"MARKS"]));
        if (initTable == true) {
            if (this->tableMARKS != nullptr) {
                this->tableMARKS->InitVars();
            }
        }
        this->tableDISCNAMES = (cli::safe_cast<worker::DataSet1::DISCNAMESDataTable^  >(__super::Tables[L"DISCNAMES"]));
        if (initTable == true) {
            if (this->tableDISCNAMES != nullptr) {
                this->tableDISCNAMES->InitVars();
            }
        }
    }
    
    inline ::System::Void DataSet1::InitClass() {
        this->DataSetName = L"DataSet1";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/DataSet1.xsd";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tablePROFESSIONS = (gcnew worker::DataSet1::PROFESSIONSDataTable());
        __super::Tables->Add(this->tablePROFESSIONS);
        this->tableGROUPS = (gcnew worker::DataSet1::GROUPSDataTable());
        __super::Tables->Add(this->tableGROUPS);
        this->tableSTATUSES = (gcnew worker::DataSet1::STATUSESDataTable());
        __super::Tables->Add(this->tableSTATUSES);
        this->tableSTUDENTS = (gcnew worker::DataSet1::STUDENTSDataTable());
        __super::Tables->Add(this->tableSTUDENTS);
        this->tableTEACHERS = (gcnew worker::DataSet1::TEACHERSDataTable());
        __super::Tables->Add(this->tableTEACHERS);
        this->tableTEACHERS2DISCIPLINES = (gcnew worker::DataSet1::TEACHERS2DISCIPLINESDataTable());
        __super::Tables->Add(this->tableTEACHERS2DISCIPLINES);
        this->tableTYPES = (gcnew worker::DataSet1::TYPESDataTable());
        __super::Tables->Add(this->tableTYPES);
        this->tableDISCIPLINES = (gcnew worker::DataSet1::DISCIPLINESDataTable());
        __super::Tables->Add(this->tableDISCIPLINES);
        this->tableMARKS = (gcnew worker::DataSet1::MARKSDataTable());
        __super::Tables->Add(this->tableMARKS);
        this->tableDISCNAMES = (gcnew worker::DataSet1::DISCNAMESDataTable());
        __super::Tables->Add(this->tableDISCNAMES);
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializePROFESSIONS() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeGROUPS() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeSTATUSES() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeSTUDENTS() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeTEACHERS() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeTEACHERS2DISCIPLINES() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeTYPES() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeDISCIPLINES() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeMARKS() {
        return false;
    }
    
    inline ::System::Boolean DataSet1::ShouldSerializeDISCNAMES() {
        return false;
    }
    
    inline ::System::Void DataSet1::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::PROFESSIONSDataTable::PROFESSIONSDataTable() {
        this->TableName = L"PROFESSIONS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::PROFESSIONSDataTable::PROFESSIONSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::PROFESSIONSDataTable::PROFESSIONSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::PROFESSIONSDataTable::ID_PROFESSIONColumn::get() {
        return this->columnID_PROFESSION;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::PROFESSIONSDataTable::NAME_PROFESSIONColumn::get() {
        return this->columnNAME_PROFESSION;
    }
    
    inline ::System::Int32 DataSet1::PROFESSIONSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline worker::DataSet1::PROFESSIONSRow^  DataSet1::PROFESSIONSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<worker::DataSet1::PROFESSIONSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::PROFESSIONSDataTable::AddPROFESSIONSRow(worker::DataSet1::PROFESSIONSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline worker::DataSet1::PROFESSIONSRow^  DataSet1::PROFESSIONSDataTable::AddPROFESSIONSRow(System::String^  NAME_PROFESSION) {
        worker::DataSet1::PROFESSIONSRow^  rowPROFESSIONSRow = (cli::safe_cast<worker::DataSet1::PROFESSIONSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, NAME_PROFESSION};
        rowPROFESSIONSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowPROFESSIONSRow);
        return rowPROFESSIONSRow;
    }
    
    inline worker::DataSet1::PROFESSIONSRow^  DataSet1::PROFESSIONSDataTable::FindByID_PROFESSION(System::Decimal ID_PROFESSION) {
        return (cli::safe_cast<worker::DataSet1::PROFESSIONSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_PROFESSION})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::PROFESSIONSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::PROFESSIONSDataTable::Clone() {
        worker::DataSet1::PROFESSIONSDataTable^  cln = (cli::safe_cast<worker::DataSet1::PROFESSIONSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::PROFESSIONSDataTable::CreateInstance() {
        return (gcnew worker::DataSet1::PROFESSIONSDataTable());
    }
    
    inline ::System::Void DataSet1::PROFESSIONSDataTable::InitVars() {
        this->columnID_PROFESSION = __super::Columns[L"ID_PROFESSION"];
        this->columnNAME_PROFESSION = __super::Columns[L"NAME_PROFESSION"];
    }
    
    inline ::System::Void DataSet1::PROFESSIONSDataTable::InitClass() {
        this->columnID_PROFESSION = (gcnew ::System::Data::DataColumn(L"ID_PROFESSION", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_PROFESSION);
        this->columnNAME_PROFESSION = (gcnew ::System::Data::DataColumn(L"NAME_PROFESSION", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnNAME_PROFESSION);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_PROFESSION}, 
                true)));
        this->columnID_PROFESSION->AutoIncrement = true;
        this->columnID_PROFESSION->AutoIncrementSeed = 1;
        this->columnID_PROFESSION->AllowDBNull = false;
        this->columnID_PROFESSION->Unique = true;
        this->columnNAME_PROFESSION->MaxLength = 150;
    }
    
    inline worker::DataSet1::PROFESSIONSRow^  DataSet1::PROFESSIONSDataTable::NewPROFESSIONSRow() {
        return (cli::safe_cast<worker::DataSet1::PROFESSIONSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::PROFESSIONSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew worker::DataSet1::PROFESSIONSRow(builder));
    }
    
    inline ::System::Type^  DataSet1::PROFESSIONSDataTable::GetRowType() {
        return worker::DataSet1::PROFESSIONSRow::typeid;
    }
    
    inline ::System::Void DataSet1::PROFESSIONSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->PROFESSIONSRowChanged(this, (gcnew worker::DataSet1::PROFESSIONSRowChangeEvent((cli::safe_cast<worker::DataSet1::PROFESSIONSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::PROFESSIONSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->PROFESSIONSRowChanging(this, (gcnew worker::DataSet1::PROFESSIONSRowChangeEvent((cli::safe_cast<worker::DataSet1::PROFESSIONSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::PROFESSIONSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->PROFESSIONSRowDeleted(this, (gcnew worker::DataSet1::PROFESSIONSRowChangeEvent((cli::safe_cast<worker::DataSet1::PROFESSIONSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::PROFESSIONSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->PROFESSIONSRowDeleting(this, (gcnew worker::DataSet1::PROFESSIONSRowChangeEvent((cli::safe_cast<worker::DataSet1::PROFESSIONSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::PROFESSIONSDataTable::RemovePROFESSIONSRow(worker::DataSet1::PROFESSIONSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::PROFESSIONSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"PROFESSIONSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::GROUPSDataTable::GROUPSDataTable() {
        this->TableName = L"GROUPS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::GROUPSDataTable::GROUPSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::GROUPSDataTable::GROUPSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::ID_GROUPColumn::get() {
        return this->columnID_GROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::NAME_GROUPColumn::get() {
        return this->columnNAME_GROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::COURSEColumn::get() {
        return this->columnCOURSE;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::ID_PROFESSIONColumn::get() {
        return this->columnID_PROFESSION;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::SUBGROUPColumn::get() {
        return this->columnSUBGROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::GROUPSDataTable::GROUPNAMEColumn::get() {
        return this->columnGROUPNAME;
    }
    
    inline ::System::Int32 DataSet1::GROUPSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline worker::DataSet1::GROUPSRow^  DataSet1::GROUPSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<worker::DataSet1::GROUPSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::AddGROUPSRow(worker::DataSet1::GROUPSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline worker::DataSet1::GROUPSRow^  DataSet1::GROUPSDataTable::AddGROUPSRow(System::String^  NAME_GROUP, System::Decimal COURSE, 
                System::Decimal ID_PROFESSION, System::Decimal SUBGROUP, System::String^  GROUPNAME) {
        worker::DataSet1::GROUPSRow^  rowGROUPSRow = (cli::safe_cast<worker::DataSet1::GROUPSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {nullptr, NAME_GROUP, 
            COURSE, ID_PROFESSION, SUBGROUP, GROUPNAME};
        rowGROUPSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowGROUPSRow);
        return rowGROUPSRow;
    }
    
    inline worker::DataSet1::GROUPSRow^  DataSet1::GROUPSDataTable::FindByID_GROUP(System::Decimal ID_GROUP) {
        return (cli::safe_cast<worker::DataSet1::GROUPSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_GROUP})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::GROUPSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::GROUPSDataTable::Clone() {
        worker::DataSet1::GROUPSDataTable^  cln = (cli::safe_cast<worker::DataSet1::GROUPSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::GROUPSDataTable::CreateInstance() {
        return (gcnew worker::DataSet1::GROUPSDataTable());
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::InitVars() {
        this->columnID_GROUP = __super::Columns[L"ID_GROUP"];
        this->columnNAME_GROUP = __super::Columns[L"NAME_GROUP"];
        this->columnCOURSE = __super::Columns[L"COURSE"];
        this->columnID_PROFESSION = __super::Columns[L"ID_PROFESSION"];
        this->columnSUBGROUP = __super::Columns[L"SUBGROUP"];
        this->columnGROUPNAME = __super::Columns[L"GROUPNAME"];
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::InitClass() {
        this->columnID_GROUP = (gcnew ::System::Data::DataColumn(L"ID_GROUP", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_GROUP);
        this->columnNAME_GROUP = (gcnew ::System::Data::DataColumn(L"NAME_GROUP", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnNAME_GROUP);
        this->columnCOURSE = (gcnew ::System::Data::DataColumn(L"COURSE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnCOURSE);
        this->columnID_PROFESSION = (gcnew ::System::Data::DataColumn(L"ID_PROFESSION", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_PROFESSION);
        this->columnSUBGROUP = (gcnew ::System::Data::DataColumn(L"SUBGROUP", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnSUBGROUP);
        this->columnGROUPNAME = (gcnew ::System::Data::DataColumn(L"GROUPNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnGROUPNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_GROUP}, 
                true)));
        this->columnID_GROUP->AutoIncrement = true;
        this->columnID_GROUP->AutoIncrementSeed = 1;
        this->columnID_GROUP->AllowDBNull = false;
        this->columnID_GROUP->Unique = true;
        this->columnNAME_GROUP->MaxLength = 150;
        this->columnGROUPNAME->MaxLength = 4000;
    }
    
    inline worker::DataSet1::GROUPSRow^  DataSet1::GROUPSDataTable::NewGROUPSRow() {
        return (cli::safe_cast<worker::DataSet1::GROUPSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::GROUPSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew worker::DataSet1::GROUPSRow(builder));
    }
    
    inline ::System::Type^  DataSet1::GROUPSDataTable::GetRowType() {
        return worker::DataSet1::GROUPSRow::typeid;
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->GROUPSRowChanged(this, (gcnew worker::DataSet1::GROUPSRowChangeEvent((cli::safe_cast<worker::DataSet1::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->GROUPSRowChanging(this, (gcnew worker::DataSet1::GROUPSRowChangeEvent((cli::safe_cast<worker::DataSet1::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->GROUPSRowDeleted(this, (gcnew worker::DataSet1::GROUPSRowChangeEvent((cli::safe_cast<worker::DataSet1::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->GROUPSRowDeleting(this, (gcnew worker::DataSet1::GROUPSRowChangeEvent((cli::safe_cast<worker::DataSet1::GROUPSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::GROUPSDataTable::RemoveGROUPSRow(worker::DataSet1::GROUPSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::GROUPSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"GROUPSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::STATUSESDataTable::STATUSESDataTable() {
        this->TableName = L"STATUSES";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::STATUSESDataTable::STATUSESDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::STATUSESDataTable::STATUSESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STATUSESDataTable::ID_STATUSColumn::get() {
        return this->columnID_STATUS;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STATUSESDataTable::VALUE_STATUSColumn::get() {
        return this->columnVALUE_STATUS;
    }
    
    inline ::System::Int32 DataSet1::STATUSESDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline worker::DataSet1::STATUSESRow^  DataSet1::STATUSESDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<worker::DataSet1::STATUSESRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::STATUSESDataTable::AddSTATUSESRow(worker::DataSet1::STATUSESRow^  row) {
        this->Rows->Add(row);
    }
    
    inline worker::DataSet1::STATUSESRow^  DataSet1::STATUSESDataTable::AddSTATUSESRow(System::Decimal ID_STATUS, System::String^  VALUE_STATUS) {
        worker::DataSet1::STATUSESRow^  rowSTATUSESRow = (cli::safe_cast<worker::DataSet1::STATUSESRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {ID_STATUS, VALUE_STATUS};
        rowSTATUSESRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowSTATUSESRow);
        return rowSTATUSESRow;
    }
    
    inline worker::DataSet1::STATUSESRow^  DataSet1::STATUSESDataTable::FindByID_STATUS(System::Decimal ID_STATUS) {
        return (cli::safe_cast<worker::DataSet1::STATUSESRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_STATUS})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::STATUSESDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::STATUSESDataTable::Clone() {
        worker::DataSet1::STATUSESDataTable^  cln = (cli::safe_cast<worker::DataSet1::STATUSESDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::STATUSESDataTable::CreateInstance() {
        return (gcnew worker::DataSet1::STATUSESDataTable());
    }
    
    inline ::System::Void DataSet1::STATUSESDataTable::InitVars() {
        this->columnID_STATUS = __super::Columns[L"ID_STATUS"];
        this->columnVALUE_STATUS = __super::Columns[L"VALUE_STATUS"];
    }
    
    inline ::System::Void DataSet1::STATUSESDataTable::InitClass() {
        this->columnID_STATUS = (gcnew ::System::Data::DataColumn(L"ID_STATUS", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_STATUS);
        this->columnVALUE_STATUS = (gcnew ::System::Data::DataColumn(L"VALUE_STATUS", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVALUE_STATUS);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_STATUS}, 
                true)));
        this->columnID_STATUS->AllowDBNull = false;
        this->columnID_STATUS->Unique = true;
        this->columnVALUE_STATUS->MaxLength = 50;
    }
    
    inline worker::DataSet1::STATUSESRow^  DataSet1::STATUSESDataTable::NewSTATUSESRow() {
        return (cli::safe_cast<worker::DataSet1::STATUSESRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::STATUSESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew worker::DataSet1::STATUSESRow(builder));
    }
    
    inline ::System::Type^  DataSet1::STATUSESDataTable::GetRowType() {
        return worker::DataSet1::STATUSESRow::typeid;
    }
    
    inline ::System::Void DataSet1::STATUSESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->STATUSESRowChanged(this, (gcnew worker::DataSet1::STATUSESRowChangeEvent((cli::safe_cast<worker::DataSet1::STATUSESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::STATUSESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->STATUSESRowChanging(this, (gcnew worker::DataSet1::STATUSESRowChangeEvent((cli::safe_cast<worker::DataSet1::STATUSESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::STATUSESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->STATUSESRowDeleted(this, (gcnew worker::DataSet1::STATUSESRowChangeEvent((cli::safe_cast<worker::DataSet1::STATUSESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::STATUSESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->STATUSESRowDeleting(this, (gcnew worker::DataSet1::STATUSESRowChangeEvent((cli::safe_cast<worker::DataSet1::STATUSESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::STATUSESDataTable::RemoveSTATUSESRow(worker::DataSet1::STATUSESRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::STATUSESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"STATUSESDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::STUDENTSDataTable::STUDENTSDataTable() {
        this->TableName = L"STUDENTS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::STUDENTSDataTable::STUDENTSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::STUDENTSDataTable::STUDENTSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STUDENTSDataTable::ID_STUDENTColumn::get() {
        return this->columnID_STUDENT;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STUDENTSDataTable::LAST_NAMEColumn::get() {
        return this->columnLAST_NAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STUDENTSDataTable::FIRST_NAMEColumn::get() {
        return this->columnFIRST_NAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STUDENTSDataTable::THIRD_NAMEColumn::get() {
        return this->columnTHIRD_NAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STUDENTSDataTable::BIRTHDAYColumn::get() {
        return this->columnBIRTHDAY;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STUDENTSDataTable::EXPIRY_STATUSColumn::get() {
        return this->columnEXPIRY_STATUS;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STUDENTSDataTable::ENTER_DATEColumn::get() {
        return this->columnENTER_DATE;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STUDENTSDataTable::ID_STATUSColumn::get() {
        return this->columnID_STATUS;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STUDENTSDataTable::ID_GROUPColumn::get() {
        return this->columnID_GROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::STUDENTSDataTable::FULLNAMEColumn::get() {
        return this->columnFULLNAME;
    }
    
    inline ::System::Int32 DataSet1::STUDENTSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline worker::DataSet1::STUDENTSRow^  DataSet1::STUDENTSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<worker::DataSet1::STUDENTSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::STUDENTSDataTable::AddSTUDENTSRow(worker::DataSet1::STUDENTSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline worker::DataSet1::STUDENTSRow^  DataSet1::STUDENTSDataTable::AddSTUDENTSRow(
                System::String^  LAST_NAME, 
                System::String^  FIRST_NAME, 
                System::String^  THIRD_NAME, 
                System::DateTime BIRTHDAY, 
                System::DateTime EXPIRY_STATUS, 
                System::DateTime ENTER_DATE, 
                System::Decimal ID_STATUS, 
                System::Decimal ID_GROUP, 
                System::String^  FULLNAME) {
        worker::DataSet1::STUDENTSRow^  rowSTUDENTSRow = (cli::safe_cast<worker::DataSet1::STUDENTSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(10) {nullptr, LAST_NAME, 
            FIRST_NAME, THIRD_NAME, BIRTHDAY, EXPIRY_STATUS, ENTER_DATE, ID_STATUS, ID_GROUP, FULLNAME};
        rowSTUDENTSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowSTUDENTSRow);
        return rowSTUDENTSRow;
    }
    
    inline worker::DataSet1::STUDENTSRow^  DataSet1::STUDENTSDataTable::FindByID_STUDENT(System::Decimal ID_STUDENT) {
        return (cli::safe_cast<worker::DataSet1::STUDENTSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_STUDENT})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::STUDENTSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::STUDENTSDataTable::Clone() {
        worker::DataSet1::STUDENTSDataTable^  cln = (cli::safe_cast<worker::DataSet1::STUDENTSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::STUDENTSDataTable::CreateInstance() {
        return (gcnew worker::DataSet1::STUDENTSDataTable());
    }
    
    inline ::System::Void DataSet1::STUDENTSDataTable::InitVars() {
        this->columnID_STUDENT = __super::Columns[L"ID_STUDENT"];
        this->columnLAST_NAME = __super::Columns[L"LAST_NAME"];
        this->columnFIRST_NAME = __super::Columns[L"FIRST_NAME"];
        this->columnTHIRD_NAME = __super::Columns[L"THIRD_NAME"];
        this->columnBIRTHDAY = __super::Columns[L"BIRTHDAY"];
        this->columnEXPIRY_STATUS = __super::Columns[L"EXPIRY_STATUS"];
        this->columnENTER_DATE = __super::Columns[L"ENTER_DATE"];
        this->columnID_STATUS = __super::Columns[L"ID_STATUS"];
        this->columnID_GROUP = __super::Columns[L"ID_GROUP"];
        this->columnFULLNAME = __super::Columns[L"FULLNAME"];
    }
    
    inline ::System::Void DataSet1::STUDENTSDataTable::InitClass() {
        this->columnID_STUDENT = (gcnew ::System::Data::DataColumn(L"ID_STUDENT", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_STUDENT);
        this->columnLAST_NAME = (gcnew ::System::Data::DataColumn(L"LAST_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnLAST_NAME);
        this->columnFIRST_NAME = (gcnew ::System::Data::DataColumn(L"FIRST_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFIRST_NAME);
        this->columnTHIRD_NAME = (gcnew ::System::Data::DataColumn(L"THIRD_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnTHIRD_NAME);
        this->columnBIRTHDAY = (gcnew ::System::Data::DataColumn(L"BIRTHDAY", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnBIRTHDAY);
        this->columnEXPIRY_STATUS = (gcnew ::System::Data::DataColumn(L"EXPIRY_STATUS", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnEXPIRY_STATUS);
        this->columnENTER_DATE = (gcnew ::System::Data::DataColumn(L"ENTER_DATE", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnENTER_DATE);
        this->columnID_STATUS = (gcnew ::System::Data::DataColumn(L"ID_STATUS", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_STATUS);
        this->columnID_GROUP = (gcnew ::System::Data::DataColumn(L"ID_GROUP", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_GROUP);
        this->columnFULLNAME = (gcnew ::System::Data::DataColumn(L"FULLNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFULLNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_STUDENT}, 
                true)));
        this->columnID_STUDENT->AutoIncrement = true;
        this->columnID_STUDENT->AutoIncrementSeed = 1;
        this->columnID_STUDENT->AllowDBNull = false;
        this->columnID_STUDENT->Unique = true;
        this->columnLAST_NAME->MaxLength = 50;
        this->columnFIRST_NAME->MaxLength = 50;
        this->columnTHIRD_NAME->MaxLength = 50;
        this->columnFULLNAME->MaxLength = 4000;
    }
    
    inline worker::DataSet1::STUDENTSRow^  DataSet1::STUDENTSDataTable::NewSTUDENTSRow() {
        return (cli::safe_cast<worker::DataSet1::STUDENTSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::STUDENTSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew worker::DataSet1::STUDENTSRow(builder));
    }
    
    inline ::System::Type^  DataSet1::STUDENTSDataTable::GetRowType() {
        return worker::DataSet1::STUDENTSRow::typeid;
    }
    
    inline ::System::Void DataSet1::STUDENTSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->STUDENTSRowChanged(this, (gcnew worker::DataSet1::STUDENTSRowChangeEvent((cli::safe_cast<worker::DataSet1::STUDENTSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::STUDENTSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->STUDENTSRowChanging(this, (gcnew worker::DataSet1::STUDENTSRowChangeEvent((cli::safe_cast<worker::DataSet1::STUDENTSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::STUDENTSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->STUDENTSRowDeleted(this, (gcnew worker::DataSet1::STUDENTSRowChangeEvent((cli::safe_cast<worker::DataSet1::STUDENTSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::STUDENTSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->STUDENTSRowDeleting(this, (gcnew worker::DataSet1::STUDENTSRowChangeEvent((cli::safe_cast<worker::DataSet1::STUDENTSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::STUDENTSDataTable::RemoveSTUDENTSRow(worker::DataSet1::STUDENTSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::STUDENTSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"STUDENTSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::TEACHERSDataTable::TEACHERSDataTable() {
        this->TableName = L"TEACHERS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::TEACHERSDataTable::TEACHERSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::TEACHERSDataTable::TEACHERSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERSDataTable::ID_TEACHERColumn::get() {
        return this->columnID_TEACHER;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERSDataTable::LAST_NAMEColumn::get() {
        return this->columnLAST_NAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERSDataTable::FIRST_NAMEColumn::get() {
        return this->columnFIRST_NAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERSDataTable::THIRD_NAMEColumn::get() {
        return this->columnTHIRD_NAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERSDataTable::FULLNAMEColumn::get() {
        return this->columnFULLNAME;
    }
    
    inline ::System::Int32 DataSet1::TEACHERSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline worker::DataSet1::TEACHERSRow^  DataSet1::TEACHERSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<worker::DataSet1::TEACHERSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::AddTEACHERSRow(worker::DataSet1::TEACHERSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline worker::DataSet1::TEACHERSRow^  DataSet1::TEACHERSDataTable::AddTEACHERSRow(System::String^  LAST_NAME, System::String^  FIRST_NAME, 
                System::String^  THIRD_NAME, System::String^  FULLNAME) {
        worker::DataSet1::TEACHERSRow^  rowTEACHERSRow = (cli::safe_cast<worker::DataSet1::TEACHERSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {nullptr, LAST_NAME, 
            FIRST_NAME, THIRD_NAME, FULLNAME};
        rowTEACHERSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTEACHERSRow);
        return rowTEACHERSRow;
    }
    
    inline worker::DataSet1::TEACHERSRow^  DataSet1::TEACHERSDataTable::FindByID_TEACHER(System::Decimal ID_TEACHER) {
        return (cli::safe_cast<worker::DataSet1::TEACHERSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_TEACHER})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::TEACHERSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::TEACHERSDataTable::Clone() {
        worker::DataSet1::TEACHERSDataTable^  cln = (cli::safe_cast<worker::DataSet1::TEACHERSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::TEACHERSDataTable::CreateInstance() {
        return (gcnew worker::DataSet1::TEACHERSDataTable());
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::InitVars() {
        this->columnID_TEACHER = __super::Columns[L"ID_TEACHER"];
        this->columnLAST_NAME = __super::Columns[L"LAST_NAME"];
        this->columnFIRST_NAME = __super::Columns[L"FIRST_NAME"];
        this->columnTHIRD_NAME = __super::Columns[L"THIRD_NAME"];
        this->columnFULLNAME = __super::Columns[L"FULLNAME"];
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::InitClass() {
        this->columnID_TEACHER = (gcnew ::System::Data::DataColumn(L"ID_TEACHER", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_TEACHER);
        this->columnLAST_NAME = (gcnew ::System::Data::DataColumn(L"LAST_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnLAST_NAME);
        this->columnFIRST_NAME = (gcnew ::System::Data::DataColumn(L"FIRST_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFIRST_NAME);
        this->columnTHIRD_NAME = (gcnew ::System::Data::DataColumn(L"THIRD_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnTHIRD_NAME);
        this->columnFULLNAME = (gcnew ::System::Data::DataColumn(L"FULLNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFULLNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_TEACHER}, 
                true)));
        this->columnID_TEACHER->AutoIncrement = true;
        this->columnID_TEACHER->AutoIncrementSeed = 1;
        this->columnID_TEACHER->AllowDBNull = false;
        this->columnID_TEACHER->Unique = true;
        this->columnLAST_NAME->MaxLength = 50;
        this->columnFIRST_NAME->MaxLength = 50;
        this->columnTHIRD_NAME->MaxLength = 50;
        this->columnFULLNAME->MaxLength = 4000;
    }
    
    inline worker::DataSet1::TEACHERSRow^  DataSet1::TEACHERSDataTable::NewTEACHERSRow() {
        return (cli::safe_cast<worker::DataSet1::TEACHERSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::TEACHERSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew worker::DataSet1::TEACHERSRow(builder));
    }
    
    inline ::System::Type^  DataSet1::TEACHERSDataTable::GetRowType() {
        return worker::DataSet1::TEACHERSRow::typeid;
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TEACHERSRowChanged(this, (gcnew worker::DataSet1::TEACHERSRowChangeEvent((cli::safe_cast<worker::DataSet1::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TEACHERSRowChanging(this, (gcnew worker::DataSet1::TEACHERSRowChangeEvent((cli::safe_cast<worker::DataSet1::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TEACHERSRowDeleted(this, (gcnew worker::DataSet1::TEACHERSRowChangeEvent((cli::safe_cast<worker::DataSet1::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TEACHERSRowDeleting(this, (gcnew worker::DataSet1::TEACHERSRowChangeEvent((cli::safe_cast<worker::DataSet1::TEACHERSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERSDataTable::RemoveTEACHERSRow(worker::DataSet1::TEACHERSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::TEACHERSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TEACHERSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::TEACHERS2DISCIPLINESDataTable::TEACHERS2DISCIPLINESDataTable() {
        this->TableName = L"TEACHERS2DISCIPLINES";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::TEACHERS2DISCIPLINESDataTable::TEACHERS2DISCIPLINESDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::TEACHERS2DISCIPLINESDataTable::TEACHERS2DISCIPLINESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERS2DISCIPLINESDataTable::TEACHERS_ID_TEACHERColumn::get() {
        return this->columnTEACHERS_ID_TEACHER;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TEACHERS2DISCIPLINESDataTable::DISCIPLINES_ID_DISCIPLINEColumn::get() {
        return this->columnDISCIPLINES_ID_DISCIPLINE;
    }
    
    inline ::System::Int32 DataSet1::TEACHERS2DISCIPLINESDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline worker::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERS2DISCIPLINESDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::AddTEACHERS2DISCIPLINESRow(worker::DataSet1::TEACHERS2DISCIPLINESRow^  row) {
        this->Rows->Add(row);
    }
    
    inline worker::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERS2DISCIPLINESDataTable::AddTEACHERS2DISCIPLINESRow(
                System::Decimal TEACHERS_ID_TEACHER, System::Decimal DISCIPLINES_ID_DISCIPLINE) {
        worker::DataSet1::TEACHERS2DISCIPLINESRow^  rowTEACHERS2DISCIPLINESRow = (cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {TEACHERS_ID_TEACHER, 
            DISCIPLINES_ID_DISCIPLINE};
        rowTEACHERS2DISCIPLINESRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTEACHERS2DISCIPLINESRow);
        return rowTEACHERS2DISCIPLINESRow;
    }
    
    inline worker::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERS2DISCIPLINESDataTable::FindByTEACHERS_ID_TEACHERDISCIPLINES_ID_DISCIPLINE(
                System::Decimal TEACHERS_ID_TEACHER, System::Decimal DISCIPLINES_ID_DISCIPLINE) {
        return (cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(2) {TEACHERS_ID_TEACHER, 
                DISCIPLINES_ID_DISCIPLINE})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::TEACHERS2DISCIPLINESDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::TEACHERS2DISCIPLINESDataTable::Clone() {
        worker::DataSet1::TEACHERS2DISCIPLINESDataTable^  cln = (cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::TEACHERS2DISCIPLINESDataTable::CreateInstance() {
        return (gcnew worker::DataSet1::TEACHERS2DISCIPLINESDataTable());
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::InitVars() {
        this->columnTEACHERS_ID_TEACHER = __super::Columns[L"TEACHERS_ID_TEACHER"];
        this->columnDISCIPLINES_ID_DISCIPLINE = __super::Columns[L"DISCIPLINES_ID_DISCIPLINE"];
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::InitClass() {
        this->columnTEACHERS_ID_TEACHER = (gcnew ::System::Data::DataColumn(L"TEACHERS_ID_TEACHER", ::System::Decimal::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnTEACHERS_ID_TEACHER);
        this->columnDISCIPLINES_ID_DISCIPLINE = (gcnew ::System::Data::DataColumn(L"DISCIPLINES_ID_DISCIPLINE", ::System::Decimal::typeid, 
            nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDISCIPLINES_ID_DISCIPLINE);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(2) {this->columnTEACHERS_ID_TEACHER, 
                    this->columnDISCIPLINES_ID_DISCIPLINE}, true)));
        this->columnTEACHERS_ID_TEACHER->AllowDBNull = false;
        this->columnDISCIPLINES_ID_DISCIPLINE->AllowDBNull = false;
    }
    
    inline worker::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERS2DISCIPLINESDataTable::NewTEACHERS2DISCIPLINESRow() {
        return (cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::TEACHERS2DISCIPLINESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew worker::DataSet1::TEACHERS2DISCIPLINESRow(builder));
    }
    
    inline ::System::Type^  DataSet1::TEACHERS2DISCIPLINESDataTable::GetRowType() {
        return worker::DataSet1::TEACHERS2DISCIPLINESRow::typeid;
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TEACHERS2DISCIPLINESRowChanged(this, (gcnew worker::DataSet1::TEACHERS2DISCIPLINESRowChangeEvent((cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TEACHERS2DISCIPLINESRowChanging(this, (gcnew worker::DataSet1::TEACHERS2DISCIPLINESRowChangeEvent((cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TEACHERS2DISCIPLINESRowDeleted(this, (gcnew worker::DataSet1::TEACHERS2DISCIPLINESRowChangeEvent((cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TEACHERS2DISCIPLINESRowDeleting(this, (gcnew worker::DataSet1::TEACHERS2DISCIPLINESRowChangeEvent((cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TEACHERS2DISCIPLINESDataTable::RemoveTEACHERS2DISCIPLINESRow(worker::DataSet1::TEACHERS2DISCIPLINESRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::TEACHERS2DISCIPLINESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TEACHERS2DISCIPLINESDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::TYPESDataTable::TYPESDataTable() {
        this->TableName = L"TYPES";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::TYPESDataTable::TYPESDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::TYPESDataTable::TYPESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TYPESDataTable::ID_TYPEColumn::get() {
        return this->columnID_TYPE;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::TYPESDataTable::VALUE_TYPEColumn::get() {
        return this->columnVALUE_TYPE;
    }
    
    inline ::System::Int32 DataSet1::TYPESDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline worker::DataSet1::TYPESRow^  DataSet1::TYPESDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<worker::DataSet1::TYPESRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::TYPESDataTable::AddTYPESRow(worker::DataSet1::TYPESRow^  row) {
        this->Rows->Add(row);
    }
    
    inline worker::DataSet1::TYPESRow^  DataSet1::TYPESDataTable::AddTYPESRow(System::Decimal ID_TYPE, System::String^  VALUE_TYPE) {
        worker::DataSet1::TYPESRow^  rowTYPESRow = (cli::safe_cast<worker::DataSet1::TYPESRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {ID_TYPE, VALUE_TYPE};
        rowTYPESRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTYPESRow);
        return rowTYPESRow;
    }
    
    inline worker::DataSet1::TYPESRow^  DataSet1::TYPESDataTable::FindByID_TYPE(System::Decimal ID_TYPE) {
        return (cli::safe_cast<worker::DataSet1::TYPESRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_TYPE})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::TYPESDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::TYPESDataTable::Clone() {
        worker::DataSet1::TYPESDataTable^  cln = (cli::safe_cast<worker::DataSet1::TYPESDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::TYPESDataTable::CreateInstance() {
        return (gcnew worker::DataSet1::TYPESDataTable());
    }
    
    inline ::System::Void DataSet1::TYPESDataTable::InitVars() {
        this->columnID_TYPE = __super::Columns[L"ID_TYPE"];
        this->columnVALUE_TYPE = __super::Columns[L"VALUE_TYPE"];
    }
    
    inline ::System::Void DataSet1::TYPESDataTable::InitClass() {
        this->columnID_TYPE = (gcnew ::System::Data::DataColumn(L"ID_TYPE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_TYPE);
        this->columnVALUE_TYPE = (gcnew ::System::Data::DataColumn(L"VALUE_TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVALUE_TYPE);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_TYPE}, 
                true)));
        this->columnID_TYPE->AllowDBNull = false;
        this->columnID_TYPE->Unique = true;
        this->columnVALUE_TYPE->MaxLength = 50;
    }
    
    inline worker::DataSet1::TYPESRow^  DataSet1::TYPESDataTable::NewTYPESRow() {
        return (cli::safe_cast<worker::DataSet1::TYPESRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::TYPESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew worker::DataSet1::TYPESRow(builder));
    }
    
    inline ::System::Type^  DataSet1::TYPESDataTable::GetRowType() {
        return worker::DataSet1::TYPESRow::typeid;
    }
    
    inline ::System::Void DataSet1::TYPESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TYPESRowChanged(this, (gcnew worker::DataSet1::TYPESRowChangeEvent((cli::safe_cast<worker::DataSet1::TYPESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TYPESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TYPESRowChanging(this, (gcnew worker::DataSet1::TYPESRowChangeEvent((cli::safe_cast<worker::DataSet1::TYPESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TYPESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TYPESRowDeleted(this, (gcnew worker::DataSet1::TYPESRowChangeEvent((cli::safe_cast<worker::DataSet1::TYPESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TYPESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TYPESRowDeleting(this, (gcnew worker::DataSet1::TYPESRowChangeEvent((cli::safe_cast<worker::DataSet1::TYPESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::TYPESDataTable::RemoveTYPESRow(worker::DataSet1::TYPESRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::TYPESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TYPESDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::DISCIPLINESDataTable::DISCIPLINESDataTable() {
        this->TableName = L"DISCIPLINES";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::DISCIPLINESDataTable::DISCIPLINESDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::DISCIPLINESDataTable::DISCIPLINESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::ID_DISCIPLINEColumn::get() {
        return this->columnID_DISCIPLINE;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::NUMBER_HOURSColumn::get() {
        return this->columnNUMBER_HOURS;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::ID_GROUPColumn::get() {
        return this->columnID_GROUP;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::ID_TYPEColumn::get() {
        return this->columnID_TYPE;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::ID_DISCNAMEColumn::get() {
        return this->columnID_DISCNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::DISCNAMEColumn::get() {
        return this->columnDISCNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCIPLINESDataTable::DISCNAMEWITHGROUPNAMEColumn::get() {
        return this->columnDISCNAMEWITHGROUPNAME;
    }
    
    inline ::System::Int32 DataSet1::DISCIPLINESDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline worker::DataSet1::DISCIPLINESRow^  DataSet1::DISCIPLINESDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<worker::DataSet1::DISCIPLINESRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::AddDISCIPLINESRow(worker::DataSet1::DISCIPLINESRow^  row) {
        this->Rows->Add(row);
    }
    
    inline worker::DataSet1::DISCIPLINESRow^  DataSet1::DISCIPLINESDataTable::AddDISCIPLINESRow(
                System::Decimal NUMBER_HOURS, 
                System::Decimal ID_GROUP, 
                System::Decimal ID_TYPE, 
                System::Decimal ID_DISCNAME, 
                System::String^  DISCNAME, 
                System::String^  DISCNAMEWITHGROUPNAME) {
        worker::DataSet1::DISCIPLINESRow^  rowDISCIPLINESRow = (cli::safe_cast<worker::DataSet1::DISCIPLINESRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {nullptr, NUMBER_HOURS, 
            ID_GROUP, ID_TYPE, ID_DISCNAME, DISCNAME, DISCNAMEWITHGROUPNAME};
        rowDISCIPLINESRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowDISCIPLINESRow);
        return rowDISCIPLINESRow;
    }
    
    inline worker::DataSet1::DISCIPLINESRow^  DataSet1::DISCIPLINESDataTable::FindByID_DISCIPLINE(System::Decimal ID_DISCIPLINE) {
        return (cli::safe_cast<worker::DataSet1::DISCIPLINESRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_DISCIPLINE})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::DISCIPLINESDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::DISCIPLINESDataTable::Clone() {
        worker::DataSet1::DISCIPLINESDataTable^  cln = (cli::safe_cast<worker::DataSet1::DISCIPLINESDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::DISCIPLINESDataTable::CreateInstance() {
        return (gcnew worker::DataSet1::DISCIPLINESDataTable());
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::InitVars() {
        this->columnID_DISCIPLINE = __super::Columns[L"ID_DISCIPLINE"];
        this->columnNUMBER_HOURS = __super::Columns[L"NUMBER_HOURS"];
        this->columnID_GROUP = __super::Columns[L"ID_GROUP"];
        this->columnID_TYPE = __super::Columns[L"ID_TYPE"];
        this->columnID_DISCNAME = __super::Columns[L"ID_DISCNAME"];
        this->columnDISCNAME = __super::Columns[L"DISCNAME"];
        this->columnDISCNAMEWITHGROUPNAME = __super::Columns[L"DISCNAMEWITHGROUPNAME"];
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::InitClass() {
        this->columnID_DISCIPLINE = (gcnew ::System::Data::DataColumn(L"ID_DISCIPLINE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_DISCIPLINE);
        this->columnNUMBER_HOURS = (gcnew ::System::Data::DataColumn(L"NUMBER_HOURS", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnNUMBER_HOURS);
        this->columnID_GROUP = (gcnew ::System::Data::DataColumn(L"ID_GROUP", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_GROUP);
        this->columnID_TYPE = (gcnew ::System::Data::DataColumn(L"ID_TYPE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_TYPE);
        this->columnID_DISCNAME = (gcnew ::System::Data::DataColumn(L"ID_DISCNAME", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_DISCNAME);
        this->columnDISCNAME = (gcnew ::System::Data::DataColumn(L"DISCNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDISCNAME);
        this->columnDISCNAMEWITHGROUPNAME = (gcnew ::System::Data::DataColumn(L"DISCNAMEWITHGROUPNAME", ::System::String::typeid, 
            nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDISCNAMEWITHGROUPNAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_DISCIPLINE}, 
                true)));
        this->columnID_DISCIPLINE->AutoIncrement = true;
        this->columnID_DISCIPLINE->AutoIncrementSeed = 1;
        this->columnID_DISCIPLINE->AllowDBNull = false;
        this->columnID_DISCIPLINE->Unique = true;
        this->columnDISCNAME->MaxLength = 4000;
        this->columnDISCNAMEWITHGROUPNAME->MaxLength = 4000;
    }
    
    inline worker::DataSet1::DISCIPLINESRow^  DataSet1::DISCIPLINESDataTable::NewDISCIPLINESRow() {
        return (cli::safe_cast<worker::DataSet1::DISCIPLINESRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::DISCIPLINESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew worker::DataSet1::DISCIPLINESRow(builder));
    }
    
    inline ::System::Type^  DataSet1::DISCIPLINESDataTable::GetRowType() {
        return worker::DataSet1::DISCIPLINESRow::typeid;
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->DISCIPLINESRowChanged(this, (gcnew worker::DataSet1::DISCIPLINESRowChangeEvent((cli::safe_cast<worker::DataSet1::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->DISCIPLINESRowChanging(this, (gcnew worker::DataSet1::DISCIPLINESRowChangeEvent((cli::safe_cast<worker::DataSet1::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->DISCIPLINESRowDeleted(this, (gcnew worker::DataSet1::DISCIPLINESRowChangeEvent((cli::safe_cast<worker::DataSet1::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->DISCIPLINESRowDeleting(this, (gcnew worker::DataSet1::DISCIPLINESRowChangeEvent((cli::safe_cast<worker::DataSet1::DISCIPLINESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCIPLINESDataTable::RemoveDISCIPLINESRow(worker::DataSet1::DISCIPLINESRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::DISCIPLINESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"DISCIPLINESDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::MARKSDataTable::MARKSDataTable() {
        this->TableName = L"MARKS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::MARKSDataTable::MARKSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::MARKSDataTable::MARKSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::ID_MARKColumn::get() {
        return this->columnID_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::VALUE_MARKColumn::get() {
        return this->columnVALUE_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::DATE_MARKColumn::get() {
        return this->columnDATE_MARK;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::ID_STUDENTColumn::get() {
        return this->columnID_STUDENT;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::ID_TEACHERColumn::get() {
        return this->columnID_TEACHER;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::MARKSDataTable::ID_DISCIPLINEColumn::get() {
        return this->columnID_DISCIPLINE;
    }
    
    inline ::System::Int32 DataSet1::MARKSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline worker::DataSet1::MARKSRow^  DataSet1::MARKSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<worker::DataSet1::MARKSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::AddMARKSRow(worker::DataSet1::MARKSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline worker::DataSet1::MARKSRow^  DataSet1::MARKSDataTable::AddMARKSRow(System::Decimal VALUE_MARK, System::DateTime DATE_MARK, 
                System::Decimal ID_STUDENT, System::Decimal ID_TEACHER, System::Decimal ID_DISCIPLINE) {
        worker::DataSet1::MARKSRow^  rowMARKSRow = (cli::safe_cast<worker::DataSet1::MARKSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {nullptr, VALUE_MARK, 
            DATE_MARK, ID_STUDENT, ID_TEACHER, ID_DISCIPLINE};
        rowMARKSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowMARKSRow);
        return rowMARKSRow;
    }
    
    inline worker::DataSet1::MARKSRow^  DataSet1::MARKSDataTable::FindByID_MARK(System::Decimal ID_MARK) {
        return (cli::safe_cast<worker::DataSet1::MARKSRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_MARK})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::MARKSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::MARKSDataTable::Clone() {
        worker::DataSet1::MARKSDataTable^  cln = (cli::safe_cast<worker::DataSet1::MARKSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::MARKSDataTable::CreateInstance() {
        return (gcnew worker::DataSet1::MARKSDataTable());
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::InitVars() {
        this->columnID_MARK = __super::Columns[L"ID_MARK"];
        this->columnVALUE_MARK = __super::Columns[L"VALUE_MARK"];
        this->columnDATE_MARK = __super::Columns[L"DATE_MARK"];
        this->columnID_STUDENT = __super::Columns[L"ID_STUDENT"];
        this->columnID_TEACHER = __super::Columns[L"ID_TEACHER"];
        this->columnID_DISCIPLINE = __super::Columns[L"ID_DISCIPLINE"];
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::InitClass() {
        this->columnID_MARK = (gcnew ::System::Data::DataColumn(L"ID_MARK", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_MARK);
        this->columnVALUE_MARK = (gcnew ::System::Data::DataColumn(L"VALUE_MARK", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVALUE_MARK);
        this->columnDATE_MARK = (gcnew ::System::Data::DataColumn(L"DATE_MARK", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDATE_MARK);
        this->columnID_STUDENT = (gcnew ::System::Data::DataColumn(L"ID_STUDENT", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_STUDENT);
        this->columnID_TEACHER = (gcnew ::System::Data::DataColumn(L"ID_TEACHER", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_TEACHER);
        this->columnID_DISCIPLINE = (gcnew ::System::Data::DataColumn(L"ID_DISCIPLINE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_DISCIPLINE);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_MARK}, 
                true)));
        this->columnID_MARK->AutoIncrement = true;
        this->columnID_MARK->AutoIncrementSeed = 1;
        this->columnID_MARK->AllowDBNull = false;
        this->columnID_MARK->Unique = true;
    }
    
    inline worker::DataSet1::MARKSRow^  DataSet1::MARKSDataTable::NewMARKSRow() {
        return (cli::safe_cast<worker::DataSet1::MARKSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::MARKSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew worker::DataSet1::MARKSRow(builder));
    }
    
    inline ::System::Type^  DataSet1::MARKSDataTable::GetRowType() {
        return worker::DataSet1::MARKSRow::typeid;
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->MARKSRowChanged(this, (gcnew worker::DataSet1::MARKSRowChangeEvent((cli::safe_cast<worker::DataSet1::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->MARKSRowChanging(this, (gcnew worker::DataSet1::MARKSRowChangeEvent((cli::safe_cast<worker::DataSet1::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->MARKSRowDeleted(this, (gcnew worker::DataSet1::MARKSRowChangeEvent((cli::safe_cast<worker::DataSet1::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->MARKSRowDeleting(this, (gcnew worker::DataSet1::MARKSRowChangeEvent((cli::safe_cast<worker::DataSet1::MARKSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::MARKSDataTable::RemoveMARKSRow(worker::DataSet1::MARKSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::MARKSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"MARKSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::DISCNAMESDataTable::DISCNAMESDataTable() {
        this->TableName = L"DISCNAMES";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline DataSet1::DISCNAMESDataTable::DISCNAMESDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline DataSet1::DISCNAMESDataTable::DISCNAMESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCNAMESDataTable::ID_DISCNAMEColumn::get() {
        return this->columnID_DISCNAME;
    }
    
    inline ::System::Data::DataColumn^  DataSet1::DISCNAMESDataTable::DISC_NAMEColumn::get() {
        return this->columnDISC_NAME;
    }
    
    inline ::System::Int32 DataSet1::DISCNAMESDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline worker::DataSet1::DISCNAMESRow^  DataSet1::DISCNAMESDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<worker::DataSet1::DISCNAMESRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void DataSet1::DISCNAMESDataTable::AddDISCNAMESRow(worker::DataSet1::DISCNAMESRow^  row) {
        this->Rows->Add(row);
    }
    
    inline worker::DataSet1::DISCNAMESRow^  DataSet1::DISCNAMESDataTable::AddDISCNAMESRow(System::String^  DISC_NAME) {
        worker::DataSet1::DISCNAMESRow^  rowDISCNAMESRow = (cli::safe_cast<worker::DataSet1::DISCNAMESRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, DISC_NAME};
        rowDISCNAMESRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowDISCNAMESRow);
        return rowDISCNAMESRow;
    }
    
    inline worker::DataSet1::DISCNAMESRow^  DataSet1::DISCNAMESDataTable::FindByID_DISCNAME(System::Decimal ID_DISCNAME) {
        return (cli::safe_cast<worker::DataSet1::DISCNAMESRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {ID_DISCNAME})));
    }
    
    inline ::System::Collections::IEnumerator^  DataSet1::DISCNAMESDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  DataSet1::DISCNAMESDataTable::Clone() {
        worker::DataSet1::DISCNAMESDataTable^  cln = (cli::safe_cast<worker::DataSet1::DISCNAMESDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  DataSet1::DISCNAMESDataTable::CreateInstance() {
        return (gcnew worker::DataSet1::DISCNAMESDataTable());
    }
    
    inline ::System::Void DataSet1::DISCNAMESDataTable::InitVars() {
        this->columnID_DISCNAME = __super::Columns[L"ID_DISCNAME"];
        this->columnDISC_NAME = __super::Columns[L"DISC_NAME"];
    }
    
    inline ::System::Void DataSet1::DISCNAMESDataTable::InitClass() {
        this->columnID_DISCNAME = (gcnew ::System::Data::DataColumn(L"ID_DISCNAME", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnID_DISCNAME);
        this->columnDISC_NAME = (gcnew ::System::Data::DataColumn(L"DISC_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDISC_NAME);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnID_DISCNAME}, 
                true)));
        this->columnID_DISCNAME->AutoIncrement = true;
        this->columnID_DISCNAME->AutoIncrementSeed = 1;
        this->columnID_DISCNAME->AllowDBNull = false;
        this->columnID_DISCNAME->Unique = true;
        this->columnDISC_NAME->MaxLength = 100;
    }
    
    inline worker::DataSet1::DISCNAMESRow^  DataSet1::DISCNAMESDataTable::NewDISCNAMESRow() {
        return (cli::safe_cast<worker::DataSet1::DISCNAMESRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  DataSet1::DISCNAMESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew worker::DataSet1::DISCNAMESRow(builder));
    }
    
    inline ::System::Type^  DataSet1::DISCNAMESDataTable::GetRowType() {
        return worker::DataSet1::DISCNAMESRow::typeid;
    }
    
    inline ::System::Void DataSet1::DISCNAMESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->DISCNAMESRowChanged(this, (gcnew worker::DataSet1::DISCNAMESRowChangeEvent((cli::safe_cast<worker::DataSet1::DISCNAMESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCNAMESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->DISCNAMESRowChanging(this, (gcnew worker::DataSet1::DISCNAMESRowChangeEvent((cli::safe_cast<worker::DataSet1::DISCNAMESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCNAMESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->DISCNAMESRowDeleted(this, (gcnew worker::DataSet1::DISCNAMESRowChangeEvent((cli::safe_cast<worker::DataSet1::DISCNAMESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCNAMESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->DISCNAMESRowDeleting(this, (gcnew worker::DataSet1::DISCNAMESRowChangeEvent((cli::safe_cast<worker::DataSet1::DISCNAMESRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void DataSet1::DISCNAMESDataTable::RemoveDISCNAMESRow(worker::DataSet1::DISCNAMESRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  DataSet1::DISCNAMESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        worker::DataSet1^  ds = (gcnew worker::DataSet1());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"DISCNAMESDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline DataSet1::PROFESSIONSRow::PROFESSIONSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablePROFESSIONS = (cli::safe_cast<worker::DataSet1::PROFESSIONSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::PROFESSIONSRow::ID_PROFESSION::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tablePROFESSIONS->ID_PROFESSIONColumn]));
    }
    inline System::Void DataSet1::PROFESSIONSRow::ID_PROFESSION::set(System::Decimal value) {
        this[this->tablePROFESSIONS->ID_PROFESSIONColumn] = value;
    }
    
    inline System::String^  DataSet1::PROFESSIONSRow::NAME_PROFESSION::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePROFESSIONS->NAME_PROFESSIONColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'NAME_PROFESSION\' в таблице \'PROFESSIONS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::PROFESSIONSRow::NAME_PROFESSION::set(System::String^  value) {
        this[this->tablePROFESSIONS->NAME_PROFESSIONColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::PROFESSIONSRow::IsNAME_PROFESSIONNull() {
        return this->IsNull(this->tablePROFESSIONS->NAME_PROFESSIONColumn);
    }
    
    inline ::System::Void DataSet1::PROFESSIONSRow::SetNAME_PROFESSIONNull() {
        this[this->tablePROFESSIONS->NAME_PROFESSIONColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::GROUPSRow::GROUPSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableGROUPS = (cli::safe_cast<worker::DataSet1::GROUPSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::GROUPSRow::ID_GROUP::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableGROUPS->ID_GROUPColumn]));
    }
    inline System::Void DataSet1::GROUPSRow::ID_GROUP::set(System::Decimal value) {
        this[this->tableGROUPS->ID_GROUPColumn] = value;
    }
    
    inline System::String^  DataSet1::GROUPSRow::NAME_GROUP::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGROUPS->NAME_GROUPColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'NAME_GROUP\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::GROUPSRow::NAME_GROUP::set(System::String^  value) {
        this[this->tableGROUPS->NAME_GROUPColumn] = value;
    }
    
    inline System::Decimal DataSet1::GROUPSRow::COURSE::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableGROUPS->COURSEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'COURSE\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::GROUPSRow::COURSE::set(System::Decimal value) {
        this[this->tableGROUPS->COURSEColumn] = value;
    }
    
    inline System::Decimal DataSet1::GROUPSRow::ID_PROFESSION::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableGROUPS->ID_PROFESSIONColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_PROFESSION\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::GROUPSRow::ID_PROFESSION::set(System::Decimal value) {
        this[this->tableGROUPS->ID_PROFESSIONColumn] = value;
    }
    
    inline System::Decimal DataSet1::GROUPSRow::SUBGROUP::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableGROUPS->SUBGROUPColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'SUBGROUP\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::GROUPSRow::SUBGROUP::set(System::Decimal value) {
        this[this->tableGROUPS->SUBGROUPColumn] = value;
    }
    
    inline System::String^  DataSet1::GROUPSRow::GROUPNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGROUPS->GROUPNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'GROUPNAME\' в таблице \'GROUPS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::GROUPSRow::GROUPNAME::set(System::String^  value) {
        this[this->tableGROUPS->GROUPNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::GROUPSRow::IsNAME_GROUPNull() {
        return this->IsNull(this->tableGROUPS->NAME_GROUPColumn);
    }
    
    inline ::System::Void DataSet1::GROUPSRow::SetNAME_GROUPNull() {
        this[this->tableGROUPS->NAME_GROUPColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::GROUPSRow::IsCOURSENull() {
        return this->IsNull(this->tableGROUPS->COURSEColumn);
    }
    
    inline ::System::Void DataSet1::GROUPSRow::SetCOURSENull() {
        this[this->tableGROUPS->COURSEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::GROUPSRow::IsID_PROFESSIONNull() {
        return this->IsNull(this->tableGROUPS->ID_PROFESSIONColumn);
    }
    
    inline ::System::Void DataSet1::GROUPSRow::SetID_PROFESSIONNull() {
        this[this->tableGROUPS->ID_PROFESSIONColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::GROUPSRow::IsSUBGROUPNull() {
        return this->IsNull(this->tableGROUPS->SUBGROUPColumn);
    }
    
    inline ::System::Void DataSet1::GROUPSRow::SetSUBGROUPNull() {
        this[this->tableGROUPS->SUBGROUPColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::GROUPSRow::IsGROUPNAMENull() {
        return this->IsNull(this->tableGROUPS->GROUPNAMEColumn);
    }
    
    inline ::System::Void DataSet1::GROUPSRow::SetGROUPNAMENull() {
        this[this->tableGROUPS->GROUPNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::STATUSESRow::STATUSESRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableSTATUSES = (cli::safe_cast<worker::DataSet1::STATUSESDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::STATUSESRow::ID_STATUS::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableSTATUSES->ID_STATUSColumn]));
    }
    inline System::Void DataSet1::STATUSESRow::ID_STATUS::set(System::Decimal value) {
        this[this->tableSTATUSES->ID_STATUSColumn] = value;
    }
    
    inline System::String^  DataSet1::STATUSESRow::VALUE_STATUS::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTATUSES->VALUE_STATUSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'VALUE_STATUS\' в таблице \'STATUSES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::STATUSESRow::VALUE_STATUS::set(System::String^  value) {
        this[this->tableSTATUSES->VALUE_STATUSColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::STATUSESRow::IsVALUE_STATUSNull() {
        return this->IsNull(this->tableSTATUSES->VALUE_STATUSColumn);
    }
    
    inline ::System::Void DataSet1::STATUSESRow::SetVALUE_STATUSNull() {
        this[this->tableSTATUSES->VALUE_STATUSColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::STUDENTSRow::STUDENTSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableSTUDENTS = (cli::safe_cast<worker::DataSet1::STUDENTSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::STUDENTSRow::ID_STUDENT::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableSTUDENTS->ID_STUDENTColumn]));
    }
    inline System::Void DataSet1::STUDENTSRow::ID_STUDENT::set(System::Decimal value) {
        this[this->tableSTUDENTS->ID_STUDENTColumn] = value;
    }
    
    inline System::String^  DataSet1::STUDENTSRow::LAST_NAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTUDENTS->LAST_NAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'LAST_NAME\' в таблице \'STUDENTS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::STUDENTSRow::LAST_NAME::set(System::String^  value) {
        this[this->tableSTUDENTS->LAST_NAMEColumn] = value;
    }
    
    inline System::String^  DataSet1::STUDENTSRow::FIRST_NAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTUDENTS->FIRST_NAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FIRST_NAME\' в таблице \'STUDENTS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::STUDENTSRow::FIRST_NAME::set(System::String^  value) {
        this[this->tableSTUDENTS->FIRST_NAMEColumn] = value;
    }
    
    inline System::String^  DataSet1::STUDENTSRow::THIRD_NAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTUDENTS->THIRD_NAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'THIRD_NAME\' в таблице \'STUDENTS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::STUDENTSRow::THIRD_NAME::set(System::String^  value) {
        this[this->tableSTUDENTS->THIRD_NAMEColumn] = value;
    }
    
    inline System::DateTime DataSet1::STUDENTSRow::BIRTHDAY::get() {
        try {
            return (cli::safe_cast<::System::DateTime >(this[this->tableSTUDENTS->BIRTHDAYColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'BIRTHDAY\' в таблице \'STUDENTS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::STUDENTSRow::BIRTHDAY::set(System::DateTime value) {
        this[this->tableSTUDENTS->BIRTHDAYColumn] = value;
    }
    
    inline System::DateTime DataSet1::STUDENTSRow::EXPIRY_STATUS::get() {
        try {
            return (cli::safe_cast<::System::DateTime >(this[this->tableSTUDENTS->EXPIRY_STATUSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'EXPIRY_STATUS\' в таблице \'STUDENTS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::STUDENTSRow::EXPIRY_STATUS::set(System::DateTime value) {
        this[this->tableSTUDENTS->EXPIRY_STATUSColumn] = value;
    }
    
    inline System::DateTime DataSet1::STUDENTSRow::ENTER_DATE::get() {
        try {
            return (cli::safe_cast<::System::DateTime >(this[this->tableSTUDENTS->ENTER_DATEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ENTER_DATE\' в таблице \'STUDENTS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::STUDENTSRow::ENTER_DATE::set(System::DateTime value) {
        this[this->tableSTUDENTS->ENTER_DATEColumn] = value;
    }
    
    inline System::Decimal DataSet1::STUDENTSRow::ID_STATUS::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableSTUDENTS->ID_STATUSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_STATUS\' в таблице \'STUDENTS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::STUDENTSRow::ID_STATUS::set(System::Decimal value) {
        this[this->tableSTUDENTS->ID_STATUSColumn] = value;
    }
    
    inline System::Decimal DataSet1::STUDENTSRow::ID_GROUP::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableSTUDENTS->ID_GROUPColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_GROUP\' в таблице \'STUDENTS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::STUDENTSRow::ID_GROUP::set(System::Decimal value) {
        this[this->tableSTUDENTS->ID_GROUPColumn] = value;
    }
    
    inline System::String^  DataSet1::STUDENTSRow::FULLNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTUDENTS->FULLNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FULLNAME\' в таблице \'STUDENTS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::STUDENTSRow::FULLNAME::set(System::String^  value) {
        this[this->tableSTUDENTS->FULLNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::STUDENTSRow::IsLAST_NAMENull() {
        return this->IsNull(this->tableSTUDENTS->LAST_NAMEColumn);
    }
    
    inline ::System::Void DataSet1::STUDENTSRow::SetLAST_NAMENull() {
        this[this->tableSTUDENTS->LAST_NAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::STUDENTSRow::IsFIRST_NAMENull() {
        return this->IsNull(this->tableSTUDENTS->FIRST_NAMEColumn);
    }
    
    inline ::System::Void DataSet1::STUDENTSRow::SetFIRST_NAMENull() {
        this[this->tableSTUDENTS->FIRST_NAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::STUDENTSRow::IsTHIRD_NAMENull() {
        return this->IsNull(this->tableSTUDENTS->THIRD_NAMEColumn);
    }
    
    inline ::System::Void DataSet1::STUDENTSRow::SetTHIRD_NAMENull() {
        this[this->tableSTUDENTS->THIRD_NAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::STUDENTSRow::IsBIRTHDAYNull() {
        return this->IsNull(this->tableSTUDENTS->BIRTHDAYColumn);
    }
    
    inline ::System::Void DataSet1::STUDENTSRow::SetBIRTHDAYNull() {
        this[this->tableSTUDENTS->BIRTHDAYColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::STUDENTSRow::IsEXPIRY_STATUSNull() {
        return this->IsNull(this->tableSTUDENTS->EXPIRY_STATUSColumn);
    }
    
    inline ::System::Void DataSet1::STUDENTSRow::SetEXPIRY_STATUSNull() {
        this[this->tableSTUDENTS->EXPIRY_STATUSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::STUDENTSRow::IsENTER_DATENull() {
        return this->IsNull(this->tableSTUDENTS->ENTER_DATEColumn);
    }
    
    inline ::System::Void DataSet1::STUDENTSRow::SetENTER_DATENull() {
        this[this->tableSTUDENTS->ENTER_DATEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::STUDENTSRow::IsID_STATUSNull() {
        return this->IsNull(this->tableSTUDENTS->ID_STATUSColumn);
    }
    
    inline ::System::Void DataSet1::STUDENTSRow::SetID_STATUSNull() {
        this[this->tableSTUDENTS->ID_STATUSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::STUDENTSRow::IsID_GROUPNull() {
        return this->IsNull(this->tableSTUDENTS->ID_GROUPColumn);
    }
    
    inline ::System::Void DataSet1::STUDENTSRow::SetID_GROUPNull() {
        this[this->tableSTUDENTS->ID_GROUPColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::STUDENTSRow::IsFULLNAMENull() {
        return this->IsNull(this->tableSTUDENTS->FULLNAMEColumn);
    }
    
    inline ::System::Void DataSet1::STUDENTSRow::SetFULLNAMENull() {
        this[this->tableSTUDENTS->FULLNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::TEACHERSRow::TEACHERSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTEACHERS = (cli::safe_cast<worker::DataSet1::TEACHERSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::TEACHERSRow::ID_TEACHER::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableTEACHERS->ID_TEACHERColumn]));
    }
    inline System::Void DataSet1::TEACHERSRow::ID_TEACHER::set(System::Decimal value) {
        this[this->tableTEACHERS->ID_TEACHERColumn] = value;
    }
    
    inline System::String^  DataSet1::TEACHERSRow::LAST_NAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTEACHERS->LAST_NAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'LAST_NAME\' в таблице \'TEACHERS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::TEACHERSRow::LAST_NAME::set(System::String^  value) {
        this[this->tableTEACHERS->LAST_NAMEColumn] = value;
    }
    
    inline System::String^  DataSet1::TEACHERSRow::FIRST_NAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTEACHERS->FIRST_NAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FIRST_NAME\' в таблице \'TEACHERS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::TEACHERSRow::FIRST_NAME::set(System::String^  value) {
        this[this->tableTEACHERS->FIRST_NAMEColumn] = value;
    }
    
    inline System::String^  DataSet1::TEACHERSRow::THIRD_NAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTEACHERS->THIRD_NAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'THIRD_NAME\' в таблице \'TEACHERS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::TEACHERSRow::THIRD_NAME::set(System::String^  value) {
        this[this->tableTEACHERS->THIRD_NAMEColumn] = value;
    }
    
    inline System::String^  DataSet1::TEACHERSRow::FULLNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTEACHERS->FULLNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'FULLNAME\' в таблице \'TEACHERS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::TEACHERSRow::FULLNAME::set(System::String^  value) {
        this[this->tableTEACHERS->FULLNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::TEACHERSRow::IsLAST_NAMENull() {
        return this->IsNull(this->tableTEACHERS->LAST_NAMEColumn);
    }
    
    inline ::System::Void DataSet1::TEACHERSRow::SetLAST_NAMENull() {
        this[this->tableTEACHERS->LAST_NAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::TEACHERSRow::IsFIRST_NAMENull() {
        return this->IsNull(this->tableTEACHERS->FIRST_NAMEColumn);
    }
    
    inline ::System::Void DataSet1::TEACHERSRow::SetFIRST_NAMENull() {
        this[this->tableTEACHERS->FIRST_NAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::TEACHERSRow::IsTHIRD_NAMENull() {
        return this->IsNull(this->tableTEACHERS->THIRD_NAMEColumn);
    }
    
    inline ::System::Void DataSet1::TEACHERSRow::SetTHIRD_NAMENull() {
        this[this->tableTEACHERS->THIRD_NAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::TEACHERSRow::IsFULLNAMENull() {
        return this->IsNull(this->tableTEACHERS->FULLNAMEColumn);
    }
    
    inline ::System::Void DataSet1::TEACHERSRow::SetFULLNAMENull() {
        this[this->tableTEACHERS->FULLNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::TEACHERS2DISCIPLINESRow::TEACHERS2DISCIPLINESRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTEACHERS2DISCIPLINES = (cli::safe_cast<worker::DataSet1::TEACHERS2DISCIPLINESDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::TEACHERS2DISCIPLINESRow::TEACHERS_ID_TEACHER::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableTEACHERS2DISCIPLINES->TEACHERS_ID_TEACHERColumn]));
    }
    inline System::Void DataSet1::TEACHERS2DISCIPLINESRow::TEACHERS_ID_TEACHER::set(System::Decimal value) {
        this[this->tableTEACHERS2DISCIPLINES->TEACHERS_ID_TEACHERColumn] = value;
    }
    
    inline System::Decimal DataSet1::TEACHERS2DISCIPLINESRow::DISCIPLINES_ID_DISCIPLINE::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableTEACHERS2DISCIPLINES->DISCIPLINES_ID_DISCIPLINEColumn]));
    }
    inline System::Void DataSet1::TEACHERS2DISCIPLINESRow::DISCIPLINES_ID_DISCIPLINE::set(System::Decimal value) {
        this[this->tableTEACHERS2DISCIPLINES->DISCIPLINES_ID_DISCIPLINEColumn] = value;
    }
    
    
    inline DataSet1::TYPESRow::TYPESRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTYPES = (cli::safe_cast<worker::DataSet1::TYPESDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::TYPESRow::ID_TYPE::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableTYPES->ID_TYPEColumn]));
    }
    inline System::Void DataSet1::TYPESRow::ID_TYPE::set(System::Decimal value) {
        this[this->tableTYPES->ID_TYPEColumn] = value;
    }
    
    inline System::String^  DataSet1::TYPESRow::VALUE_TYPE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTYPES->VALUE_TYPEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'VALUE_TYPE\' в таблице \'TYPES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::TYPESRow::VALUE_TYPE::set(System::String^  value) {
        this[this->tableTYPES->VALUE_TYPEColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::TYPESRow::IsVALUE_TYPENull() {
        return this->IsNull(this->tableTYPES->VALUE_TYPEColumn);
    }
    
    inline ::System::Void DataSet1::TYPESRow::SetVALUE_TYPENull() {
        this[this->tableTYPES->VALUE_TYPEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::DISCIPLINESRow::DISCIPLINESRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableDISCIPLINES = (cli::safe_cast<worker::DataSet1::DISCIPLINESDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::DISCIPLINESRow::ID_DISCIPLINE::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->ID_DISCIPLINEColumn]));
    }
    inline System::Void DataSet1::DISCIPLINESRow::ID_DISCIPLINE::set(System::Decimal value) {
        this[this->tableDISCIPLINES->ID_DISCIPLINEColumn] = value;
    }
    
    inline System::Decimal DataSet1::DISCIPLINESRow::NUMBER_HOURS::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->NUMBER_HOURSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'NUMBER_HOURS\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::NUMBER_HOURS::set(System::Decimal value) {
        this[this->tableDISCIPLINES->NUMBER_HOURSColumn] = value;
    }
    
    inline System::Decimal DataSet1::DISCIPLINESRow::ID_GROUP::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->ID_GROUPColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_GROUP\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::ID_GROUP::set(System::Decimal value) {
        this[this->tableDISCIPLINES->ID_GROUPColumn] = value;
    }
    
    inline System::Decimal DataSet1::DISCIPLINESRow::ID_TYPE::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->ID_TYPEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_TYPE\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::ID_TYPE::set(System::Decimal value) {
        this[this->tableDISCIPLINES->ID_TYPEColumn] = value;
    }
    
    inline System::Decimal DataSet1::DISCIPLINESRow::ID_DISCNAME::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableDISCIPLINES->ID_DISCNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_DISCNAME\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::ID_DISCNAME::set(System::Decimal value) {
        this[this->tableDISCIPLINES->ID_DISCNAMEColumn] = value;
    }
    
    inline System::String^  DataSet1::DISCIPLINESRow::DISCNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDISCIPLINES->DISCNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DISCNAME\' в таблице \'DISCIPLINES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::DISCNAME::set(System::String^  value) {
        this[this->tableDISCIPLINES->DISCNAMEColumn] = value;
    }
    
    inline System::String^  DataSet1::DISCIPLINESRow::DISCNAMEWITHGROUPNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDISCIPLINES->DISCNAMEWITHGROUPNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DISCNAMEWITHGROUPNAME\' в таблице \'DISCIPLINES\' равно DBNull" 
L".", 
                e));
        }
    }
    inline System::Void DataSet1::DISCIPLINESRow::DISCNAMEWITHGROUPNAME::set(System::String^  value) {
        this[this->tableDISCIPLINES->DISCNAMEWITHGROUPNAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsNUMBER_HOURSNull() {
        return this->IsNull(this->tableDISCIPLINES->NUMBER_HOURSColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetNUMBER_HOURSNull() {
        this[this->tableDISCIPLINES->NUMBER_HOURSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsID_GROUPNull() {
        return this->IsNull(this->tableDISCIPLINES->ID_GROUPColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetID_GROUPNull() {
        this[this->tableDISCIPLINES->ID_GROUPColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsID_TYPENull() {
        return this->IsNull(this->tableDISCIPLINES->ID_TYPEColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetID_TYPENull() {
        this[this->tableDISCIPLINES->ID_TYPEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsID_DISCNAMENull() {
        return this->IsNull(this->tableDISCIPLINES->ID_DISCNAMEColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetID_DISCNAMENull() {
        this[this->tableDISCIPLINES->ID_DISCNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsDISCNAMENull() {
        return this->IsNull(this->tableDISCIPLINES->DISCNAMEColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetDISCNAMENull() {
        this[this->tableDISCIPLINES->DISCNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::DISCIPLINESRow::IsDISCNAMEWITHGROUPNAMENull() {
        return this->IsNull(this->tableDISCIPLINES->DISCNAMEWITHGROUPNAMEColumn);
    }
    
    inline ::System::Void DataSet1::DISCIPLINESRow::SetDISCNAMEWITHGROUPNAMENull() {
        this[this->tableDISCIPLINES->DISCNAMEWITHGROUPNAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::MARKSRow::MARKSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableMARKS = (cli::safe_cast<worker::DataSet1::MARKSDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::MARKSRow::ID_MARK::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->ID_MARKColumn]));
    }
    inline System::Void DataSet1::MARKSRow::ID_MARK::set(System::Decimal value) {
        this[this->tableMARKS->ID_MARKColumn] = value;
    }
    
    inline System::Decimal DataSet1::MARKSRow::VALUE_MARK::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->VALUE_MARKColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'VALUE_MARK\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::VALUE_MARK::set(System::Decimal value) {
        this[this->tableMARKS->VALUE_MARKColumn] = value;
    }
    
    inline System::DateTime DataSet1::MARKSRow::DATE_MARK::get() {
        try {
            return (cli::safe_cast<::System::DateTime >(this[this->tableMARKS->DATE_MARKColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DATE_MARK\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::DATE_MARK::set(System::DateTime value) {
        this[this->tableMARKS->DATE_MARKColumn] = value;
    }
    
    inline System::Decimal DataSet1::MARKSRow::ID_STUDENT::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->ID_STUDENTColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_STUDENT\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::ID_STUDENT::set(System::Decimal value) {
        this[this->tableMARKS->ID_STUDENTColumn] = value;
    }
    
    inline System::Decimal DataSet1::MARKSRow::ID_TEACHER::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->ID_TEACHERColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_TEACHER\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::ID_TEACHER::set(System::Decimal value) {
        this[this->tableMARKS->ID_TEACHERColumn] = value;
    }
    
    inline System::Decimal DataSet1::MARKSRow::ID_DISCIPLINE::get() {
        try {
            return (cli::safe_cast<::System::Decimal >(this[this->tableMARKS->ID_DISCIPLINEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'ID_DISCIPLINE\' в таблице \'MARKS\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::MARKSRow::ID_DISCIPLINE::set(System::Decimal value) {
        this[this->tableMARKS->ID_DISCIPLINEColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsVALUE_MARKNull() {
        return this->IsNull(this->tableMARKS->VALUE_MARKColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetVALUE_MARKNull() {
        this[this->tableMARKS->VALUE_MARKColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsDATE_MARKNull() {
        return this->IsNull(this->tableMARKS->DATE_MARKColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetDATE_MARKNull() {
        this[this->tableMARKS->DATE_MARKColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsID_STUDENTNull() {
        return this->IsNull(this->tableMARKS->ID_STUDENTColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetID_STUDENTNull() {
        this[this->tableMARKS->ID_STUDENTColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsID_TEACHERNull() {
        return this->IsNull(this->tableMARKS->ID_TEACHERColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetID_TEACHERNull() {
        this[this->tableMARKS->ID_TEACHERColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean DataSet1::MARKSRow::IsID_DISCIPLINENull() {
        return this->IsNull(this->tableMARKS->ID_DISCIPLINEColumn);
    }
    
    inline ::System::Void DataSet1::MARKSRow::SetID_DISCIPLINENull() {
        this[this->tableMARKS->ID_DISCIPLINEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::DISCNAMESRow::DISCNAMESRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableDISCNAMES = (cli::safe_cast<worker::DataSet1::DISCNAMESDataTable^  >(this->Table));
    }
    
    inline System::Decimal DataSet1::DISCNAMESRow::ID_DISCNAME::get() {
        return (cli::safe_cast<::System::Decimal >(this[this->tableDISCNAMES->ID_DISCNAMEColumn]));
    }
    inline System::Void DataSet1::DISCNAMESRow::ID_DISCNAME::set(System::Decimal value) {
        this[this->tableDISCNAMES->ID_DISCNAMEColumn] = value;
    }
    
    inline System::String^  DataSet1::DISCNAMESRow::DISC_NAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDISCNAMES->DISC_NAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"Значение для столбца \'DISC_NAME\' в таблице \'DISCNAMES\' равно DBNull.", 
                e));
        }
    }
    inline System::Void DataSet1::DISCNAMESRow::DISC_NAME::set(System::String^  value) {
        this[this->tableDISCNAMES->DISC_NAMEColumn] = value;
    }
    
    inline ::System::Boolean DataSet1::DISCNAMESRow::IsDISC_NAMENull() {
        return this->IsNull(this->tableDISCNAMES->DISC_NAMEColumn);
    }
    
    inline ::System::Void DataSet1::DISCNAMESRow::SetDISC_NAMENull() {
        this[this->tableDISCNAMES->DISC_NAMEColumn] = ::System::Convert::DBNull;
    }
    
    
    inline DataSet1::PROFESSIONSRowChangeEvent::PROFESSIONSRowChangeEvent(worker::DataSet1::PROFESSIONSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline worker::DataSet1::PROFESSIONSRow^  DataSet1::PROFESSIONSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::PROFESSIONSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::GROUPSRowChangeEvent::GROUPSRowChangeEvent(worker::DataSet1::GROUPSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline worker::DataSet1::GROUPSRow^  DataSet1::GROUPSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::GROUPSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::STATUSESRowChangeEvent::STATUSESRowChangeEvent(worker::DataSet1::STATUSESRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline worker::DataSet1::STATUSESRow^  DataSet1::STATUSESRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::STATUSESRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::STUDENTSRowChangeEvent::STUDENTSRowChangeEvent(worker::DataSet1::STUDENTSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline worker::DataSet1::STUDENTSRow^  DataSet1::STUDENTSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::STUDENTSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::TEACHERSRowChangeEvent::TEACHERSRowChangeEvent(worker::DataSet1::TEACHERSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline worker::DataSet1::TEACHERSRow^  DataSet1::TEACHERSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::TEACHERSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::TEACHERS2DISCIPLINESRowChangeEvent::TEACHERS2DISCIPLINESRowChangeEvent(worker::DataSet1::TEACHERS2DISCIPLINESRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline worker::DataSet1::TEACHERS2DISCIPLINESRow^  DataSet1::TEACHERS2DISCIPLINESRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::TEACHERS2DISCIPLINESRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::TYPESRowChangeEvent::TYPESRowChangeEvent(worker::DataSet1::TYPESRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline worker::DataSet1::TYPESRow^  DataSet1::TYPESRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::TYPESRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::DISCIPLINESRowChangeEvent::DISCIPLINESRowChangeEvent(worker::DataSet1::DISCIPLINESRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline worker::DataSet1::DISCIPLINESRow^  DataSet1::DISCIPLINESRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::DISCIPLINESRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::MARKSRowChangeEvent::MARKSRowChangeEvent(worker::DataSet1::MARKSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline worker::DataSet1::MARKSRow^  DataSet1::MARKSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::MARKSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline DataSet1::DISCNAMESRowChangeEvent::DISCNAMESRowChangeEvent(worker::DataSet1::DISCNAMESRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline worker::DataSet1::DISCNAMESRow^  DataSet1::DISCNAMESRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction DataSet1::DISCNAMESRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
